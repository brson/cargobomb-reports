boom! testing parsell-0.6.5 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 2c5d888cbeb3ba369c07cdd94b4e996067153ed146c3266ec6454158d10db13b
boom! running `docker start -a 2c5d888cbeb3ba369c07cdd94b4e996067153ed146c3266ec6454158d10db13b`
kablam!    Compiling parsell v0.6.5 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 2.98 secs
boom! running `docker rm -f 2c5d888cbeb3ba369c07cdd94b4e996067153ed146c3266ec6454158d10db13b`
blam! 2c5d888cbeb3ba369c07cdd94b4e996067153ed146c3266ec6454158d10db13b
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! 12325ad597d43d158ab5a3ea55ad49423b225208bc0e6561ebe415769403d168
boom! running `docker start -a 12325ad597d43d158ab5a3ea55ad49423b225208bc0e6561ebe415769403d168`
kablam!    Compiling parsell v0.6.5 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 11.14 secs
boom! running `docker rm -f 12325ad597d43d158ab5a3ea55ad49423b225208bc0e6561ebe415769403d168`
blam! 12325ad597d43d158ab5a3ea55ad49423b225208bc0e6561ebe415769403d168
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! fb913c15359161152a8f93656d9cf376ecd50c9ff14eee66408126a4a5417e1b
boom! running `docker start -a fb913c15359161152a8f93656d9cf376ecd50c9ff14eee66408126a4a5417e1b`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.2 secs
kablam!      Running /target/debug/deps/parsell-f3888f0e3352ee77
blam! 
blam! running 23 tests
blam! test test_and_then_try ... ok
blam! test test_and_then_try_discard ... ok
blam! test test_and_then_discard ... ok
blam! test test_boxable ... ok
blam! test test_character ... ok
blam! test test_buffer ... ok
blam! test test_character_map_ref ... ok
blam! test test_character_ref ... ok
blam! test test_character_map ... ok
blam! test test_cow ... ok
blam! test test_and_then ... ok
blam! test test_discard ... ok
blam! test test_discard_and_then ... ok
blam! test test_or_else ... ok
blam! test test_plus ... ok
blam! test test_star ... ok
blam! test test_try_and_then ... ok
blam! test test_map ... ok
blam! test test_try_discard_and_then ... ok
blam! test test_try_and_then_try ... ok
blam! test test_CHARACTER ... ok
blam! test test_try_and_then_try_discard ... ok
blam! test test_try_discard_and_then_try ... ok
blam! 
blam! test result: ok. 23 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/skeptic-b3ceff4bc5e3f3cc
blam! 
blam! running 1 test
blam! test readme_0 ... ok
blam! 
blam! test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/typecheck_time1-a992615b7a61b6b4
blam! 
blam! running 1 test
blam! test test_typecheck_time ... ok
blam! 
blam! test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/typecheck_time2-39ee3d03547ddff8
blam! 
blam! running 1 test
blam! test test_typecheck_time ... ok
blam! 
blam! test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/typecheck_time3-89369d0948d1f319
blam! 
blam! running 1 test
blam! test test_typecheck_time ... ok
blam! 
blam! test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/typecheck_time4-03d5f9739664cadf
blam! 
blam! running 1 test
blam! test test_typecheck_time ... ok
blam! 
blam! test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests parsell
blam! 
blam! running 18 tests
blam! warning: struct is never used: `Tree`, #[warn(dead_code)] on by default
blam!  --> <anon>:2:1
blam!   |
blam! 2 | struct Tree(Vec<Tree>);
blam!   | ^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test Boxable_0 ... ok
blam! warning: struct is never used: `Tree`, #[warn(dead_code)] on by default
blam!  --> <anon>:5:1
blam!   |
blam! 5 | struct Tree(Vec<Tree>);
blam!   | ^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: type alias is never used: `TreeParserState`, #[warn(dead_code)] on by default
blam!  --> <anon>:6:1
blam!   |
blam! 6 | type TreeParserState = Box<for<'b> Boxable<char, Chars<'b>, Result<Tree, String>>>;
blam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test Boxable_1 ... ok
blam! warning: unused variable: `parser`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let parser = character(char::is_alphanumeric).star(String::new);
blam!   |     ^^^^^^
blam! 
blam! test Committed_0 ... ok
blam! test Consumer_0 ... ok
blam! warning: unused imports: `Committed`, `Stateful`, #[warn(unused_imports)] on by default
blam!  --> <anon>:4:54
blam!   |
blam! 4 | use parsell::{character,CHARACTER,Parser,Uncommitted,Committed,Boxable,Stateful,InState,ParseResult,StaticMarker,HasOutput};
blam!   |                                                      ^^^^^^^^^         ^^^^^^^^
blam! 
blam! warning: unused imports: `Continue`, `Done`, #[warn(unused_imports)] on by default
blam!  --> <anon>:5:28
blam!   |
blam! 5 | use parsell::ParseResult::{Done,Continue};
blam!   |                            ^^^^ ^^^^^^^^
blam! 
blam! warning: variable `LPAREN` should have a snake case name such as `lparen`, #[warn(non_snake_case)] on by default
blam!   --> <anon>:29:11
blam!    |
blam! 29 |       let LPAREN = character(is_lparen);
blam!    |           ^^^^^^
blam! 
blam! warning: variable `RPAREN` should have a snake case name such as `rparen`, #[warn(non_snake_case)] on by default
blam!   --> <anon>:30:11
blam!    |
blam! 30 |       let RPAREN = character(is_rparen).map(mk_ok).or_else(CHARACTER.map(mk_err));
blam!    |           ^^^^^^
blam! 
blam! test Boxable_2 ... ok
blam! warning: unused imports: `Committed`, `Stateful`, #[warn(unused_imports)] on by default
blam!  --> <anon>:4:69
blam!   |
blam! 4 | use parsell::{character,CHARACTER,Parser,Uncommitted,UncommittedStr,Committed,Boxable,Stateful,StatefulStr,InState,ParseResult,StaticMarker,HasOutput};
blam!   |                                                                     ^^^^^^^^^         ^^^^^^^^
blam! 
blam! warning: variable `LPAREN` should have a snake case name such as `lparen`, #[warn(non_snake_case)] on by default
blam!   --> <anon>:28:13
blam!    |
blam! 28 |         let LPAREN = character(is_lparen);
blam!    |             ^^^^^^
blam! 
blam! warning: variable `RPAREN` should have a snake case name such as `rparen`, #[warn(non_snake_case)] on by default
blam!   --> <anon>:29:13
blam!    |
blam! 29 |         let RPAREN = character(is_rparen).map(mk_ok).or_else(CHARACTER.map(mk_err));
blam!    |             ^^^^^^
blam! 
blam! warning: variable `TREE` should have a snake case name such as `tree`, #[warn(non_snake_case)] on by default
blam!   --> <anon>:38:5
blam!    |
blam! 38 | let TREE = TreeParser;
blam!    |     ^^^^
blam! 
blam! test Boxable_3 ... ok
blam! warning: unused variable: `parser`, #[warn(unused_variables)] on by default
blam!   --> <anon>:10:5
blam!    |
blam! 10 | let parser: Character<AlphaNumeric> =
blam!    |     ^^^^^^
blam! 
blam! test Function_0 ... ok
blam! test Consumer_1 ... ok
blam! test Consumer_2 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:32
blam!   |
blam! 3 | use parsell::{character,Parser,UncommittedInfer,Uncommitted,CommittedInfer,StatefulInfer,Stateful};
blam!   |                                ^^^^^^^^^^^^^^^^             ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! warning: unused import: `Done`, #[warn(unused_imports)] on by default
blam!  --> <anon>:4:37
blam!   |
blam! 4 | use parsell::ParseResult::{Continue,Done};
blam!   |                                     ^^^^
blam! 
blam! test Stateful::done_0 ... ok
blam! warning: unused imports: `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:32
blam!   |
blam! 3 | use parsell::{character,Parser,UncommittedInfer,Uncommitted,StatefulInfer,Stateful};
blam!   |                                ^^^^^^^^^^^^^^^^             ^^^^^^^^^^^^^
blam! 
blam! test Parser::buffer_0 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:32
blam!   |
blam! 3 | use parsell::{character,Parser,UncommittedInfer,Uncommitted,CommittedInfer,StatefulInfer,Stateful};
blam!   |                                ^^^^^^^^^^^^^^^^             ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! test Stateful::more_0 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:32
blam!   |
blam! 3 | use parsell::{character,Parser,UncommittedInfer,UncommittedStr,CommittedInfer,StatefulInfer,StatefulStr};
blam!   |                                ^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! warning: unused import: `Done`, #[warn(unused_imports)] on by default
blam!  --> <anon>:4:37
blam!   |
blam! 4 | use parsell::ParseResult::{Continue,Done};
blam!   |                                     ^^^^
blam! 
blam! test StatefulStr::last_str_0 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:32
blam!   |
blam! 3 | use parsell::{character,Parser,UncommittedInfer,UncommittedStr,CommittedInfer,StatefulInfer,StatefulStr};
blam!   |                                ^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! test StatefulStr::more_str_0 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:32
blam!   |
blam! 3 | use parsell::{character,Parser,UncommittedInfer,UncommittedStr,CommittedInfer,StatefulInfer};
blam!   |                                ^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! warning: unused import: `Done`, #[warn(unused_imports)] on by default
blam!  --> <anon>:4:37
blam!   |
blam! 4 | use parsell::ParseResult::{Continue,Done};
blam!   |                                     ^^^^
blam! 
blam! warning: unused variable: `stateful`, #[warn(unused_variables)] on by default
blam!  --> <anon>:7:13
blam!   |
blam! 7 |    Continue(stateful) => (),
blam!   |             ^^^^^^^^
blam! 
blam! test Stateful_0 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:35
blam!   |
blam! 3 | use parsell::{character,CHARACTER,UncommittedInfer,UncommittedStr,Parser,CommittedInfer,StatefulInfer};
blam!   |                                   ^^^^^^^^^^^^^^^^                       ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! warning: variable `DIGIT` should have a snake case name such as `digit`, #[warn(non_snake_case)] on by default
blam!  --> <anon>:6:5
blam!   |
blam! 6 | let DIGIT = character(char::is_numeric).map(Ok).or_else(CHARACTER.map(mk_err));
blam!   |     ^^^^^
blam! 
blam! warning: variable `TWO_DIGITS` should have a snake case name such as `two_digits`, #[warn(non_snake_case)] on by default
blam!  --> <anon>:7:5
blam!   |
blam! 7 | let TWO_DIGITS = DIGIT.try_and_then_try(DIGIT);
blam!   |     ^^^^^^^^^^
blam! 
blam! test Stateful_1 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:32
blam!   |
blam! 3 | use parsell::{character,Parser,UncommittedInfer,UncommittedStr,CommittedInfer,StatefulInfer,StatefulStr};
blam!   |                                ^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! test UncommittedStr::init_str_0 ... ok
blam! warning: unused imports: `CommittedInfer`, `StatefulInfer`, `UncommittedInfer`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:42
blam!   |
blam! 3 | use parsell::{character,CHARACTER,Parser,UncommittedInfer,UncommittedStr,CommittedInfer,StatefulInfer};
blam!   |                                          ^^^^^^^^^^^^^^^^                ^^^^^^^^^^^^^^ ^^^^^^^^^^^^^
blam! 
blam! test Uncommitted_0 ... ok
blam! 
blam! test result: ok. 18 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f fb913c15359161152a8f93656d9cf376ecd50c9ff14eee66408126a4a5417e1b`
blam! fb913c15359161152a8f93656d9cf376ecd50c9ff14eee66408126a4a5417e1b
