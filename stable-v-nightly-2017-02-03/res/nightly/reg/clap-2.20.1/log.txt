boom! testing clap-2.20.1 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 5d7c61793be9896bd51ed3a3ed9cb2203dec82cc2c5f297f5d8e73db9d62f922
boom! running `docker start -a 5d7c61793be9896bd51ed3a3ed9cb2203dec82cc2c5f297f5d8e73db9d62f922`
kablam!    Compiling bitflags v0.7.0
kablam!    Compiling strsim v0.6.0
kablam!    Compiling unicode-width v0.1.4
kablam!    Compiling term_size v0.2.2
kablam!    Compiling ansi_term v0.9.0
kablam!    Compiling vec_map v0.6.0
kablam!    Compiling unicode-segmentation v1.0.1
kablam!    Compiling clap v2.20.1 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 27.7 secs
boom! running `docker rm -f 5d7c61793be9896bd51ed3a3ed9cb2203dec82cc2c5f297f5d8e73db9d62f922`
blam! 5d7c61793be9896bd51ed3a3ed9cb2203dec82cc2c5f297f5d8e73db9d62f922
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! 3828e7178f15e462118dab662e11877ab12576f84397f04b8a871a0000f07d6f
boom! running `docker start -a 3828e7178f15e462118dab662e11877ab12576f84397f04b8a871a0000f07d6f`
kablam!    Compiling clap v2.20.1 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 38.14 secs
boom! running `docker rm -f 3828e7178f15e462118dab662e11877ab12576f84397f04b8a871a0000f07d6f`
blam! 3828e7178f15e462118dab662e11877ab12576f84397f04b8a871a0000f07d6f
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! e4251e5ff271a9589c96728e7a960a422e775228349dbe5d14f25a7527afdc6d
boom! running `docker start -a e4251e5ff271a9589c96728e7a960a422e775228349dbe5d14f25a7527afdc6d`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/clap-824667a9cf538e62
blam! 
blam! running 82 tests
blam! test args::arg_builder::flag::test::flagbuilder_display_multiple_aliases ... ok
blam! test args::arg_builder::flag::test::flagbuilder_display ... ok
blam! test args::arg_builder::option::test::optbuilder_display1 ... ok
blam! test app::help::test::wrap_help_last_word ... ok
blam! test app::settings::test::app_settings_fromstr ... ok
blam! test args::arg_builder::option::test::optbuilder_display2 ... ok
blam! test args::arg_builder::option::test::optbuilder_display_multiple_aliases ... ok
blam! test args::arg_builder::flag::test::flagbuilder_display_single_alias ... ok
blam! test args::arg_builder::option::test::optbuilder_display3 ... ok
blam! test args::arg_builder::positional::test::display_val_names ... ok
blam! test args::arg_builder::positional::test::display_required ... ok
blam! test args::group::test::groups ... ok
blam! test args::arg_builder::option::test::optbuilder_display_single_alias ... ok
blam! test args::group::test::test_debug ... ok
blam! test args::arg_builder::positional::test::display_val_names_req ... ok
blam! test fmt::test::colored_output ... ok
blam! test args::settings::test::arg_settings_fromstr ... ok
blam! test usage_parser::test::create_option_usage0 ... ok
blam! test usage_parser::test::create_flag_usage ... ok
blam! test usage_parser::test::create_option_usage1 ... ok
blam! test usage_parser::test::create_option_usage2 ... ok
blam! test usage_parser::test::create_option_usage3 ... ok
blam! test usage_parser::test::create_option_usage4 ... ok
blam! test usage_parser::test::create_option_usage5 ... ok
blam! test usage_parser::test::create_option_usage6 ... ok
blam! test usage_parser::test::create_option_usage7 ... ok
blam! test usage_parser::test::create_option_usage8 ... ok
blam! test usage_parser::test::create_option_usage9 ... ok
blam! test usage_parser::test::create_option_usage_both1 ... ok
blam! test usage_parser::test::create_option_usage_both2 ... ok
blam! test usage_parser::test::create_option_usage_both3 ... ok
blam! test usage_parser::test::create_option_usage_both4 ... ok
blam! test usage_parser::test::create_option_usage_both5 ... ok
blam! test usage_parser::test::create_option_usage_both6 ... ok
blam! test usage_parser::test::create_option_usage_both7 ... ok
blam! test usage_parser::test::create_option_usage_both8 ... ok
blam! test usage_parser::test::create_option_usage_both_equals1 ... ok
blam! test usage_parser::test::create_option_usage_both_equals2 ... ok
blam! test usage_parser::test::create_option_usage_both_equals3 ... ok
blam! test usage_parser::test::create_option_usage_both_equals4 ... ok
blam! test usage_parser::test::create_option_usage_both_equals5 ... ok
blam! test usage_parser::test::create_option_usage_both_equals6 ... ok
blam! test usage_parser::test::create_option_usage_both_equals7 ... ok
blam! test usage_parser::test::create_option_usage_both_equals8 ... ok
blam! test usage_parser::test::create_option_usage_long1 ... ok
blam! test usage_parser::test::create_option_usage_long10 ... ok
blam! test usage_parser::test::create_option_usage_long2 ... ok
blam! test usage_parser::test::create_option_usage_long3 ... ok
blam! test usage_parser::test::create_option_usage_long4 ... ok
blam! test usage_parser::test::create_option_usage_long5 ... ok
blam! test usage_parser::test::create_option_usage_long6 ... ok
blam! test usage_parser::test::create_option_usage_long7 ... ok
blam! test usage_parser::test::create_option_usage_long8 ... ok
blam! test usage_parser::test::create_option_usage_long9 ... ok
blam! test usage_parser::test::create_option_usage_long_equals1 ... ok
blam! test usage_parser::test::create_option_usage_long_equals10 ... ok
blam! test usage_parser::test::create_option_usage_long_equals2 ... ok
blam! test usage_parser::test::create_option_usage_long_equals3 ... ok
blam! test usage_parser::test::create_option_usage_long_equals4 ... ok
blam! test usage_parser::test::create_option_usage_long_equals5 ... ok
blam! test usage_parser::test::create_option_usage_long_equals6 ... ok
blam! test usage_parser::test::create_option_usage_long_equals7 ... ok
blam! test usage_parser::test::create_option_usage_long_equals8 ... ok
blam! test usage_parser::test::create_option_usage_long_equals9 ... ok
blam! test usage_parser::test::create_option_with_vals1 ... ok
blam! test usage_parser::test::create_option_with_vals2 ... ok
blam! test usage_parser::test::create_option_with_vals3 ... ok
blam! test args::group::test::test_from ... ok
blam! test args::arg_builder::positional::test::display_mult ... ok
blam! test usage_parser::test::create_option_with_vals4 ... ok
blam! test usage_parser::test::create_positional_usage0 ... ok
blam! test usage_parser::test::create_positional_usage ... ok
blam! test usage_parser::test::create_option_with_vals5 ... ok
blam! test usage_parser::test::pos_help_double_lit_single_quote ... ok
blam! test usage_parser::test::nonascii ... ok
blam! test usage_parser::test::pos_help_lit_single_quote ... ok
blam! test usage_parser::test::pos_mult ... ok
blam! test usage_parser::test::pos_help_newline ... ok
blam! test usage_parser::test::pos_req ... ok
blam! test usage_parser::test::pos_help_newline_lit_sq ... ok
blam! test usage_parser::test::pos_mult_help ... ok
blam! test usage_parser::test::pos_req_mult_help ... ok
blam! 
blam! test result: ok. 82 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests clap
blam! 
blam! running 254 tests
blam! test _2 ... ignored
blam! warning: unused variable: `matches`, #[warn(unused_variables)] on by default
blam!  --> <anon>:5:9
blam!   |
blam! 5 |     let matches = clap_app!(myapp =>
blam!   |         ^^^^^^^
blam! 
blam! test _3 ... ok
blam! test _4 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:6:12
blam!   |
blam! 6 | use clap::{Arg, App, SubCommand};
blam!   |            ^^^
blam! 
blam! warning: unused variable: `matches`, #[warn(unused_variables)] on by default
blam!  --> <anon>:9:9
blam!   |
blam! 9 |     let matches = App::new("myapp")
blam!   |         ^^^^^^^
blam! 
blam! test _1 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::about_0 ... ok
blam! test app::App<'a, 'b>::after_help_0 ... ok
blam! test _0 ... ok
blam! test app::App<'a, 'b>::arg_0 ... ok
blam! test _clap_count_exprs_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::alias_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::arg_from_usage_0 ... ok
blam! test app::App<'a, 'b>::args_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::args_from_usage_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::author_0 ... ok
blam! test app::App<'a, 'b>::before_help_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::bin_name_0 ... ok
blam! test app::App<'a, 'b>::gen_completions_1 ... ignored
blam! test app::App<'a, 'b>::gen_completions_2 ... ignored
blam! test app::App<'a, 'b>::gen_completions_to_0 ... ignored
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `matches`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let matches = App::new("myprog")
blam!   |     ^^^^^^^
blam! 
blam! test app::App<'a, 'b>::get_matches_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `matches`, #[warn(unused_variables)] on by default
blam!  --> <anon>:6:5
blam!   |
blam! 6 | let matches = App::new("myprog")
blam!   |     ^^^^^^^
blam! 
blam! test app::App<'a, 'b>::get_matches_from_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `matches`, #[warn(unused_variables)] on by default
blam!  --> <anon>:6:5
blam!   |
blam! 6 | let matches = App::new("myprog")
blam!   |     ^^^^^^^
blam! 
blam! test app::App<'a, 'b>::get_matches_from_safe_0 ... ok
blam! warning: function is never used: `build_cli`, #[warn(dead_code)] on by default
blam!   --> <anon>:7:1
blam!    |
blam! 7  | pub fn build_cli() -> App<'static, 'static> {
blam!    | ^
blam! 
blam! test app::App<'a, 'b>::gen_completions_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `matches`, #[warn(unused_variables)] on by default
blam!  --> <anon>:8:5
blam!   |
blam! 8 | let matches = app.get_matches_from_safe_borrow(arg_vec)
blam!   |     ^^^^^^^
blam! 
blam! test app::App<'a, 'b>::get_matches_from_safe_borrow_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `matches`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let matches = App::new("myprog")
blam!   |     ^^^^^^^
blam! 
blam! test app::App<'a, 'b>::get_matches_safe_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::global_setting_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::global_settings_0 ... ok
blam! test app::App<'a, 'b>::group_0 ... ok
blam! test app::App<'a, 'b>::groups_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::help_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::help_short_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `prog`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let prog = App::new("My Program")
blam!   |     ^^^^
blam! 
blam! test app::App<'a, 'b>::new_0 ... ok
blam! test app::App<'a, 'b>::max_term_width_0 ... ok
blam! test app::App<'a, 'b>::set_term_width_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::setting_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::settings_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::subcommand_0 ... ok
blam! test app::App<'a, 'b>::aliases_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::template_0 ... ok
blam! test app::App<'a, 'b>::unset_setting_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = App::new("cust-ord")
blam!   |     ^
blam! 
blam! test app::App<'a, 'b>::display_order_0 ... ok
blam! test app::App<'a, 'b>::unset_settings_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::usage_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::version_0 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!  --> <anon>:5:1
blam!   |
blam! 5 | app.print_help();
blam!   | ^^^^^^^^^^^^^^^^^
blam! 
blam! test app::App<'a, 'b>::print_help_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::version_short_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `prog`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let prog = App::with_defaults("My Program")
blam!   |     ^^^^
blam! 
blam! warning: use of deprecated item: Can never work; use explicit App::author() and App::version() calls instead, #[warn(deprecated)] on by default
blam!  --> <anon>:4:12
blam!   |
blam! 4 | let prog = App::with_defaults("My Program")
blam!   |            ^^^^^^^^^^^^^^^^^^
blam! 
blam! test app::App<'a, 'b>::with_defaults_0 ... ok
blam! test app::App<'a, 'b>::subcommands_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::visible_alias_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! test app::App<'a, 'b>::visible_aliases_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = App::new("My Program")
blam!   |     ^
blam! 
blam! test app::App_0 ... ok
blam! warning: variable does not need to be mutable, #[warn(unused_mut)] on by default
blam!  --> <anon>:5:5
blam!   |
blam! 5 | let mut app = App::new("myprog");
blam!   |     ^^^^^^^
blam! 
blam! test app::App<'a, 'b>::write_help_0 ... ok
blam! warning: variable does not need to be mutable, #[warn(unused_mut)] on by default
blam!  --> <anon>:5:5
blam!   |
blam! 5 | let mut app = App::new("myprog");
blam!   |     ^^^^^^^
blam! 
blam! test app::App<'a, 'b>::write_version_0 ... ok
blam! test app::settings::AppSettings::AllowExternalSubcommands_0 ... ok
blam! warning: unused import: `AppSettings`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, AppSettings};
blam!   |                 ^^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::AllowInvalidUtf8_0 ... ok
blam! test app::settings::AppSettings::AllowLeadingHyphen_0 ... ok
blam! test app::settings::AppSettings::ArgRequiredElseHelp_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::ColorAlways_0 ... ok
blam! test app::settings::AppSettings::AllowMissingPositional_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::ColorAuto_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::ColorNever_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::ColoredHelp_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::DeriveDisplayOrder_0 ... ok
blam! test app::settings::AppSettings::ArgsNegateSubcommands_0 ... ok
blam! test app::settings::AppSettings::AllowNegativeNumbers_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::DontCollapseArgsInUsage_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::DontDelimitTrailingValues_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^
blam! 
blam! test app::settings::AppSettings::GlobalVersion_0 ... ok
blam! test app::settings::AppSettings::DisableHelpSubcommand_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::NextLineHelp_0 ... ok
blam! test app::settings::AppSettings::DisableVersion_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings, SubCommand};
blam!   |                 ^^^
blam! 
blam! test app::settings::AppSettings::Hidden_0 ... ok
blam! test app::settings::AppSettings::DisableVersion_1 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings};
blam!   |                 ^^^
blam! 
blam! test app::settings::AppSettings::SubcommandRequiredElseHelp_0 ... ok
blam! test app::settings::AppSettings::NoBinaryName_0 ... ok
blam! test app::settings::AppSettings::StrictUtf8_0 ... ok
blam! test app::settings::AppSettings::PropagateGlobalValuesDown_0 ... ok
blam! test app::settings::AppSettings::SubcommandRequired_0 ... ok
blam! warning: unused imports: `Arg`, `SubCommand`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand, AppSettings};
blam!   |                 ^^^  ^^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::UnifiedHelpMessage_0 ... ok
blam! test app::settings::AppSettings::SubcommandsNegateReqs_0 ... ok
blam! warning: unused import: `ErrorKind`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:47
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings, SubCommand, ErrorKind};
blam!   |                                               ^^^^^^^^^
blam! 
blam! test app::settings::AppSettings::SubcommandsNegateReqs_1 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = app_from_crate!().get_matches();
blam!   |     ^
blam! 
blam! test app_from_crate_0 ... ok
blam! test app::settings::AppSettings::TrailingVarArg_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `f`, #[warn(unused_variables)] on by default
blam!   --> <anon>:18:9
blam!    |
blam! 18 |     let f = value_t!(m, "foo", Foo).unwrap_or_else(|e| e.exit());
blam!    |         ^
blam! 
blam! test arg_enum_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, AppSettings};
blam!   |                 ^^^
blam! 
blam! test app::settings::AppSettings::WaitOnError_0 ... ok
blam! test app::settings::AppSettings::VersionlessSubcommands_0 ... ok
blam! test args::arg::Arg<'a, 'b>::allow_hyphen_values_0 ... ok
blam! test args::arg::Arg<'a, 'b>::alias_0 ... ok
blam! test args::arg::Arg<'a, 'b>::aliases_0 ... ok
blam! test args::arg::Arg<'a, 'b>::conflicts_with_0 ... ok
blam! test args::arg::Arg<'a, 'b>::allow_hyphen_values_2 ... ok
blam! test args::arg::Arg<'a, 'b>::allow_hyphen_values_1 ... ok
blam! test args::arg::Arg<'a, 'b>::conflicts_with_all_0 ... ok
blam! test args::arg::Arg<'a, 'b>::conflicts_with_1 ... ok
blam! test args::arg::Arg<'a, 'b>::conflicts_with_all_1 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_0 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_1 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_if_0 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_if_1 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_if_3 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_if_2 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_ifs_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::empty_values_0 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_ifs_1 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = App::new("cust-ord")
blam!   |     ^
blam! 
blam! test args::arg::Arg<'a, 'b>::display_order_0 ... ok
blam! test args::arg::Arg<'a, 'b>::default_value_ifs_2 ... ok
blam! test args::arg::Arg<'a, 'b>::from_usage_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::global_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::group_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::groups_0 ... ok
blam! test args::arg::Arg<'a, 'b>::empty_values_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::help_0 ... ok
blam! test args::arg::Arg<'a, 'b>::global_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::hidden_0 ... ok
blam! test args::arg::Arg<'a, 'b>::group_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::hide_possible_values_0 ... ok
blam! test args::arg::Arg<'a, 'b>::groups_1 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = App::new("hide_posvals")
blam!   |     ^
blam! 
blam! test args::arg::Arg<'a, 'b>::hide_possible_values_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::index_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = App::new("helptest")
blam!   |     ^
blam! 
blam! test args::arg::Arg<'a, 'b>::help_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::long_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = App::new("helptest")
blam!   |     ^
blam! 
blam! test args::arg::Arg<'a, 'b>::hidden_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::max_values_0 ... ok
blam! test args::arg::Arg<'a, 'b>::index_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::min_values_0 ... ok
blam! test args::arg::Arg<'a, 'b>::long_1 ... ok
blam! test args::arg::Arg<'a, 'b>::max_values_1 ... ok
blam! test args::arg::Arg<'a, 'b>::max_values_2 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::multiple_0 ... ok
blam! test args::arg::Arg<'a, 'b>::min_values_2 ... ok
blam! test args::arg::Arg<'a, 'b>::min_values_1 ... ok
blam! test args::arg::Arg<'a, 'b>::multiple_1 ... ok
blam! test args::arg::Arg<'a, 'b>::multiple_2 ... ok
blam! test args::arg::Arg<'a, 'b>::multiple_3 ... ok
blam! test args::arg::Arg<'a, 'b>::multiple_4 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::number_of_values_0 ... ok
blam! test args::arg::Arg<'a, 'b>::multiple_5 ... ok
blam! test args::arg::Arg<'a, 'b>::multiple_6 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let m = App::new("nlh")
blam!   |     ^
blam! 
blam! test args::arg::Arg<'a, 'b>::next_line_help_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::possible_value_0 ... ok
blam! test args::arg::Arg<'a, 'b>::number_of_values_1 ... ok
blam! test args::arg::Arg<'a, 'b>::overrides_with_0 ... ok
blam! test args::arg::Arg<'a, 'b>::overrides_with_all_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::possible_values_0 ... ok
blam! test args::arg::Arg<'a, 'b>::possible_value_1 ... ok
blam! test args::arg::Arg<'a, 'b>::possible_value_2 ... ok
blam! test args::arg::Arg<'a, 'b>::possible_values_1 ... ok
blam! test args::arg::Arg<'a, 'b>::possible_values_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_0 ... ok
blam! test args::arg::Arg<'a, 'b>::require_delimiter_0 ... ok
blam! test args::arg::Arg<'a, 'b>::require_delimiter_1 ... ok
blam! test args::arg::Arg<'a, 'b>::required_if_0 ... ok
blam! test args::arg::Arg<'a, 'b>::require_delimiter_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_1 ... ok
blam! test args::arg::Arg<'a, 'b>::required_ifs_0 ... ok
blam! test args::arg::Arg<'a, 'b>::required_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_if_1 ... ok
blam! test args::arg::Arg<'a, 'b>::required_if_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_0 ... ok
blam! test args::arg::Arg<'a, 'b>::required_ifs_1 ... ok
blam! test args::arg::Arg<'a, 'b>::required_ifs_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_all_0 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_1 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_one_0 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_all_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_all_1 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_0 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_one_2 ... ok
blam! test args::arg::Arg<'a, 'b>::required_unless_one_1 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_all_0 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_1 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_if_0 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_2 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_all_1 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_all_2 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_ifs_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::short_0 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_if_1 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_if_2 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::takes_value_0 ... ok
blam! test args::arg::Arg<'a, 'b>::requires_ifs_1 ... ok
blam! test args::arg::Arg<'a, 'b>::short_1 ... ok
blam! test args::arg::Arg<'a, 'b>::takes_value_1 ... ok
blam! test args::arg::Arg<'a, 'b>::use_delimiter_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::value_name_0 ... ok
blam! test args::arg::Arg<'a, 'b>::use_delimiter_1 ... ok
blam! test args::arg::Arg<'a, 'b>::validator_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::value_names_0 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::value_terminator_0 ... ok
blam! test args::arg::Arg<'a, 'b>::value_delimiter_0 ... ok
blam! warning: unused variable: `app`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let app = App::new("valnames")
blam!   |     ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::value_name_1 ... ok
blam! warning: unused variable: `app`, #[warn(unused_variables)] on by default
blam!  --> <anon>:4:5
blam!   |
blam! 4 | let app = App::new("valnames")
blam!   |     ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::value_names_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, Arg};
blam!   |            ^^^
blam! 
blam! test args::arg::Arg<'a, 'b>::with_name_0 ... ok
blam! test args::arg::Arg<'a, 'b>::value_terminator_1 ... ok
blam! warning: unused variable: `cfg`, #[warn(unused_variables)] on by default
blam!  --> <anon>:5:5
blam!   |
blam! 5 | let cfg = Arg::with_name("config")
blam!   |     ^^^
blam! 
blam! warning: unused variable: `input`, #[warn(unused_variables)] on by default
blam!   --> <anon>:12:5
blam!    |
blam! 12 | let input = Arg::from_usage("-i, --input=[FILE] 'Provides an input file to the program'");
blam!    |     ^^^^^
blam! 
blam! test args::arg::Arg_0 ... ok
blam! test args::arg::Arg<'a, 'b>::visible_alias_0 ... ok
blam! test args::arg::Arg<'a, 'b>::visible_aliases_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! warning: unused variable: `sub_m`, #[warn(unused_variables)] on by default
blam!   --> <anon>:11:21
blam!    |
blam! 11 |     ("clone",  Some(sub_m)) => {}, // clone was used
blam!    |                     ^^^^^
blam! 
blam! warning: unused variable: `sub_m`, #[warn(unused_variables)] on by default
blam!   --> <anon>:12:21
blam!    |
blam! 12 |     ("push",   Some(sub_m)) => {}, // push was used
blam!    |                     ^^^^^
blam! 
blam! warning: unused variable: `sub_m`, #[warn(unused_variables)] on by default
blam!   --> <anon>:13:21
blam!    |
blam! 13 |     ("commit", Some(sub_m)) => {}, // commit was used
blam!    |                     ^^^^^
blam! 
blam! test args::arg_matches::ArgMatches<'a>::subcommand_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::is_present_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::occurrences_of_1 ... ok
blam! test args::arg_matches::ArgMatches<'a>::occurrences_of_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! test args::arg_matches::ArgMatches<'a>::subcommand_name_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! test args::arg_matches::ArgMatches<'a>::usage_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::subcommand_1 ... ok
blam! test args::arg_matches::ArgMatches<'a>::subcommand_matches_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::value_of_0 ... ok
blam! warning: unused import: `OsStrExt`, #[warn(unused_imports)] on by default
blam!  --> <anon>:5:26
blam!   |
blam! 5 | use std::os::unix::ffi::{OsStrExt,OsStringExt};
blam!   |                          ^^^^^^^^
blam! 
blam! test args::arg_matches::ArgMatches<'a>::value_of_lossy_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::value_of_os_0 ... ok
blam! test args::arg_matches::ArgMatches_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::values_of_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::values_of_lossy_0 ... ok
blam! test args::arg_matches::ArgMatches<'a>::values_of_os_0 ... ok
blam! test args::arg_matches::OsValues_0 ... ok
blam! test args::arg_matches::Values_0 ... ok
blam! test args::group::ArgGroup<'a>::arg_0 ... ok
blam! test args::group::ArgGroup<'a>::args_0 ... ok
blam! test args::group::ArgGroup<'a>::conflicts_with_0 ... ok
blam! test args::group::ArgGroup<'a>::conflicts_with_all_0 ... ok
blam! test args::group::ArgGroup<'a>::multiple_0 ... ok
blam! test args::group::ArgGroup<'a>::multiple_1 ... ok
blam! warning: unused import: `App`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:12
blam!   |
blam! 3 | use clap::{App, ArgGroup};
blam!   |            ^^^
blam! 
blam! test args::group::ArgGroup<'a>::with_name_0 ... ok
blam! test args::group::ArgGroup<'a>::required_0 ... ok
blam! test args::group::ArgGroup<'a>::requires_0 ... ok
blam! test args::group::ArgGroup<'a>::requires_all_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, SubCommand};
blam!   |                 ^^^
blam! 
blam! test args::subcommand::SubCommand<'a>::with_name_0 ... ok
blam! test args::group::ArgGroup_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:5:5
blam!   |
blam! 5 | let m = App::new("app")
blam!   |     ^
blam! 
blam! test crate_description_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:5:5
blam!   |
blam! 5 | let m = App::new("app")
blam!   |     ^
blam! 
blam! test crate_authors_0 ... ok
blam! test args::subcommand::SubCommand_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:5:5
blam!   |
blam! 5 | let m = App::new(crate_name!())
blam!   |     ^
blam! 
blam! test crate_name_0 ... ok
blam! warning: unused variable: `m`, #[warn(unused_variables)] on by default
blam!  --> <anon>:5:5
blam!   |
blam! 5 | let m = App::new("app")
blam!   |     ^
blam! 
blam! test crate_version_0 ... ok
blam! test args::group::ArgGroup_1 ... ok
blam! test errors::ErrorKind::ArgumentConflict_0 ... ok
blam! test errors::ErrorKind::EmptyValue_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, ErrorKind};
blam!   |                 ^^^
blam! 
blam! test errors::ErrorKind::HelpDisplayed_0 ... ok
blam! test errors::ErrorKind::InvalidSubcommand_0 ... ok
blam! test errors::ErrorKind::InvalidUtf8_0 ... ok
blam! test errors::ErrorKind::MissingArgumentOrSubcommand_0 ... ok
blam! test errors::ErrorKind::InvalidValue_0 ... ok
blam! test errors::ErrorKind::MissingRequiredArgument_0 ... ok
blam! test errors::ErrorKind::MissingSubcommand_0 ... ok
blam! test errors::ErrorKind::TooManyValues_0 ... ok
blam! test errors::ErrorKind::TooFewValues_0 ... ok
blam! test errors::ErrorKind::UnexpectedMultipleUsage_0 ... ok
blam! test errors::ErrorKind::UnrecognizedSubcommand_0 ... ok
blam! test errors::ErrorKind::ValueValidation_0 ... ok
blam! test errors::ErrorKind::UnknownArgument_0 ... ok
blam! warning: unused variable: `also_len`, #[warn(unused_variables)] on by default
blam!   --> <anon>:10:5
blam!    |
blam! 10 | let also_len = value_t!(matches, "length", u32).unwrap_or_else(|e| e.exit());
blam!    |     ^^^^^^^^
blam! 
blam! test value_t_0 ... ok
blam! warning: unused import: `Arg`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:17
blam!   |
blam! 3 | use clap::{App, Arg, ErrorKind};
blam!   |                 ^^^
blam! 
blam! test errors::ErrorKind::VersionDisplayed_0 ... ok
blam! warning: unused variable: `also_len`, #[warn(unused_variables)] on by default
blam!   --> <anon>:10:5
blam!    |
blam! 10 | let also_len = value_t_or_exit!(matches, "length", u32);
blam!    |     ^^^^^^^^
blam! 
blam! test value_t_or_exit_0 ... ok
blam! test values_t_0 ... ok
blam! test values_t_or_exit_0 ... ok
blam! test errors::ErrorKind::WrongNumberOfValues_0 ... ok
blam! 
blam! test result: ok. 250 passed; 0 failed; 4 ignored; 0 measured
blam! 
boom! running `docker rm -f e4251e5ff271a9589c96728e7a960a422e775228349dbe5d14f25a7527afdc6d`
blam! e4251e5ff271a9589c96728e7a960a422e775228349dbe5d14f25a7527afdc6d
