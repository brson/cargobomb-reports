boom! testing error-chain-0.8.1 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 2a6cb3f1d5cb83385693e8741fc1c04f8e4b37711d61647f80814d1f13ef8b29
boom! running `docker start -a 2a6cb3f1d5cb83385693e8741fc1c04f8e4b37711d61647f80814d1f13ef8b29`
kablam!    Compiling error-chain v0.8.1 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 1.36 secs
boom! running `docker rm -f 2a6cb3f1d5cb83385693e8741fc1c04f8e4b37711d61647f80814d1f13ef8b29`
blam! 2a6cb3f1d5cb83385693e8741fc1c04f8e4b37711d61647f80814d1f13ef8b29
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! b03b5a02f8b2062ecf389ca5d634974e2da64a3b82030d026c32dd78245b9151
boom! running `docker start -a b03b5a02f8b2062ecf389ca5d634974e2da64a3b82030d026c32dd78245b9151`
kablam!    Compiling error-chain v0.8.1 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 6.87 secs
boom! running `docker rm -f b03b5a02f8b2062ecf389ca5d634974e2da64a3b82030d026c32dd78245b9151`
blam! b03b5a02f8b2062ecf389ca5d634974e2da64a3b82030d026c32dd78245b9151
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! f823f49f48cb94297f52b58594cfe52f7497dab623f8cd250244276d8ac10132
boom! running `docker start -a f823f49f48cb94297f52b58594cfe52f7497dab623f8cd250244276d8ac10132`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/error_chain-f1074b6ad40b9270
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/quick_main-808f842c15fc8b7f
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/tests-7e5bd67a3fe15029
blam! 
blam! running 31 tests
blam! test bail ... ok
blam! test chain_err ... ok
blam! test error_patterns ... ok
blam! test error_first ... ok
blam! test empty ... ok
blam! test documentation ... ok
blam! test foreign_link_test::iterates ... ok
blam! test links ... ok
blam! test order_test_1 ... ok
blam! test order_test_2 ... ok
blam! test order_test_3 ... ok
blam! test order_test_4 ... ok
blam! test order_test_5 ... ok
blam! test order_test_6 ... ok
blam! test order_test_7 ... ok
blam! test order_test_8 ... ok
blam! test rustup_regression ... ok
blam! test smoke_test_1 ... ok
blam! test smoke_test_2 ... ok
blam! test smoke_test_3 ... ok
blam! test smoke_test_4 ... ok
blam! test smoke_test_5 ... ok
blam! test smoke_test_6 ... ok
blam! test smoke_test_7 ... ok
blam! test smoke_test_8 ... ok
blam! test foreign_link_test::display_underlying_error ... ok
blam! test types_declarations ... ok
blam! test foreign_link_test::finds_cause ... ok
blam! test with_result ... ok
blam! test without_result ... ok
blam! test has_backtrace_depending_on_env ... ok
blam! 
blam! test result: ok. 31 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests error-chain
blam! 
blam! running 15 tests
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!  --> <anon>:7:1
blam!   |
blam! 7 |   fn foo() -> Result<()> {
blam!   |  _^ starting here...
blam! 8 | |     Err(ErrorKind::FooError.into())
blam! 9 | | }
blam!   | |_^ ...ending here
blam! 
blam! test _2 ... ok
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!  --> <anon>:4:1
blam!   |
blam! 4 |   fn foo() -> Result<()> {
blam!   |  _^ starting here...
blam! 5 | |     Err("foo error!".into())
blam! 6 | | }
blam!   | |_^ ...ending here
blam! 
blam! test _1 ... ok
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!  --> <anon>:4:1
blam!   |
blam! 4 |   fn foo() -> Result<()> {
blam!   |  _^ starting here...
blam! 5 | |     Ok(try!(Err(ErrorKind::FooError)))
blam! 6 | | }
blam!   | |_^ ...ending here
blam! 
blam! warning: function is never used: `bar`, #[warn(dead_code)] on by default
blam!   --> <anon>:8:1
blam!    |
blam! 8  |   fn bar() -> Result<()> {
blam!    |  _^ starting here...
blam! 9  | |     Ok(try!(Err("bogus!")))
blam! 10 | | }
blam!    | |_^ ...ending here
blam! 
blam! test _3 ... ok
blam! test _0 ... ok
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!  --> <anon>:4:1
blam!   |
blam! 4 |   fn foo() -> Result<()> {
blam!   |  _^ starting here...
blam! 5 | |     bail!(ErrorKind::FooError);
blam! 6 | |
blam! 7 | |     Ok(())
blam! 8 | | }
blam!   | |_^ ...ending here
blam! 
blam! warning: unreachable expression, #[warn(unreachable_code)] on by default
blam!  --> <anon>:7:5
blam!   |
blam! 7 |     Ok(())
blam!   |     ^^^^^^
blam! 
blam! warning: function is never used: `bar`, #[warn(dead_code)] on by default
blam!   --> <anon>:10:1
blam!    |
blam! 10 |   fn bar() -> Result<()> {
blam!    |  _^ starting here...
blam! 11 | |     bail!("bogus!");
blam! 12 | |
blam! 13 | |     Ok(())
blam! 14 | | }
blam!    | |_^ ...ending here
blam! 
blam! warning: unreachable expression, #[warn(unreachable_code)] on by default
blam!   --> <anon>:13:5
blam!    |
blam! 13 |     Ok(())
blam!    |     ^^^^^^
blam! 
blam! test _4 ... ok
blam! warning: function is never used: `do_something`, #[warn(dead_code)] on by default
blam!  --> <anon>:4:1
blam!   |
blam! 4 | fn do_something() -> Result<()> { unimplemented!() }
blam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: function is never used: `test`, #[warn(dead_code)] on by default
blam!  --> <anon>:5:1
blam!   |
blam! 5 |   fn test() -> Result<()> {
blam!   |  _^ starting here...
blam! 6 | | let res: Result<()> = do_something().chain_err(|| "something went wrong");
blam! 7 | | Ok(())
blam! 8 | | }
blam!   | |_^ ...ending here
blam! 
blam! warning: unused variable: `res`, #[warn(unused_variables)] on by default
blam!  --> <anon>:6:5
blam!   |
blam! 6 | let res: Result<()> = do_something().chain_err(|| "something went wrong");
blam!   |     ^^^
blam! 
blam! warning: variant is never used: `InvalidToolchainName`, #[warn(dead_code)] on by default
blam!    --> <anon>:5:9
blam!     |
blam! 5   |         InvalidToolchainName(t: String) {
blam!     |         ^
blam! 
blam! test _5 ... ok
blam! test _6 ... ok
blam! warning: variant is never used: `BadStuff`, #[warn(dead_code)] on by default
blam!  --> <anon>:5:13
blam!   |
blam! 5 |             BadStuff {
blam!   |             ^^^^^^^^
blam! 
blam! test _7 ... ok
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!  --> <anon>:4:1
blam!   |
blam! 4 |   fn foo() -> Result<()> {
blam!   |  _^ starting here...
blam! 5 | | let expr = "";
blam! 6 | |     return Err(expr.into());
blam! 7 | | }
blam!   | |_^ ...ending here
blam! 
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!  --> <anon>:4:1
blam!   |
blam! 4 |   fn foo() -> Result<()> {
blam!   |  _^ starting here...
blam! 5 | | let n = 0;
blam! 6 | | bail!("bad number: {}", n);
blam! 7 | | }
blam!   | |_^ ...ending here
blam! 
blam! test bail_0 ... ok
blam! test quick_main_0 ... ignored
blam! test bail_1 ... ok
blam! test quick_main_1 ... ignored
blam! test quick_main_2 ... ignored
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!   --> <anon>:7:1
blam!    |
blam! 7  |   fn foo() -> Result<()> {
blam!    |  _^ starting here...
blam! 8  | |     if bad_condition() {
blam! 9  | |         bail!(ErrorKind::FooError);
blam! 10 | |     }
blam! 11 | |
blam! 12 | |     Ok(())
blam! 13 | | }
blam!    | |_^ ...ending here
blam! 
blam! warning: function is never used: `bad_condition`, #[warn(dead_code)] on by default
blam!   --> <anon>:15:1
blam!    |
blam! 15 | fn bad_condition() -> bool { true }
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test bail_2 ... ok
blam! warning: function is never used: `foo`, #[warn(dead_code)] on by default
blam!   --> <anon>:5:1
blam!    |
blam! 5  |   fn foo() -> Result<()> {
blam!    |  _^ starting here...
blam! 6  | |     if let Some(bad_num) = bad_condition() {
blam! 7  | |         bail!("so bad: {}", bad_num);
blam! 8  | |     }
blam! 9  | |
blam! 10 | |     Ok(())
blam! 11 | | }
blam!    | |_^ ...ending here
blam! 
blam! warning: function is never used: `bad_condition`, #[warn(dead_code)] on by default
blam!   --> <anon>:13:1
blam!    |
blam! 13 | fn bad_condition() -> Option<i8> { None }
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test bail_3 ... ok
blam! 
blam! test result: ok. 12 passed; 0 failed; 3 ignored; 0 measured
blam! 
boom! running `docker rm -f f823f49f48cb94297f52b58594cfe52f7497dab623f8cd250244276d8ac10132`
blam! f823f49f48cb94297f52b58594cfe52f7497dab623f8cd250244276d8ac10132
