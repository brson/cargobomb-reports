boom! testing rift-0.5.1 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! bc5fab207e7fd057c743b904ae76db5361fe5da1f6e5942ad87194cc7ec8116e
boom! running `docker start -a bc5fab207e7fd057c743b904ae76db5361fe5da1f6e5942ad87194cc7ec8116e`
kablam!    Compiling integer-encoding v1.0.3
kablam!    Compiling rift v0.5.1 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 4.47 secs
boom! running `docker rm -f bc5fab207e7fd057c743b904ae76db5361fe5da1f6e5942ad87194cc7ec8116e`
blam! bc5fab207e7fd057c743b904ae76db5361fe5da1f6e5942ad87194cc7ec8116e
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! ac21e84b072f1c2c0e5dc5988a7bd920e1d4f3aa2589a06988c1cd10c175895c
boom! running `docker start -a ac21e84b072f1c2c0e5dc5988a7bd920e1d4f3aa2589a06988c1cd10c175895c`
kablam!    Compiling rift v0.5.1 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 4.92 secs
boom! running `docker rm -f ac21e84b072f1c2c0e5dc5988a7bd920e1d4f3aa2589a06988c1cd10c175895c`
blam! ac21e84b072f1c2c0e5dc5988a7bd920e1d4f3aa2589a06988c1cd10c175895c
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! 4b12af70f0465d3a73006a1e51cc19203301433f600d5a7932e5637fa65ba377
boom! running `docker start -a 4b12af70f0465d3a73006a1e51cc19203301433f600d5a7932e5637fa65ba377`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/rift-f06bce86fe468a90
blam! 
blam! running 18 tests
blam! test transport::buffered::tests::must_fill_user_buffer_with_only_as_many_bytes_as_available ... ok
blam! test transport::buffered::tests::must_return_zero_if_caller_reads_into_zero_capacity_buffer ... ok
blam! test transport::buffered::tests::must_return_zero_if_nothing_can_be_written ... ok
blam! test transport::buffered::tests::must_return_zero_if_nothing_more_can_be_read ... ok
blam! test transport::buffered::tests::must_return_zero_if_caller_calls_write_with_empty_buffer ... ok
blam! test transport::buffered::tests::must_return_zero_if_read_buffer_is_empty ... ok
blam! test transport::buffered::tests::must_read_successfully ... ok
blam! test transport::buffered::tests::must_return_zero_if_write_buffer_full ... ok
blam! test transport::buffered::tests::must_write_successfully_after_flush ... ok
blam! test transport::framed::tests::foo ... ok
blam! test transport::mem::tests::must_accept_writes_after_buffer_emptied ... ok
blam! test transport::mem::tests::must_accept_multiple_reads_until_all_bytes_read ... ok
blam! test transport::mem::tests::must_allow_readable_bytes_to_be_set_after_read_buffer_emptied ... ok
blam! test transport::mem::tests::must_allow_reads_to_succeed_after_read_buffer_replenished ... ok
blam! test transport::mem::tests::must_empty_read_buffer ... ok
blam! test transport::mem::tests::must_empty_write_buffer ... ok
blam! test transport::mem::tests::must_accept_multiple_writes_until_buffer_is_full ... ok
blam! test transport::buffered::tests::must_only_write_to_inner_transport_on_flush ... ok
blam! 
blam! test result: ok. 18 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests rift
blam! 
blam! running 9 tests
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:10:1
blam!    |
blam! 10 | transport.open("127.0.0.1:9090");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: variable does not need to be mutable, #[warn(unused_mut)] on by default
blam!   --> <anon>:14:5
blam!    |
blam! 14 | let mut i_prot = i_proto_factory.create(transport);
blam!    |     ^^^^^^^^^^
blam! 
blam! warning: unused variable: `i_prot`, #[warn(unused_variables)] on by default
blam!   --> <anon>:14:5
blam!    |
blam! 14 | let mut i_prot = i_proto_factory.create(transport);
blam!    |     ^^^^^^^^^^
blam! 
blam! test protocol::TInputProtocolFactory_0 ... ok
blam! warning: unused import: `TType`, #[warn(unused_imports)] on by default
blam!  --> <anon>:6:60
blam!   |
blam! 6 | use rift::protocol::{TBinaryInputProtocol, TInputProtocol, TType};
blam!   |                                                            ^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:10:1
blam!    |
blam! 10 | transport.open("127.0.0.1:9090");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `field_identifier`, #[warn(unused_variables)] on by default
blam!   --> <anon>:15:5
blam!    |
blam! 15 | let field_identifier = i_prot.read_field_begin().unwrap();
blam!    |     ^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `field_contents`, #[warn(unused_variables)] on by default
blam!   --> <anon>:16:5
blam!    |
blam! 16 | let field_contents = i_prot.read_string().unwrap();
blam!    |     ^^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `field_end`, #[warn(unused_variables)] on by default
blam!   --> <anon>:17:5
blam!    |
blam! 17 | let field_end = i_prot.read_field_end().unwrap();
blam!    |     ^^^^^^^^^
blam! 
blam! test protocol::TInputProtocol_0 ... ok
blam! warning: unused variable: `err`, #[warn(unused_variables)] on by default
blam!   --> <anon>:37:5
blam!    |
blam! 37 | let err: rift::Result<()> = Err(
blam!    |     ^^^
blam! 
blam! test errors::Error_2 ... ok
blam! warning: unused variable: `err0`, #[warn(unused_variables)] on by default
blam!  --> <anon>:6:5
blam!   |
blam! 6 | let err0: rift::Result<()> = Err(
blam!   |     ^^^^
blam! 
blam! warning: unused variable: `err1`, #[warn(unused_variables)] on by default
blam!   --> <anon>:12:5
blam!    |
blam! 12 | let err1: rift::Result<()> = Err(
blam!    |     ^^^^
blam! 
blam! warning: unused variable: `err0`, #[warn(unused_variables)] on by default
blam!  --> <anon>:6:5
blam!   |
blam! 6 | let err0: rift::Result<()> = Err(
blam!   |     ^^^^
blam! 
blam! warning: unused variable: `err1`, #[warn(unused_variables)] on by default
blam!   --> <anon>:15:5
blam!    |
blam! 15 | let err1: rift::Result<()> = Err(
blam!    |     ^^^^
blam! 
blam! warning: unused variable: `err2`, #[warn(unused_variables)] on by default
blam!   --> <anon>:24:5
blam!    |
blam! 24 | let err2: rift::Result<()> = Err(
blam!    |     ^^^^
blam! 
blam! test errors::Error_1 ... ok
blam! test errors::Error_0 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:10:1
blam!    |
blam! 10 | transport.open("127.0.0.1:9090");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: variable does not need to be mutable, #[warn(unused_mut)] on by default
blam!   --> <anon>:14:5
blam!    |
blam! 14 | let mut o_prot = o_proto_factory.create(transport);
blam!    |     ^^^^^^^^^^
blam! 
blam! warning: unused variable: `o_prot`, #[warn(unused_variables)] on by default
blam!   --> <anon>:14:5
blam!    |
blam! 14 | let mut o_prot = o_proto_factory.create(transport);
blam!    |     ^^^^^^^^^^
blam! 
blam! test protocol::TOutputProtocolFactory_0 ... ok
blam! warning: unused import: `TType`, #[warn(unused_imports)] on by default
blam!  --> <anon>:6:60
blam!   |
blam! 6 | use rift::protocol::{TBinaryInputProtocol, TInputProtocol, TType};
blam!   |                                                            ^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:10:1
blam!    |
blam! 10 | transport.open("127.0.0.1:9090");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `field_identifier`, #[warn(unused_variables)] on by default
blam!   --> <anon>:15:5
blam!    |
blam! 15 | let field_identifier = i_prot.read_field_begin().unwrap();
blam!    |     ^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `field_contents`, #[warn(unused_variables)] on by default
blam!   --> <anon>:16:5
blam!    |
blam! 16 | let field_contents = i_prot.read_string().unwrap();
blam!    |     ^^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `field_end`, #[warn(unused_variables)] on by default
blam!   --> <anon>:17:5
blam!    |
blam! 17 | let field_end = i_prot.read_field_end().unwrap();
blam!    |     ^^^^^^^^^
blam! 
blam! test protocol_1 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:10:1
blam!    |
blam! 10 | transport.open("127.0.0.1:9090");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:15:1
blam!    |
blam! 15 | o_prot.write_field_begin(&TFieldIdentifier::new("string_thing", TType::String, 1));
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:16:1
blam!    |
blam! 16 | o_prot.write_string("foo");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:17:1
blam!    |
blam! 17 | o_prot.write_field_end();
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test protocol::TOutputProtocol_0 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:10:1
blam!    |
blam! 10 | transport.open("127.0.0.1:9090");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:15:1
blam!    |
blam! 15 | o_prot.write_field_begin(&TFieldIdentifier::new("string_thing", TType::String, 1));
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:16:1
blam!    |
blam! 16 | o_prot.write_string("foo");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:17:1
blam!    |
blam! 17 | o_prot.write_field_end();
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test protocol_0 ... ok
blam! 
blam! test result: ok. 9 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f 4b12af70f0465d3a73006a1e51cc19203301433f600d5a7932e5637fa65ba377`
blam! 4b12af70f0465d3a73006a1e51cc19203301433f600d5a7932e5637fa65ba377
