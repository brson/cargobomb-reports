boom! testing symtern-0.1.0-pre.1 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 83e5dbc2aae6471dc86b8c4875698732766dc8ef86b7856e97fd11cf9569d03f
boom! running `docker start -a 83e5dbc2aae6471dc86b8c4875698732766dc8ef86b7856e97fd11cf9569d03f`
kablam!    Compiling symtern v0.1.0-pre.1 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 2.21 secs
boom! running `docker rm -f 83e5dbc2aae6471dc86b8c4875698732766dc8ef86b7856e97fd11cf9569d03f`
blam! 83e5dbc2aae6471dc86b8c4875698732766dc8ef86b7856e97fd11cf9569d03f
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! ec5d4d9d81f9e107343d0eb17e5cd431a9d1b98b78248e40913ea13129206177
boom! running `docker start -a ec5d4d9d81f9e107343d0eb17e5cd431a9d1b98b78248e40913ea13129206177`
kablam!    Compiling symtern v0.1.0-pre.1 (file:///source)
kablam! warning: unused variable: `some_sym`, #[warn(unused_variables)] on by default
kablam!   --> examples/combining-adaptors.rs:36:13
kablam!    |
kablam! 36 |         let some_sym = basic_pool.intern("Mornin'!").expect("interning failed");
kablam!    |             ^^^^^^^^
kablam! 
kablam! warning: unused variable: `inline_sym`, #[warn(unused_variables)] on by default
kablam!   --> examples/combining-adaptors.rs:39:13
kablam!    |
kablam! 39 |         let inline_sym = inline_pool.intern("G'day").expect("interning failed");
kablam!    |             ^^^^^^^^^^
kablam! 
kablam! error: no method named `intern` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:78:24
kablam!    |
kablam! 78 |         let x = inline.intern("x").expect("failed to inline a value");
kablam!    |                        ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `intern`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Intern`
kablam! 
kablam! error: no method named `intern` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:79:24
kablam!    |
kablam! 79 |         let y = inline.intern("y").expect("failed to inline a value");
kablam!    |                        ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `intern`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Intern`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:81:36
kablam!    |
kablam! 81 |         assert_eq!(Ok("x"), inline.resolve(&x));
kablam!    |                                    ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:82:36
kablam!    |
kablam! 82 |         assert_eq!(Ok("y"), inline.resolve(&y));
kablam!    |                                    ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: no method named `intern` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:88:22
kablam!    |
kablam! 88 |         let x = luma.intern("x").expect("failed to inline a value");
kablam!    |                      ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:
kablam!    = help: candidate #1: `use traits::Intern;`
kablam! 
kablam! error: no method named `intern` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:89:22
kablam!    |
kablam! 89 |         let y = luma.intern("y").expect("failed to inline a value");
kablam!    |                      ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:
kablam!    = help: candidate #1: `use traits::Intern;`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:91:34
kablam!    |
kablam! 91 |         assert_eq!(Ok("x"), luma.resolve(&x));
kablam!    |                                  ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:92:34
kablam!    |
kablam! 92 |         assert_eq!(Ok("y"), luma.resolve(&y));
kablam!    |                                  ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: aborting due to 8 previous errors
kablam! 
blam! Build failed, waiting for other jobs to finish...
kablam! error: Could not compile `symtern`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f ec5d4d9d81f9e107343d0eb17e5cd431a9d1b98b78248e40913ea13129206177`
blam! ec5d4d9d81f9e107343d0eb17e5cd431a9d1b98b78248e40913ea13129206177
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! f0a983f28fd8e508ad534f9609bc3558566c52f3aab0ef442222915efb3fd828
boom! running `docker start -a f0a983f28fd8e508ad534f9609bc3558566c52f3aab0ef442222915efb3fd828`
kablam!    Compiling symtern v0.1.0-pre.1 (file:///source)
kablam! error: no method named `intern` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:78:24
kablam!    |
kablam! 78 |         let x = inline.intern("x").expect("failed to inline a value");
kablam!    |                        ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `intern`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Intern`
kablam! 
kablam! error: no method named `intern` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:79:24
kablam!    |
kablam! 79 |         let y = inline.intern("y").expect("failed to inline a value");
kablam!    |                        ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `intern`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Intern`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:81:36
kablam!    |
kablam! 81 |         assert_eq!(Ok("x"), inline.resolve(&x));
kablam!    |                                    ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::inline::Inline<adaptors::luma::Luma<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:82:36
kablam!    |
kablam! 82 |         assert_eq!(Ok("y"), inline.resolve(&y));
kablam!    |                                    ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: no method named `intern` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:88:22
kablam!    |
kablam! 88 |         let x = luma.intern("x").expect("failed to inline a value");
kablam!    |                      ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:
kablam!    = help: candidate #1: `use traits::Intern;`
kablam! 
kablam! error: no method named `intern` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:89:22
kablam!    |
kablam! 89 |         let y = luma.intern("y").expect("failed to inline a value");
kablam!    |                      ^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:
kablam!    = help: candidate #1: `use traits::Intern;`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:91:34
kablam!    |
kablam! 91 |         assert_eq!(Ok("x"), luma.resolve(&x));
kablam!    |                                  ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: no method named `resolve` found for type `adaptors::luma::Luma<adaptors::inline::Inline<basic::Pool<str, u64>>>` in the current scope
kablam!   --> src/adaptors/mod.rs:92:34
kablam!    |
kablam! 92 |         assert_eq!(Ok("y"), luma.resolve(&y));
kablam!    |                                  ^^^^^^^
kablam!    |
kablam!    = help: items from traits can only be used if the trait is implemented and in scope; the following trait defines an item `resolve`, perhaps you need to implement it:
kablam!    = help: candidate #1: `traits::Resolve`
kablam! 
kablam! error: aborting due to 8 previous errors
kablam! 
kablam! error: Could not compile `symtern`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f f0a983f28fd8e508ad534f9609bc3558566c52f3aab0ef442222915efb3fd828`
blam! f0a983f28fd8e508ad534f9609bc3558566c52f3aab0ef442222915efb3fd828
