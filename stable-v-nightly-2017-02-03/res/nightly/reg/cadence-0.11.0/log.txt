boom! testing cadence-0.11.0 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 0009917e966c03539dfd8f923d8aee7d3b828cc7c9632b23a37e9ac8fd010172
boom! running `docker start -a 0009917e966c03539dfd8f923d8aee7d3b828cc7c9632b23a37e9ac8fd010172`
kablam!    Compiling cadence v0.11.0 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 3.4 secs
boom! running `docker rm -f 0009917e966c03539dfd8f923d8aee7d3b828cc7c9632b23a37e9ac8fd010172`
blam! 0009917e966c03539dfd8f923d8aee7d3b828cc7c9632b23a37e9ac8fd010172
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! 635eb9211c998852f009baf8228ed627c71450961acdc7546b3465b0c9c26d49
boom! running `docker start -a 635eb9211c998852f009baf8228ed627c71450961acdc7546b3465b0c9c26d49`
kablam!    Compiling cadence v0.11.0 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 3.79 secs
boom! running `docker rm -f 635eb9211c998852f009baf8228ed627c71450961acdc7546b3465b0c9c26d49`
blam! 635eb9211c998852f009baf8228ed627c71450961acdc7546b3465b0c9c26d49
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! e5e64e91417cc84a38932cbd09bd7f4b857eba4900f78251275849004c10f141
boom! running `docker start -a e5e64e91417cc84a38932cbd09bd7f4b857eba4900f78251275849004c10f141`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/cadence-a0b2fcda2a352d4d
blam! 
blam! running 35 tests
blam! test client::tests::test_statsd_client_as_counted ... ok
blam! test client::tests::test_statsd_client_as_gauged ... ok
blam! test client::tests::test_statsd_client_as_histogrammed ... ok
blam! test client::tests::test_statsd_client_as_metered ... ok
blam! test client::tests::test_statsd_client_as_metric_client ... ok
blam! test client::tests::test_statsd_client_as_timed ... ok
blam! test client::tests::test_trim_key_no_trailing_dot ... ok
blam! test io::tests::test_buffer_flushed_when_dropped ... ok
blam! test client::tests::test_trim_key_with_trailing_dot ... ok
blam! test io::tests::test_flush_still_buffered ... ok
blam! test io::tests::test_write_needs_flush ... ok
blam! test io::tests::test_write_bigger_than_buffer ... ok
kablam! thread '<unnamed>' panicked at 'This thread is supposed to panic, relax :p', src/sinks/crossbeam.rs:426
kablam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! test io::tests::test_write_no_flush ... ok
kablam! thread '<unnamed>' panicked at 'This thread is supposed to panic, relax :p', src/sinks/crossbeam.rs:426
blam! test sinks::crossbeam::tests::test_worker_stop ... ok
blam! test sinks::crossbeam::tests::test_queuing_sink_emit ... ok
blam! test sinks::crossbeam::tests::test_worker_stop_and_wait ... ok
kablam! thread '<unnamed>' panicked at 'This thread is supposed to panic, relax :p', src/sinks/crossbeam.rs:426
blam! test sinks::tests::test_get_addr_bad_address ... ok
blam! test sinks::tests::test_buffered_udp_metric_sink ... ok
blam! test sinks::crossbeam::tests::test_queuing_sink_emit_panics ... ok
blam! test sinks::tests::test_nop_metric_sink ... ok
blam! test sinks::crossbeam::tests::test_worker_submit_processes_event ... ok
blam! test sinks::tests::test_get_addr_valid_address ... ok
blam! test sinks::tests::test_non_blocking_udp_metric_sink ... ok
blam! test sinks::tests::test_udp_metric_sink ... ok
blam! test types::tests::test_gauge_to_metric_string ... ok
blam! test types::tests::test_histogram_to_metric_string ... ok
blam! test types::tests::test_metric_error_cause_other ... ok
blam! test types::tests::test_metric_error_cause_io_error ... ok
blam! test types::tests::test_metric_error_description_io_error ... ok
blam! test types::tests::test_meter_to_metric_string ... ok
blam! test types::tests::test_metric_error_description_other ... ok
blam! test types::tests::test_counter_to_metric_string ... ok
blam! test types::tests::test_timer_to_metric_string ... ok
blam! test types::tests::test_metric_error_kind_io_error ... ok
blam! test types::tests::test_metric_error_kind_invalid_input ... ok
blam! 
blam! test result: ok. 35 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/lib-084989194178b357
blam! 
blam! running 15 tests
blam! test test_statsd_client_buffered_udp_sink_many_threaded ... ignored
blam! test test_statsd_client_count ... ok
blam! test test_statsd_client_decr ... ok
blam! test test_statsd_client_gauge ... ok
blam! test test_statsd_client_histogram ... ok
blam! test test_statsd_client_incr ... ok
blam! test test_statsd_client_mark ... ok
blam! test test_statsd_client_nop_sink_many_threaded ... ignored
blam! test test_statsd_client_meter ... ok
blam! test test_statsd_client_queuing_buffered_udp_sink_many_threaded ... ignored
blam! test test_statsd_client_udp_sink_many_threaded ... ignored
blam! test test_statsd_client_time ... ok
blam! test test_statsd_client_buffered_udp_sink_single_threaded ... ok
blam! test test_statsd_client_nop_sink_single_threaded ... ok
blam! test test_statsd_client_udp_sink_single_threaded ... ok
blam! 
blam! test result: ok. 11 passed; 0 failed; 4 ignored; 0 measured
blam! 
kablam!    Doc-tests cadence
blam! 
blam! running 21 tests
blam! test _0 ... ok
blam! warning: unused import: `UdpMetricSink`, #[warn(unused_imports)] on by default
blam!  --> <anon>:5:29
blam!   |
blam! 5 | use cadence::{StatsdClient, UdpMetricSink, DEFAULT_PORT};
blam!   |                             ^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:16:1
blam!    |
blam! 16 | client.incr("some.counter");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:17:1
blam!    |
blam! 17 | client.time("some.methodCall", 42);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:18:1
blam!    |
blam! 18 | client.gauge("some.thing", 7);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:19:1
blam!    |
blam! 19 | client.meter("some.value", 5);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test _1 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:14:1
blam!    |
blam! 14 | client.count("my.counter.thing", 29);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:15:1
blam!    |
blam! 15 | client.time("my.service.call", 214);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:16:1
blam!    |
blam! 16 | client.incr("some.event");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test _2 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:16:1
blam!    |
blam! 16 | client.count("my.counter.thing", 29);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:17:1
blam!    |
blam! 17 | client.time("my.service.call", 214);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:18:1
blam!    |
blam! 18 | client.incr("some.event");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test _3 ... ok
blam! warning: unused import: `DEFAULT_PORT`, #[warn(unused_imports)] on by default
blam!  --> <anon>:5:41
blam!   |
blam! 5 | use cadence::{StatsdClient, MetricSink, DEFAULT_PORT};
blam!   |                                         ^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `metric`, #[warn(unused_variables)] on by default
blam!   --> <anon>:11:20
blam!    |
blam! 11 |     fn emit(&self, metric: &str) -> io::Result<usize> {
blam!    |                    ^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:21:1
blam!    |
blam! 21 | client.count("my.counter.thing", 42);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:22:1
blam!    |
blam! 22 | client.time("my.method.time", 25);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:23:1
blam!    |
blam! 23 | client.incr("some.other.counter");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test _5 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:15:1
blam!    |
blam! 15 | client.count("my.counter.thing", 29);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:16:1
blam!    |
blam! 16 | client.time("my.service.call", 214);
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:17:1
blam!    |
blam! 17 | client.incr("some.event");
blam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test _6 ... ok
blam! warning: unused import: `UdpMetricSink`, #[warn(unused_imports)] on by default
blam!  --> <anon>:4:29
blam!   |
blam! 4 | use cadence::{StatsdClient, UdpMetricSink, DEFAULT_PORT};
blam!   |                             ^^^^^^^^^^^^^
blam! 
blam! warning: field is never used: `id`, #[warn(dead_code)] on by default
blam!  --> <anon>:8:5
blam!   |
blam! 8 |     id: u64,
blam!   |     ^^^^^^^
blam! 
blam! warning: field is never used: `username`, #[warn(dead_code)] on by default
blam!  --> <anon>:9:5
blam!   |
blam! 9 |     username: String,
blam!   |     ^^^^^^^^^^^^^^^^
blam! 
blam! warning: field is never used: `email`, #[warn(dead_code)] on by default
blam!   --> <anon>:10:5
blam!    |
blam! 10 |     email: String
blam!    |     ^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `id`, #[warn(unused_variables)] on by default
blam!   --> <anon>:29:34
blam!    |
blam! 29 |     pub fn get_user_by_id(&self, id: u64) -> Option<User> {
blam!    |                                  ^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:30:9
blam!    |
blam! 30 |         self.metrics.incr("getUserById");
blam!    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `u`, #[warn(unused_variables)] on by default
blam!   --> <anon>:45:10
blam!    |
blam! 45 |     Some(u) => println!("Found a user!"),
blam!    |          ^
blam! 
blam! test _4 ... ok
blam! test client::MetricClient_0 ... ok
blam! warning: unused import: `UdpMetricSink`, #[warn(unused_imports)] on by default
blam!  --> <anon>:3:29
blam!   |
blam! 3 | use cadence::{StatsdClient, UdpMetricSink};
blam!   |                             ^^^^^^^^^^^^^
blam! 
blam! warning: unused variable: `client`, #[warn(unused_variables)] on by default
blam!  --> <anon>:8:5
blam!   |
blam! 8 | let client = StatsdClient::from_udp_host(prefix, host);
blam!   |     ^^^^^^
blam! 
blam! test client::StatsdClient::from_udp_host_0 ... ok
blam! warning: unused variable: `client`, #[warn(unused_variables)] on by default
blam!  --> <anon>:6:5
blam!   |
blam! 6 | let client = StatsdClient::from_sink(prefix, NopMetricSink);
blam!   |     ^^^^^^
blam! 
blam! test client::StatsdClient::from_sink_0 ... ok
blam! warning: unused variable: `client`, #[warn(unused_variables)] on by default
blam!   --> <anon>:13:5
blam!    |
blam! 13 | let client = StatsdClient::from_sink(prefix, sink);
blam!    |     ^^^^^^
blam! 
blam! test client::StatsdClient::from_sink_1 ... ok
blam! warning: struct is never used: `MyRequestHandler`, #[warn(dead_code)] on by default
blam!   --> <anon>:9:1
blam!    |
blam! 9  |   struct MyRequestHandler {
blam!    |  _^ starting here...
blam! 10 | |     metrics: Arc<MetricClient + Send + Sync>,
blam! 11 | | }
blam!    | |_^ ...ending here
blam! 
blam! warning: method is never used: `new`, #[warn(dead_code)] on by default
blam!   --> <anon>:14:5
blam!    |
blam! 14 |       fn new() -> MyRequestHandler {
blam!    |  _____^ starting here...
blam! 15 | |         let socket = UdpSocket::bind("0.0.0.0:0").unwrap();
blam! 16 | |         let host = ("localhost", DEFAULT_PORT);
blam! 17 | |         let sink = BufferedUdpMetricSink::from(host, socket).unwrap();
blam! 18 | |         MyRequestHandler {
blam! 19 | |             metrics: Arc::new(StatsdClient::from_sink("some.prefix", sink))
blam! 20 | |         }
blam! 21 | |     }
blam!    | |_____^ ...ending here
blam! 
blam! warning: method is never used: `handle_some_request`, #[warn(dead_code)] on by default
blam!   --> <anon>:23:5
blam!    |
blam! 23 |       fn handle_some_request(&self) -> Result<(), String> {
blam!    |  _____^ starting here...
blam! 24 | |         let metric_ref = self.metrics.clone();
blam! 25 | |         let _t = thread::spawn(move || {
blam! 26 | |             println!("Hello from the thread!");
blam! 27 | |             metric_ref.incr("request.handler");
blam! 28 | |         });
blam! 29 | |
blam! 30 | |         Ok(())
blam! 31 | |     }
blam!    | |_____^ ...ending here
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:27:13
blam!    |
blam! 27 |             metric_ref.incr("request.handler");
blam!    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test client::StatsdClient_0 ... ok
blam! warning: unused variable: `client`, #[warn(unused_variables)] on by default
blam!   --> <anon>:12:5
blam!    |
blam! 12 | let client = StatsdClient::from_sink(prefix, sink);
blam!    |     ^^^^^^
blam! 
blam! test client::StatsdClient::from_sink_2 ... ok
blam! warning: struct is never used: `MyRequestHandler`, #[warn(dead_code)] on by default
blam!   --> <anon>:8:1
blam!    |
blam! 8  |   struct MyRequestHandler {
blam!    |  _^ starting here...
blam! 9  | |     metrics: StatsdClient,
blam! 10 | | }
blam!    | |_^ ...ending here
blam! 
blam! warning: method is never used: `new`, #[warn(dead_code)] on by default
blam!   --> <anon>:13:5
blam!    |
blam! 13 |       fn new() -> MyRequestHandler {
blam!    |  _____^ starting here...
blam! 14 | |         let socket = UdpSocket::bind("0.0.0.0:0").unwrap();
blam! 15 | |         let host = ("localhost", DEFAULT_PORT);
blam! 16 | |         let sink = BufferedUdpMetricSink::from(host, socket).unwrap();
blam! 17 | |         MyRequestHandler {
blam! 18 | |             metrics: StatsdClient::from_sink("some.prefix", sink)
blam! 19 | |         }
blam! 20 | |     }
blam!    | |_____^ ...ending here
blam! 
blam! warning: method is never used: `handle_some_request`, #[warn(dead_code)] on by default
blam!   --> <anon>:22:5
blam!    |
blam! 22 |       fn handle_some_request(&self) -> Result<(), String> {
blam!    |  _____^ starting here...
blam! 23 | |         let metric_clone = self.metrics.clone();
blam! 24 | |         let _t = thread::spawn(move || {
blam! 25 | |             println!("Hello from the thread!");
blam! 26 | |             metric_clone.incr("request.handler");
blam! 27 | |         });
blam! 28 | |
blam! 29 | |         Ok(())
blam! 30 | |     }
blam!    | |_____^ ...ending here
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:26:13
blam!    |
blam! 26 |             metric_clone.incr("request.handler");
blam!    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test client::StatsdClient_1 ... ok
blam! warning: unused variable: `sink`, #[warn(unused_variables)] on by default
blam!  --> <anon>:8:5
blam!   |
blam! 8 | let sink = BufferedUdpMetricSink::from(host, socket);
blam!   |     ^^^^
blam! 
blam! test sinks::BufferedUdpMetricSink::from_0 ... ok
blam! warning: unused variable: `sink`, #[warn(unused_variables)] on by default
blam!  --> <anon>:8:5
blam!   |
blam! 8 | let sink = BufferedUdpMetricSink::with_capacity(host, socket, 1432);
blam!   |     ^^^^
blam! 
blam! test sinks::BufferedUdpMetricSink::with_capacity_0 ... ok
blam! warning: unused variable: `sink`, #[warn(unused_variables)] on by default
blam!  --> <anon>:8:5
blam!   |
blam! 8 | let sink = UdpMetricSink::from(host, socket);
blam!   |     ^^^^
blam! 
blam! test sinks::UdpMetricSink::from_0 ... ok
blam! test prelude_0 ... ok
blam! warning: unused variable: `sink`, #[warn(unused_variables)] on by default
blam!  --> <anon>:9:5
blam!   |
blam! 9 | let sink = UdpMetricSink::from(host, socket);
blam!   |     ^^^^
blam! 
blam! test sinks::UdpMetricSink::from_1 ... ok
blam! warning: unused variable: `queuing_sink`, #[warn(unused_variables)] on by default
blam!  --> <anon>:9:5
blam!   |
blam! 9 | let queuing_sink = QueuingMetricSink::from(udp_sink);
blam!   |     ^^^^^^^^^^^^
blam! 
blam! test sinks::crossbeam::QueuingMetricSink::from_0 ... ok
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!  --> <anon>:8:5
blam!   |
blam! 8 |     queuing.emit("foo.counter:4|c");
blam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!  --> <anon>:9:5
blam!   |
blam! 9 |     queuing.emit("bar.counter:5|c");
blam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
blam!   --> <anon>:10:5
blam!    |
blam! 10 |     queuing.emit("baz.gauge:6|g");
blam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
blam! 
blam! test sinks::crossbeam::QueuingMetricSink_0 ... ok
blam! 
blam! test result: ok. 21 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f e5e64e91417cc84a38932cbd09bd7f4b857eba4900f78251275849004c10f141`
blam! e5e64e91417cc84a38932cbd09bd7f4b857eba4900f78251275849004c10f141
