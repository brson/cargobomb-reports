boom! testing plumbum-0.0.8 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! d97c7eeb5ed8c672b35ac33d81a4620bb1c726dc6c2f5933d2e55d9868639626
boom! running `docker start -a d97c7eeb5ed8c672b35ac33d81a4620bb1c726dc6c2f5933d2e55d9868639626`
kablam!    Compiling plumbum v0.0.8 (file:///source)
kablam! warning: private type in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:281:43
kablam!     |
kablam! 281 | pub type Sink<'a, I, A> = ConduitM<'a, I, Void, A>;
kablam!     |                                           ^^^^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |     fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |     ^ impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |     fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |     ^ impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |     fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |     ^ impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |     fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |     ^ impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning: private type in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:165:43
kablam!     |
kablam! 165 |     pub fn connect<A>(mut self, mut sink: Sink<'a, O, A>) -> A where O: 'static {
kablam!     |                                           ^^^^^^^^^^^^^^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.35 secs
boom! running `docker rm -f d97c7eeb5ed8c672b35ac33d81a4620bb1c726dc6c2f5933d2e55d9868639626`
blam! d97c7eeb5ed8c672b35ac33d81a4620bb1c726dc6c2f5933d2e55d9868639626
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! 6d7e3a1c50b5e419421968f2ef744f68ab71912c2813417f85a82c4a58862448
boom! running `docker start -a 6d7e3a1c50b5e419421968f2ef744f68ab71912c2813417f85a82c4a58862448`
kablam!    Compiling plumbum v0.0.8 (file:///source)
kablam! warning: private type in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:281:43
kablam!     |
kablam! 281 | pub type Sink<'a, I, A> = ConduitM<'a, I, Void, A>;
kablam!     |                                           ^^^^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |     fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |     ^ impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |     fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |     ^ impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |     fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |     ^ impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |     fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |     ^ impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning: private type in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:165:43
kablam!     |
kablam! 165 |     pub fn connect<A>(mut self, mut sink: Sink<'a, O, A>) -> A where O: 'static {
kablam!     |                                           ^^^^^^^^^^^^^^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.91 secs
boom! running `docker rm -f 6d7e3a1c50b5e419421968f2ef744f68ab71912c2813417f85a82c4a58862448`
blam! 6d7e3a1c50b5e419421968f2ef744f68ab71912c2813417f85a82c4a58862448
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! f21adf75b6b7142ebc200962cf4f20623125fc266cab9b4a03955016bf7d0374
boom! running `docker start -a f21adf75b6b7142ebc200962cf4f20623125fc266cab9b4a03955016bf7d0374`
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/plumbum-ede700a5ae94c56c
blam! 
blam! running 2 tests
blam! test kleisli::kleisli_run_plus_one ... ok
blam! test kleisli::kleisli_run_to_string ... ok
kablam!    Doc-tests plumbum
blam! 
blam! test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured
blam! 
blam! 
blam! running 7 tests
blam! test ConduitM<'a, (), O, ()>::connect_0 ... ok
blam! test kleisli::Kleisli<'a, A, I, O, A>::new_0 ... ok
blam! test ConduitM<'a, I, O, ()>::fuse_0 ... ok
blam! test kleisli::Kleisli<'a, A, I, O, B>::append_0 ... ok
blam! test _0 ... ok
blam! test pipe_0 ... ok
blam! test fuse_0 ... ok
blam! 
blam! test result: ok. 7 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f f21adf75b6b7142ebc200962cf4f20623125fc266cab9b4a03955016bf7d0374`
blam! f21adf75b6b7142ebc200962cf4f20623125fc266cab9b4a03955016bf7d0374
