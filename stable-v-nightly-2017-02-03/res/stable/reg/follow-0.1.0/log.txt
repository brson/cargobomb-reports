boom! testing follow-0.1.0 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! 76b54305820fad2aadb3be34368abc254f67487f731e6204885701d363a75f6f
boom! running `docker start -a 76b54305820fad2aadb3be34368abc254f67487f731e6204885701d363a75f6f`
kablam!    Compiling fern v0.3.5
kablam!    Compiling num v0.1.36
kablam!    Compiling chrono v0.2.25
kablam!    Compiling follow v0.1.0 (file:///source)
kablam! warning: method is never used: `is_verbose`, #[warn(dead_code)] on by default
kablam!   --> src/args.rs:32:5
kablam!    |
kablam! 32 |     pub fn is_verbose(&self) -> bool {
kablam!    |     ^
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 10.11 secs
boom! running `docker rm -f 76b54305820fad2aadb3be34368abc254f67487f731e6204885701d363a75f6f`
blam! 76b54305820fad2aadb3be34368abc254f67487f731e6204885701d363a75f6f
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! f8561a6140012a5970d2b981ca863267d1d6507a3326555dddfd2c465afd3542
boom! running `docker start -a f8561a6140012a5970d2b981ca863267d1d6507a3326555dddfd2c465afd3542`
kablam!    Compiling pulse v0.5.3
kablam!    Compiling timebomb v0.1.2
kablam!    Compiling follow v0.1.0 (file:///source)
kablam! warning: method is never used: `is_verbose`, #[warn(dead_code)] on by default
kablam!   --> src/args.rs:32:5
kablam!    |
kablam! 32 |     pub fn is_verbose(&self) -> bool {
kablam!    |     ^
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 8.8 secs
boom! running `docker rm -f f8561a6140012a5970d2b981ca863267d1d6507a3326555dddfd2c465afd3542`
blam! f8561a6140012a5970d2b981ca863267d1d6507a3326555dddfd2c465afd3542
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! 5fc9a540bd82e91bcf1b248ae9a71075607c66af00ef406fbf7b13fcf5abbd72
boom! running `docker start -a 5fc9a540bd82e91bcf1b248ae9a71075607c66af00ef406fbf7b13fcf5abbd72`
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/follow-3ed8599134d9f85d
blam! 
blam! running 9 tests
blam! test worker::tests::it_continues_reading_after_truncation ... FAILED
blam! test worker::tests::it_reads_new_text_equal_to_buffer_size ... ok
blam! test worker::tests::it_reads_new_text_less_than_buffer_size ... ok
blam! test worker::tests::it_reads_lines_from_initially_empty_file ... ok
blam! test worker::tests::it_reads_new_text_between_one_and_two_buffers_in_size ... ok
blam! test worker::tests::it_retuns_none_if_file_is_deleted_after_worker_is_created_but_before_it_runs ... ok
blam! test worker::tests::it_reads_new_text_two_buffers_in_size ... ok
blam! test worker::tests::it_retuns_none_if_file_doesnt_exist_before_worker_is_created ... ok
blam! test worker::tests::it_retuns_none_if_file_is_deleted_after_worker_runs ... ok
blam! 
blam! failures:
blam! 
blam! ---- worker::tests::it_continues_reading_after_truncation stdout ----
blam! 	thread 'worker::tests::it_continues_reading_after_truncation' panicked at 'log: Error(Msg("failed to init logger"), State { next_error: Some(Io(Error { repr: Os { code: 30, message: "Read-only file system" } })), backtrace: None })', ../src/libcore/result.rs:837
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! 
blam! failures:
blam!     worker::tests::it_continues_reading_after_truncation
blam! 
blam! test result: FAILED. 8 passed; 1 failed; 0 ignored; 0 measured
blam! 
kablam! error: test failed
boom! running `docker rm -f 5fc9a540bd82e91bcf1b248ae9a71075607c66af00ef406fbf7b13fcf5abbd72`
blam! 5fc9a540bd82e91bcf1b248ae9a71075607c66af00ef406fbf7b13fcf5abbd72
