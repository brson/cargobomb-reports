boom! testing parsimonious-0.0.8 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! f0bd15c64dc63a227756caa16579d85ef5602a5430d9542e76b8bde3ef28b070
boom! running `docker start -a f0bd15c64dc63a227756caa16579d85ef5602a5430d9542e76b8bde3ef28b070`
kablam!    Compiling parsimonious v0.0.8 (file:///source)
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 1.23 secs
boom! running `docker rm -f f0bd15c64dc63a227756caa16579d85ef5602a5430d9542e76b8bde3ef28b070`
blam! f0bd15c64dc63a227756caa16579d85ef5602a5430d9542e76b8bde3ef28b070
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! 5111eac380e7cd0d9ed3b33bd0b2521af048959cb80346531117156b8fe22239
boom! running `docker start -a 5111eac380e7cd0d9ed3b33bd0b2521af048959cb80346531117156b8fe22239`
kablam!    Compiling parsimonious v0.0.8 (file:///source)
kablam! error[E0161]: cannot move a value of type ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str>: the size of ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str> cannot be statically determined
kablam!     --> src/lib.rs:1829:16
kablam!      |
kablam! 1829 |     assert_eq!(lexer.pipe(parser).init().parse("abc37!").unDone(), ("!",vec![ Token::Identifier(String::from("abc")), Token::Number(37) ]));
kablam!      |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `parsimonious`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f 5111eac380e7cd0d9ed3b33bd0b2521af048959cb80346531117156b8fe22239`
blam! 5111eac380e7cd0d9ed3b33bd0b2521af048959cb80346531117156b8fe22239
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! c57b0f3763877921620f23be8602e67a814afb5dd1a50224059f22818cd34817
boom! running `docker start -a c57b0f3763877921620f23be8602e67a814afb5dd1a50224059f22818cd34817`
kablam!    Compiling parsimonious v0.0.8 (file:///source)
kablam! error[E0161]: cannot move a value of type ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str>: the size of ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str> cannot be statically determined
kablam!     --> src/lib.rs:1829:16
kablam!      |
kablam! 1829 |     assert_eq!(lexer.pipe(parser).init().parse("abc37!").unDone(), ("!",vec![ Token::Identifier(String::from("abc")), Token::Number(37) ]));
kablam!      |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `parsimonious`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f c57b0f3763877921620f23be8602e67a814afb5dd1a50224059f22818cd34817`
blam! c57b0f3763877921620f23be8602e67a814afb5dd1a50224059f22818cd34817
