boom! testing urchin-0.1.1 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! e73be0d61823dc38c0e1853cefeb7a2391d7ea77f1f9cb71f613119a8e55c357
boom! running `docker start -a e73be0d61823dc38c0e1853cefeb7a2391d7ea77f1f9cb71f613119a8e55c357`
kablam!    Compiling urchin v0.1.1 (file:///source)
kablam! warning: enum is never used: `FutureState`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:6:1
kablam!    |
kablam! 6  | enum FutureState<T, E> {
kablam!    | ^
kablam! 
kablam! warning: struct is never used: `FutureInner`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:13:1
kablam!    |
kablam! 13 | pub struct FutureInner<T, E> {
kablam!    | ^
kablam! 
kablam! warning: method is never used: `promised`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:18:5
kablam!    |
kablam! 18 |     fn promised() -> FutureInner<T, E> {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `from_val`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:24:5
kablam!    |
kablam! 24 |     fn from_val(val: T) -> FutureInner<T, E> {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `from_err`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:30:5
kablam!    |
kablam! 30 |     fn from_err(err: E) -> FutureInner<T, E> {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `unwrap`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:36:5
kablam!    |
kablam! 36 |     fn unwrap(self) -> T {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `unwrap_err`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:43:5
kablam!    |
kablam! 43 |     fn unwrap_err(self) -> E {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `expect`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:50:5
kablam!    |
kablam! 50 |     fn expect(self, _msg: &str) -> T {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `is_promised`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:57:5
kablam!    |
kablam! 57 |     fn is_promised(&self) -> bool {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `is_err`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:64:5
kablam!    |
kablam! 64 |     fn is_err(&self) -> bool {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `is_ok`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:71:5
kablam!    |
kablam! 71 |     fn is_ok(&self) -> bool {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `ok`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:78:5
kablam!    |
kablam! 78 |     fn ok(self) -> Option<T> {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `err`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:85:5
kablam!    |
kablam! 85 |     fn err(self) -> Option<E> {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `set_ok`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:92:5
kablam!    |
kablam! 92 |     fn set_ok(&mut self, val: T) {
kablam!    |     ^
kablam! 
kablam! warning: method is never used: `set_err`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:97:5
kablam!     |
kablam! 97  |     fn set_err(&mut self, err: E) {
kablam!     |     ^
kablam! 
kablam! warning: struct is never used: `Future`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:104:1
kablam!     |
kablam! 104 | pub struct Future<T, E> {
kablam!     | ^
kablam! 
kablam! warning: method is never used: `promised`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:112:5
kablam!     |
kablam! 112 |     pub fn promised() -> (Future<T, E>, Promise<T, E>) {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `from_val`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:119:5
kablam!     |
kablam! 119 |     pub fn from_val(val: T) -> Future<T, E> {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `from_err`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:124:5
kablam!     |
kablam! 124 |     pub fn from_err(err: E) -> Future<T, E> {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `new`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:128:5
kablam!     |
kablam! 128 |     fn new(inner: Rc<RefCell<FutureInner<T, E>>>) -> Future<T, E> {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `is_promised`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:135:5
kablam!     |
kablam! 135 |     pub fn is_promised(&self) -> bool {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `is_ok`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:141:5
kablam!     |
kablam! 141 |     pub fn is_ok(&self) -> bool {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `is_err`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:146:5
kablam!     |
kablam! 146 |     pub fn is_err(&self) -> bool {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `err`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:152:5
kablam!     |
kablam! 152 |     pub fn err(self) -> Option<E> {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `ok`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:160:5
kablam!     |
kablam! 160 |     pub fn ok(self) -> Option<T> {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `unwrap_err`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:169:5
kablam!     |
kablam! 169 |     pub fn unwrap_err(self) -> E {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `unwrap`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:177:5
kablam!     |
kablam! 177 |     pub fn unwrap(self) -> T {
kablam!     |     ^
kablam! 
kablam! warning: struct is never used: `Promise`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:188:1
kablam!     |
kablam! 188 | pub struct Promise<T, E> {
kablam!     | ^
kablam! 
kablam! warning: method is never used: `new`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:195:5
kablam!     |
kablam! 195 |     fn new(inner: Rc<RefCell<FutureInner<T, E>>>) -> Promise<T, E> {
kablam!     |     ^
kablam! 
kablam! warning: method is never used: `resolve`, #[warn(dead_code)] on by default
kablam!    --> src/future.rs:201:5
kablam!     |
kablam! 201 |     pub fn resolve(self, res: Result<T, E>) {
kablam!     |     ^
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.31 secs
boom! running `docker rm -f e73be0d61823dc38c0e1853cefeb7a2391d7ea77f1f9cb71f613119a8e55c357`
blam! e73be0d61823dc38c0e1853cefeb7a2391d7ea77f1f9cb71f613119a8e55c357
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! ad2c5516e16ce42406bc5abdb6d3615dc9411e46513f4b3f9a50dd344012fa72
boom! running `docker start -a ad2c5516e16ce42406bc5abdb6d3615dc9411e46513f4b3f9a50dd344012fa72`
kablam!    Compiling urchin v0.1.1 (file:///source)
kablam! warning: method is never used: `expect`, #[warn(dead_code)] on by default
kablam!   --> src/future.rs:50:5
kablam!    |
kablam! 50 |     fn expect(self, _msg: &str) -> T {
kablam!    |     ^
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.72 secs
boom! running `docker rm -f ad2c5516e16ce42406bc5abdb6d3615dc9411e46513f4b3f9a50dd344012fa72`
blam! ad2c5516e16ce42406bc5abdb6d3615dc9411e46513f4b3f9a50dd344012fa72
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! 755985937a22e229cdd375db6fe04341f774014edfe5360421077cfbb4599c3b
boom! running `docker start -a 755985937a22e229cdd375db6fe04341f774014edfe5360421077cfbb4599c3b`
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/urchin-62ac57c71faf8567
blam! 
blam! running 10 tests
blam! test future::test::future_err ... ok
blam! test future::test::future_promise_err ... ok
blam! test future::test::future_err_unwrap ... ok
blam! test future::test::future_ok ... ok
blam! test future::test::future_ok_unwrap_err ... ok
blam! test future::test::future_promise_ok ... ok
blam! test future::test::future_promised_unwrap ... ok
blam! test future::test::future_promised_unwrap_err ... ok
blam! test future::test::future_unwrap ... ok
blam! test future::test::future_unwrap_err ... ok
blam! 
blam! test result: ok. 10 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests urchin
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f 755985937a22e229cdd375db6fe04341f774014edfe5360421077cfbb4599c3b`
blam! 755985937a22e229cdd375db6fe04341f774014edfe5360421077cfbb4599c3b
