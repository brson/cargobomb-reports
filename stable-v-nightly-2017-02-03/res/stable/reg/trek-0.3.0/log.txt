boom! testing trek-0.3.0 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! 1362c0180cf6b86184bf9add53079d6758c0851d382f6d05280bd610d743d813
boom! running `docker start -a 1362c0180cf6b86184bf9add53079d6758c0851d382f6d05280bd610d743d813`
kablam!    Compiling num v0.1.36
kablam!    Compiling chrono v0.2.25
kablam!    Compiling trek v0.3.0 (file:///source)
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 6.23 secs
boom! running `docker rm -f 1362c0180cf6b86184bf9add53079d6758c0851d382f6d05280bd610d743d813`
blam! 1362c0180cf6b86184bf9add53079d6758c0851d382f6d05280bd610d743d813
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! ee6f2771b6472861319731f78c923742378a4dfd58faa81c462ec62b967cd271
boom! running `docker start -a ee6f2771b6472861319731f78c923742378a4dfd58faa81c462ec62b967cd271`
kablam!    Compiling trek v0.3.0 (file:///source)
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 3.38 secs
boom! running `docker rm -f ee6f2771b6472861319731f78c923742378a4dfd58faa81c462ec62b967cd271`
blam! ee6f2771b6472861319731f78c923742378a4dfd58faa81c462ec62b967cd271
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! 351c6159e330ab6c8244e41d3d597f08adb7d8d661aa2b2cecdb72f74189905e
boom! running `docker start -a 351c6159e330ab6c8244e41d3d597f08adb7d8d661aa2b2cecdb72f74189905e`
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/test-881e776ea7e74096
blam! 
blam! running 6 tests
blam! test can_rollback_migration ... FAILED
blam! test can_apply_migrations_sequentially ... FAILED
blam! test can_run_migration ... FAILED
blam! test can_rollback_migrations_sequentially ... FAILED
blam! test fails_gracefully_on_migration_run_error ... FAILED
kablam! error: test failed
blam! test fails_gracefully_on_migration_rollback_error ... FAILED
blam! 
blam! failures:
blam! 
blam! ---- can_rollback_migration stdout ----
blam! 	thread 'can_rollback_migration' panicked at 'TREK_TEST_DB_PARAMS environment variable is unset. This environment variable should contain a database connection string for a PostgreSQL database to use when testing. This string should take the form:
blam! postgresql://user[:password]@host[:port][/database][?param1=val1[[&param2=val2]...]]
blam! See the rust-postgres documentation for more details:
blam! https://sfackler.github.io/rust-postgres/doc/postgres/struct.Connection.html#method.connect
blam! ', ../src/libcore/option.rs:705
blam! 
blam! ---- can_apply_migrations_sequentially stdout ----
blam! 	thread 'can_apply_migrations_sequentially' panicked at 'TREK_TEST_DB_PARAMS environment variable is unset. This environment variable should contain a database connection string for a PostgreSQL database to use when testing. This string should take the form:
blam! postgresql://user[:password]@host[:port][/database][?param1=val1[[&param2=val2]...]]
blam! See the rust-postgres documentation for more details:
blam! https://sfackler.github.io/rust-postgres/doc/postgres/struct.Connection.html#method.connect
blam! ', ../src/libcore/option.rs:705
blam! 
blam! ---- can_run_migration stdout ----
blam! 	thread 'can_run_migration' panicked at 'TREK_TEST_DB_PARAMS environment variable is unset. This environment variable should contain a database connection string for a PostgreSQL database to use when testing. This string should take the form:
blam! postgresql://user[:password]@host[:port][/database][?param1=val1[[&param2=val2]...]]
blam! See the rust-postgres documentation for more details:
blam! https://sfackler.github.io/rust-postgres/doc/postgres/struct.Connection.html#method.connect
blam! ', ../src/libcore/option.rs:705
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! ---- can_rollback_migrations_sequentially stdout ----
blam! 	thread 'can_rollback_migrations_sequentially' panicked at 'TREK_TEST_DB_PARAMS environment variable is unset. This environment variable should contain a database connection string for a PostgreSQL database to use when testing. This string should take the form:
blam! postgresql://user[:password]@host[:port][/database][?param1=val1[[&param2=val2]...]]
blam! See the rust-postgres documentation for more details:
blam! https://sfackler.github.io/rust-postgres/doc/postgres/struct.Connection.html#method.connect
blam! ', ../src/libcore/option.rs:705
blam! 
blam! ---- fails_gracefully_on_migration_run_error stdout ----
blam! 	thread 'fails_gracefully_on_migration_run_error' panicked at 'TREK_TEST_DB_PARAMS environment variable is unset. This environment variable should contain a database connection string for a PostgreSQL database to use when testing. This string should take the form:
blam! postgresql://user[:password]@host[:port][/database][?param1=val1[[&param2=val2]...]]
blam! See the rust-postgres documentation for more details:
blam! https://sfackler.github.io/rust-postgres/doc/postgres/struct.Connection.html#method.connect
blam! ', ../src/libcore/option.rs:705
blam! 
blam! ---- fails_gracefully_on_migration_rollback_error stdout ----
blam! 	thread 'fails_gracefully_on_migration_rollback_error' panicked at 'TREK_TEST_DB_PARAMS environment variable is unset. This environment variable should contain a database connection string for a PostgreSQL database to use when testing. This string should take the form:
blam! postgresql://user[:password]@host[:port][/database][?param1=val1[[&param2=val2]...]]
blam! See the rust-postgres documentation for more details:
blam! https://sfackler.github.io/rust-postgres/doc/postgres/struct.Connection.html#method.connect
blam! ', ../src/libcore/option.rs:705
blam! 
blam! 
blam! failures:
blam!     can_apply_migrations_sequentially
blam!     can_rollback_migration
blam!     can_rollback_migrations_sequentially
blam!     can_run_migration
blam!     fails_gracefully_on_migration_rollback_error
blam!     fails_gracefully_on_migration_run_error
blam! 
blam! test result: FAILED. 0 passed; 6 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f 351c6159e330ab6c8244e41d3d597f08adb7d8d661aa2b2cecdb72f74189905e`
blam! 351c6159e330ab6c8244e41d3d597f08adb7d8d661aa2b2cecdb72f74189905e
