boom! testing https://github.com/kevinburke/dnstimeout#8aa565116b9aa81708559cc441ff57688befb2ab against beta for beta
boom! running: cargo +beta build --frozen
boom! creating container for: cargo +beta build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta build --frozen cargobomb`
blam! 8c6fabfca82a89290108069f7173ff4b3ab456ffee03ec2e2bab10ffa0109532
boom! running `docker start -a 8c6fabfca82a89290108069f7173ff4b3ab456ffee03ec2e2bab10ffa0109532`
kablam!    Compiling dnstimeout v0.0.1 (file:///source)
kablam! error: use of unstable library feature 'lookup_host': unsure about the returned iterator and returning socket addresses (see issue #27705)
kablam!   --> src/lib.rs:10:77
kablam!    |
kablam! 10 | pub fn lookup(host: String, timeout_duration: time::Duration) -> io::Result<net::LookupHost> {
kablam!    |                                                                             ^^^^^^^^^^^^^^^
kablam! 
kablam! error: use of unstable library feature 'lookup_host': unsure about the returned iterator and returning socket addresses (see issue #27705)
kablam!   --> src/lib.rs:11:43
kablam!    |
kablam! 11 |     let (tx, rx):(mpsc::Sender<io::Result<net::LookupHost>>, mpsc::Receiver<io::Result<net::LookupHost>>) = channel();
kablam!    |                                           ^^^^^^^^^^^^^^^
kablam! 
kablam! error: use of unstable library feature 'lookup_host': unsure about the returned iterator and returning socket addresses (see issue #27705)
kablam!   --> src/lib.rs:11:88
kablam!    |
kablam! 11 |     let (tx, rx):(mpsc::Sender<io::Result<net::LookupHost>>, mpsc::Receiver<io::Result<net::LookupHost>>) = channel();
kablam!    |                                                                                        ^^^^^^^^^^^^^^^
kablam! 
kablam! error: use of unstable library feature 'lookup_host': unsure about the returned iterator and returning socket addresses (see issue #27705)
kablam!   --> src/lib.rs:18:17
kablam!    |
kablam! 18 |         tx.send(net::lookup_host(host.as_str())).unwrap();
kablam!    |                 ^^^^^^^^^^^^^^^^
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: use of unstable library feature 'mpsc_select': This implementation, while likely sufficient, is unsafe and likely to be error prone. At some point in the future this module will likely be replaced, and it is currently unknown how much API breakage that will cause. The ability to select over a number of channels will remain forever, but no guarantees beyond this are being made (see issue #27800)
kablam!   --> src/lib.rs:26:9
kablam!    |
kablam! 26 |           select! {
kablam!    |  _________^ starting here...
kablam! 27 | |             val = rx.recv() => { return val.unwrap() },
kablam! 28 | |             _ = rx2.recv() => {
kablam! 29 | |                 let e = io::Error::new(io::ErrorKind::TimedOut, detail);
kablam! 30 | |                 return Err(e)
kablam! 31 | |             }
kablam! 32 | |         }
kablam!    | |_________^ ...ending here
kablam!    |
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! error: aborting due to 10 previous errors
kablam! 
kablam! error: Could not compile `dnstimeout`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f 8c6fabfca82a89290108069f7173ff4b3ab456ffee03ec2e2bab10ffa0109532`
blam! 8c6fabfca82a89290108069f7173ff4b3ab456ffee03ec2e2bab10ffa0109532
