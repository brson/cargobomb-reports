boom! testing egc-0.1.2 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! d588025bb2c95d3fee2853fd62a8de1217015c8987a24c7878d2fd2f8981d11e
boom! running `docker start -a d588025bb2c95d3fee2853fd62a8de1217015c8987a24c7878d2fd2f8981d11e`
kablam!    Compiling sodium-sys v0.0.4
kablam!    Compiling libmultilog v0.1.0
kablam!    Compiling egc v0.1.2 (file:///source)
kablam!    Compiling syntex v0.26.0
kablam!    Compiling quasi_codegen v0.7.0
kablam!    Compiling serde v0.6.15
kablam! error: failed to run custom build command for `sodium-sys v0.0.4`
blam! Build failed, waiting for other jobs to finish...
kablam! process didn't exit successfully: `/target/debug/build/sodium-sys-097619479dde7a4b/build-script-build` (exit code: 101)
kablam! --- stderr
kablam! ./autogen.sh: 13: ./autogen.sh: libtoolize: not found
kablam! thread 'main' panicked at 'assertion failed: status.success()', /cargo-home/registry/src/github.com-1ecc6299db9ec823/sodium-sys-0.0.4/build.rs:68
kablam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
kablam! 
kablam! error[E0271]: type mismatch resolving `for<'cx, 'r, 'r> <fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_stmt::<'_>} as std::ops::FnOnce<(&'cx mut syntax::ext::base::ExtCtxt<'r>, syntax::codemap::Span, &'r [syntax::ast::TokenTree])>>::Output == std::boxed::Box<syntax::ext::base::MacResult + 'cx>`
kablam!    --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/quasi_codegen-0.7.0/src/lib.rs:728:9
kablam!     |
kablam! 728 |     reg.add_macro("quote_stmt", expand_quote_stmt);
kablam!     |         ^^^^^^^^^ expected bound lifetime parameter 'cx, found concrete lifetime
kablam!     |
kablam!     = note: concrete lifetime that was found is lifetime '_#56r
kablam!     = note: required because of the requirements on the impl of `syntax::ext::base::TTMacroExpander` for `fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_stmt::<'_>}`
kablam! 
kablam! error[E0271]: type mismatch resolving `for<'cx, 'r, 'r> <fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_item::<'_>} as std::ops::FnOnce<(&'cx mut syntax::ext::base::ExtCtxt<'r>, syntax::codemap::Span, &'r [syntax::ast::TokenTree])>>::Output == std::boxed::Box<syntax::ext::base::MacResult + 'cx>`
kablam!    --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/quasi_codegen-0.7.0/src/lib.rs:733:9
kablam!     |
kablam! 733 |     reg.add_macro("quote_item", expand_quote_item);
kablam!     |         ^^^^^^^^^ expected bound lifetime parameter 'cx, found concrete lifetime
kablam!     |
kablam!     = note: concrete lifetime that was found is lifetime '_#119r
kablam!     = note: required because of the requirements on the impl of `syntax::ext::base::TTMacroExpander` for `fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_item::<'_>}`
kablam! 
kablam! error: aborting due to 2 previous errors
kablam! 
kablam! error: Could not compile `quasi_codegen`.
blam! Build failed, waiting for other jobs to finish...
kablam! error: build failed
boom! running `docker rm -f d588025bb2c95d3fee2853fd62a8de1217015c8987a24c7878d2fd2f8981d11e`
blam! d588025bb2c95d3fee2853fd62a8de1217015c8987a24c7878d2fd2f8981d11e
