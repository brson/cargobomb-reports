boom! testing https://github.com/psFried/flo#3b0667f3ba5048105bafc72a182d5e2ad2cd50aa against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 6dda3f2f91e41b1be65b754fde96aa43da20ea4369b4e175db2fc2689324af2d
boom! running `docker start -a 6dda3f2f91e41b1be65b754fde96aa43da20ea4369b4e175db2fc2689324af2d`
kablam!    Compiling unsafe-any v0.4.1
kablam!    Compiling net2 v0.2.26
kablam!    Compiling term_size v0.2.1
kablam!    Compiling time v0.1.35
kablam!    Compiling typemap v0.3.3
kablam!    Compiling num_cpus v1.2.1
kablam!    Compiling ordered-float v0.1.0
kablam!    Compiling mio v0.6.1
kablam!    Compiling serde-value v0.2.1
kablam!    Compiling clap v2.18.0
kablam!    Compiling chrono v0.2.25
kablam!    Compiling tokio-core v0.1.4
kablam!    Compiling log4rs v0.4.8
kablam!    Compiling flo v0.1.0 (file:///source)
kablam! warning: unused import: `nom::IResult`
kablam!  --> src/client/sync/client_stream.rs:5:5
kablam!   |
kablam! 5 | use nom::IResult;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: constant item is never used: `BUFFER_LENGTH`
kablam!  --> src/client/sync/client_stream.rs:9:1
kablam!   |
kablam! 9 | const BUFFER_LENGTH: usize = 8 * 1024;
kablam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `IResult`
kablam!   --> src/protocol/client.rs:13:35
kablam!    |
kablam! 13 | use nom::{be_u64, be_u32, be_u16, IResult};
kablam!    |                                   ^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Read`, `self`
kablam!   --> src/protocol/client.rs:17:15
kablam!    |
kablam! 17 | use std::io::{self, Read};
kablam!    |               ^^^^  ^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: function is never used: `serialize_produce_header`
kablam!    --> src/protocol/client.rs:470:1
kablam!     |
kablam! 470 | fn serialize_produce_header(header: &ProduceEventHeader, mut buf: &mut [u8]) -> usize {
kablam!     | ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `event`
kablam!    --> src/protocol/client.rs:530:43
kablam!     |
kablam! 530 |             ProtocolMessage::ReceiveEvent(ref event) => {
kablam!     |                                           ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `need`
kablam!    --> src/protocol/mod.rs:125:41
kablam!     |
kablam! 125 |                     IResult::Incomplete(need) => {
kablam!     |                                         ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/serializer.rs:17:23
kablam!    |
kablam! 17 |     pub fn write_bool(mut self, value: bool) -> Self {
kablam!    |                       ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused import: `std::fmt::Display`
kablam!  --> src/client_cli/error.rs:1:5
kablam!   |
kablam! 1 | use std::fmt::Display;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Write`, `self`
kablam!  --> src/client_cli/error.rs:2:15
kablam!   |
kablam! 2 | use std::io::{self, Write};
kablam!   |               ^^^^  ^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::net::SocketAddr`
kablam!  --> src/client_cli/producer.rs:1:5
kablam!   |
kablam! 1 | use std::net::SocketAddr;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `Write`
kablam!   --> src/client_cli/consumer.rs:13:21
kablam!    |
kablam! 13 | use std::io::{self, Write};
kablam!    |                     ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: variant is never used: `Silent`
kablam!   --> src/client_cli/mod.rs:41:5
kablam!    |
kablam! 41 |     Silent,
kablam!    |     ^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!   --> src/client_cli/mod.rs:91:13
kablam!    |
kablam! 91 |             write!(stdout, "{}", message);
kablam!    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_must_use)] on by default
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: unused result which must be used
kablam!    --> src/client_cli/mod.rs:104:13
kablam!     |
kablam! 104 |             write!(stderr, "{}", message);
kablam!     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_must_use)] on by default
kablam!     = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: unused imports: `IpAddr`, `SocketAddr`, `ToSocketAddrs`
kablam!   --> src/flo_client_cli.rs:14:16
kablam!    |
kablam! 14 | use std::net::{SocketAddr, ToSocketAddrs, IpAddr};
kablam!    |                ^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `err`
kablam!    --> src/flo_client_cli.rs:152:37
kablam!     |
kablam! 152 |         value.parse::<T>().map_err(|err| {
kablam!     |                                     ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: field is never used: `slow_event_threshold`
kablam!  --> src/server/metrics.rs:8:5
kablam!   |
kablam! 8 |     slow_event_threshold: Duration,
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `total_events_saved`
kablam!  --> src/server/metrics.rs:9:5
kablam!   |
kablam! 9 |     total_events_saved: u64,
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `event_persisted`
kablam!   --> src/server/metrics.rs:24:5
kablam!    |
kablam! 24 |     pub fn event_persisted(&mut self, event_id: FloEventId, time_in_channel: Duration, storage_time: Duration) {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: constant item is never used: `NANOS_IN_MILLISECOND`
kablam!   --> src/server/metrics.rs:39:1
kablam!    |
kablam! 39 | const NANOS_IN_MILLISECOND: f64 = 1_000_000f64;
kablam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: function is never used: `as_millis`
kablam!   --> src/server/metrics.rs:41:1
kablam!    |
kablam! 41 |   fn as_millis(dur: Duration) -> f64 {
kablam!    |  _^ starting here...
kablam! 42 | |     let mul = dur.as_secs() as f64;
kablam! 43 | |
kablam! 44 | |     dur.subsec_nanos() as f64 / NANOS_IN_MILLISECOND * mul
kablam! 45 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `Instant`
kablam!  --> src/server/flo_io/client_message_stream.rs:4:17
kablam!   |
kablam! 4 | use std::time::{Instant};
kablam!   |                 ^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `self`
kablam!  --> src/server/flo_io/client_message_stream.rs:7:27
kablam!   |
kablam! 7 | use server::engine::api::{self, ClientMessage, ConnectionId};
kablam!   |                           ^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ConsumerStart`, `ProtocolMessage`
kablam!  --> src/server/flo_io/client_message_stream.rs:8:16
kablam!   |
kablam! 8 | use protocol::{ProtocolMessage, ConsumerStart, MessageStream};
kablam!   |                ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `nom::IResult`
kablam!  --> src/server/flo_io/client_message_stream.rs:9:5
kablam!   |
kablam! 9 | use nom::IResult;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `ClientConnect`
kablam!   --> src/server/flo_io/mod.rs:12:56
kablam!    |
kablam! 12 | use server::engine::api::{ConnectionId, ClientMessage, ClientConnect};
kablam!    |                                                        ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::io`
kablam!   --> src/server/mod.rs:18:5
kablam!    |
kablam! 18 | use std::io;
kablam!    |     ^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: method is never used: `get_next_entry`
kablam!   --> src/engine/event_store/index/mod.rs:78:5
kablam!    |
kablam! 78 |       pub fn get_next_entry(&self, start_after: FloEventId) -> Option<&IndexEntry> {
kablam!    |  _____^ starting here...
kablam! 79 | |         self.entries.range((Bound::Excluded(&start_after), Bound::Unbounded)).next().map(|(_k, v)| v)
kablam! 80 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `engine::version_vec::VersionVector`
kablam!  --> src/engine/producer/cluster.rs:3:5
kablam!   |
kablam! 3 | use engine::version_vec::VersionVector;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `futures::sync::mpsc::UnboundedSender`
kablam!  --> src/engine/producer/cluster.rs:5:5
kablam!   |
kablam! 5 | use futures::sync::mpsc::UnboundedSender;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: field is never used: `metrics`
kablam!   --> src/engine/producer/mod.rs:32:5
kablam!    |
kablam! 32 |     metrics: ProducerMetrics,
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/engine/producer/mod.rs:97:13
kablam!    |
kablam! 97 |         let mut cluster_members = {
kablam!    |             ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `clients`
kablam!   --> src/engine/producer/mod.rs:98:53
kablam!    |
kablam! 98 |             let ProducerManager {ref cluster_state, ref clients, ..} = *self;
kablam!    |                                                     ^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `replicate_event`
kablam!    --> src/engine/producer/mod.rs:177:5
kablam!     |
kablam! 177 |     fn replicate_event(&mut self, connection_id: ConnectionId, event: OwnedFloEvent, message_recv_time: Instant) -> Result<(), String> {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `message_recv_time`
kablam!    --> src/engine/producer/mod.rs:177:86
kablam!     |
kablam! 177 |     fn replicate_event(&mut self, connection_id: ConnectionId, event: OwnedFloEvent, message_recv_time: Instant) -> Result<(), String> {
kablam!     |                                                                                      ^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `message_recv_time`
kablam!    --> src/engine/producer/mod.rs:189:111
kablam!     |
kablam! 189 |     fn on_peer_announce(&mut self, connection_id: ConnectionId, peer_cluster_state: ::protocol::ClusterState, message_recv_time: Instant) -> Result<(), String> {
kablam!     |                                                                                                               ^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `actor_port`
kablam!    --> src/engine/producer/mod.rs:194:49
kablam!     |
kablam! 194 |         let ::protocol::ClusterState {actor_id, actor_port, version_vector, other_members} = peer_cluster_state;
kablam!     |                                                 ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `other_members`
kablam!    --> src/engine/producer/mod.rs:194:77
kablam!     |
kablam! 194 |         let ::protocol::ClusterState {actor_id, actor_port, version_vector, other_members} = peer_cluster_state;
kablam!     |                                                                             ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `stop_consuming`
kablam!    --> src/engine/consumer/client/mod.rs:144:5
kablam!     |
kablam! 144 |       pub fn stop_consuming(&mut self) {
kablam!     |  _____^ starting here...
kablam! 145 | |         self.new_consumer_state = ConsumerState::NotConsuming;
kablam! 146 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `limit`
kablam!   --> src/engine/consumer/mod.rs:63:85
kablam!    |
kablam! 63 |             ConsumerManagerMessage::ContinueConsuming(connection_id, last_event_id, limit) => {
kablam!    |                                                                                     ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `connection_id`
kablam!   --> src/engine/consumer/mod.rs:82:52
kablam!    |
kablam! 82 |             ConsumerManagerMessage::EventPersisted(connection_id, event) => {
kablam!    |                                                    ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `recv_time`
kablam!   --> src/engine/consumer/mod.rs:98:68
kablam!    |
kablam! 98 |     fn process_received_message(&mut self, ReceivedMessage{sender, recv_time, message}: ReceivedMessage) -> Result<(), String> {
kablam!    |                                                                    ^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!    --> src/engine/consumer/mod.rs:109:17
kablam!     |
kablam! 109 |                 self.consumers.update_consumer_position(sender, ack.event_id);
kablam!     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_must_use)] on by default
kablam! 
kablam! warning: unused import: `event::ActorId`
kablam!   --> src/engine/mod.rs:14:5
kablam!    |
kablam! 14 | use event::ActorId;
kablam!    |     ^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `IResult`
kablam!   --> src/protocol/client.rs:13:35
kablam!    |
kablam! 13 | use nom::{be_u64, be_u32, be_u16, IResult};
kablam!    |                                   ^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Read`, `self`
kablam!   --> src/protocol/client.rs:17:15
kablam!    |
kablam! 17 | use std::io::{self, Read};
kablam!    |               ^^^^  ^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: constant item is never used: `CLUSTER_STATE`
kablam!   --> src/protocol/client.rs:33:5
kablam!    |
kablam! 33 |     pub const CLUSTER_STATE: &'static [u8; 8] = b"FLO_CLS\n";
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: function is never used: `serialize_produce_header`
kablam!    --> src/protocol/client.rs:470:1
kablam!     |
kablam! 470 | fn serialize_produce_header(header: &ProduceEventHeader, mut buf: &mut [u8]) -> usize {
kablam!     | ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `event`
kablam!    --> src/protocol/client.rs:530:43
kablam!     |
kablam! 530 |             ProtocolMessage::ReceiveEvent(ref event) => {
kablam!     |                                           ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `get_body_mut`
kablam!    --> src/protocol/client.rs:573:5
kablam!     |
kablam! 573 |     pub fn get_body_mut(&mut self) -> Option<&mut Vec<u8>> {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `drain`
kablam!   --> src/protocol/mod.rs:59:5
kablam!    |
kablam! 59 |       pub fn drain(&mut self, num_bytes: usize) -> &[u8] {
kablam!    |  _____^ starting here...
kablam! 60 | |         let pos = self.pos;
kablam! 61 | |         let byte_count = ::std::cmp::min(num_bytes, self.len - pos);
kablam! 62 | |         self.consume(byte_count);
kablam! 63 | |         &self.bytes[pos..(pos + byte_count)]
kablam! 64 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `write`
kablam!   --> src/protocol/mod.rs:97:5
kablam!    |
kablam! 97 |       pub fn write(&mut self, message_writer: &mut MessageWriter) -> io::Result<()> {
kablam!    |  _____^ starting here...
kablam! 98 | |         message_writer.write(&mut self.io)
kablam! 99 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `need`
kablam!    --> src/protocol/mod.rs:125:41
kablam!     |
kablam! 125 |                     IResult::Incomplete(need) => {
kablam!     |                                         ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: struct is never used: `MessageWriter`
kablam!    --> src/protocol/mod.rs:200:1
kablam!     |
kablam! 200 |   pub struct MessageWriter<'a> {
kablam!     |  _^ starting here...
kablam! 201 | |     message: &'a mut ProtocolMessage,
kablam! 202 | |     body_position: usize,
kablam! 203 | |     header_written: bool,
kablam! 204 | | }
kablam!     | |_^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!    --> src/protocol/mod.rs:207:5
kablam!     |
kablam! 207 |       pub fn new(message: &'a mut ProtocolMessage) -> MessageWriter<'a> {
kablam!     |  _____^ starting here...
kablam! 208 | |         MessageWriter {
kablam! 209 | |             message: message,
kablam! 210 | |             body_position: 0,
kablam! 211 | |             header_written: false,
kablam! 212 | |         }
kablam! 213 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `write`
kablam!    --> src/protocol/mod.rs:215:5
kablam!     |
kablam! 215 |     pub fn write<T: Write>(&mut self, dest: &mut T) -> io::Result<()> {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/serializer.rs:17:23
kablam!    |
kablam! 17 |     pub fn write_bool(mut self, value: bool) -> Self {
kablam!    |                       ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 42.72 secs
boom! running `docker rm -f 6dda3f2f91e41b1be65b754fde96aa43da20ea4369b4e175db2fc2689324af2d`
blam! 6dda3f2f91e41b1be65b754fde96aa43da20ea4369b4e175db2fc2689324af2d
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! 9a43b6724190f918bb4b9388b8630554764fa46d89d9b16b886a6f3c9203e401
boom! running `docker start -a 9a43b6724190f918bb4b9388b8630554764fa46d89d9b16b886a6f3c9203e401`
kablam!    Compiling memchr v0.1.11
kablam!    Compiling tempdir v0.3.5
kablam!    Compiling url v1.4.0
kablam!    Compiling thread-id v2.0.0
kablam!    Compiling thread_local v0.2.7
kablam!    Compiling aho-corasick v0.5.3
kablam!    Compiling regex v0.1.80
kablam!    Compiling env_logger v0.3.5
kablam!    Compiling flo v0.1.0 (file:///source)
kablam! warning: unused `#[macro_use]` import
kablam!  --> tests/sync_client_tests.rs:7:1
kablam!   |
kablam! 7 | #[macro_use]
kablam!   | ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `nom::IResult`
kablam!  --> src/client/sync/client_stream.rs:5:5
kablam!   |
kablam! 5 | use nom::IResult;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: constant item is never used: `BUFFER_LENGTH`
kablam!  --> src/client/sync/client_stream.rs:9:1
kablam!   |
kablam! 9 | const BUFFER_LENGTH: usize = 8 * 1024;
kablam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `IResult`
kablam!   --> src/protocol/client.rs:13:35
kablam!    |
kablam! 13 | use nom::{be_u64, be_u32, be_u16, IResult};
kablam!    |                                   ^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Read`, `self`
kablam!   --> src/protocol/client.rs:17:15
kablam!    |
kablam! 17 | use std::io::{self, Read};
kablam!    |               ^^^^  ^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: function is never used: `serialize_produce_header`
kablam!    --> src/protocol/client.rs:470:1
kablam!     |
kablam! 470 | fn serialize_produce_header(header: &ProduceEventHeader, mut buf: &mut [u8]) -> usize {
kablam!     | ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `event`
kablam!    --> src/protocol/client.rs:530:43
kablam!     |
kablam! 530 |             ProtocolMessage::ReceiveEvent(ref event) => {
kablam!     |                                           ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `std::io::Read`
kablam!    --> src/protocol/client.rs:589:9
kablam!     |
kablam! 589 |     use std::io::Read;
kablam!     |         ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `nom::IResult`
kablam!    --> src/protocol/server.rs:119:9
kablam!     |
kablam! 119 |     use nom::IResult;
kablam!     |         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `need`
kablam!    --> src/protocol/mod.rs:125:41
kablam!     |
kablam! 125 |                     IResult::Incomplete(need) => {
kablam!     |                                         ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/serializer.rs:17:23
kablam!    |
kablam! 17 |     pub fn write_bool(mut self, value: bool) -> Self {
kablam!    |                       ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused import: `std::fmt::Display`
kablam!  --> src/client_cli/error.rs:1:5
kablam!   |
kablam! 1 | use std::fmt::Display;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Write`, `self`
kablam!  --> src/client_cli/error.rs:2:15
kablam!   |
kablam! 2 | use std::io::{self, Write};
kablam!   |               ^^^^  ^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::net::SocketAddr`
kablam!  --> src/client_cli/producer.rs:1:5
kablam!   |
kablam! 1 | use std::net::SocketAddr;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `Write`
kablam!   --> src/client_cli/consumer.rs:13:21
kablam!    |
kablam! 13 | use std::io::{self, Write};
kablam!    |                     ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: variant is never used: `Silent`
kablam!   --> src/client_cli/mod.rs:41:5
kablam!    |
kablam! 41 |     Silent,
kablam!    |     ^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!   --> src/client_cli/mod.rs:91:13
kablam!    |
kablam! 91 |             write!(stdout, "{}", message);
kablam!    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_must_use)] on by default
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: unused result which must be used
kablam!    --> src/client_cli/mod.rs:104:13
kablam!     |
kablam! 104 |             write!(stderr, "{}", message);
kablam!     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_must_use)] on by default
kablam!     = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: unused imports: `IpAddr`, `SocketAddr`, `ToSocketAddrs`
kablam!   --> src/flo_client_cli.rs:14:16
kablam!    |
kablam! 14 | use std::net::{SocketAddr, ToSocketAddrs, IpAddr};
kablam!    |                ^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `err`
kablam!    --> src/flo_client_cli.rs:152:37
kablam!     |
kablam! 152 |         value.parse::<T>().map_err(|err| {
kablam!     |                                     ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: field is never used: `slow_event_threshold`
kablam!  --> src/server/metrics.rs:8:5
kablam!   |
kablam! 8 |     slow_event_threshold: Duration,
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `total_events_saved`
kablam!  --> src/server/metrics.rs:9:5
kablam!   |
kablam! 9 |     total_events_saved: u64,
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `event_persisted`
kablam!   --> src/server/metrics.rs:24:5
kablam!    |
kablam! 24 |     pub fn event_persisted(&mut self, event_id: FloEventId, time_in_channel: Duration, storage_time: Duration) {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: constant item is never used: `NANOS_IN_MILLISECOND`
kablam!   --> src/server/metrics.rs:39:1
kablam!    |
kablam! 39 | const NANOS_IN_MILLISECOND: f64 = 1_000_000f64;
kablam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: function is never used: `as_millis`
kablam!   --> src/server/metrics.rs:41:1
kablam!    |
kablam! 41 |   fn as_millis(dur: Duration) -> f64 {
kablam!    |  _^ starting here...
kablam! 42 | |     let mul = dur.as_secs() as f64;
kablam! 43 | |
kablam! 44 | |     dur.subsec_nanos() as f64 / NANOS_IN_MILLISECOND * mul
kablam! 45 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `Instant`
kablam!  --> src/server/flo_io/client_message_stream.rs:4:17
kablam!   |
kablam! 4 | use std::time::{Instant};
kablam!   |                 ^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `self`
kablam!  --> src/server/flo_io/client_message_stream.rs:7:27
kablam!   |
kablam! 7 | use server::engine::api::{self, ClientMessage, ConnectionId};
kablam!   |                           ^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ConsumerStart`, `ProtocolMessage`
kablam!  --> src/server/flo_io/client_message_stream.rs:8:16
kablam!   |
kablam! 8 | use protocol::{ProtocolMessage, ConsumerStart, MessageStream};
kablam!   |                ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `nom::IResult`
kablam!  --> src/server/flo_io/client_message_stream.rs:9:5
kablam!   |
kablam! 9 | use nom::IResult;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Read`, `self`
kablam!   --> src/server/flo_io/client_message_stream.rs:71:19
kablam!    |
kablam! 71 |     use std::io::{self, Read, Cursor};
kablam!    |                   ^^^^  ^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `ConsumerManagerMessage`
kablam!   --> src/server/flo_io/client_message_stream.rs:74:46
kablam!    |
kablam! 74 |     use server::engine::api::{ClientMessage, ConsumerManagerMessage, ProducerManagerMessage};
kablam!    |                                              ^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `ProduceEvent`
kablam!   --> src/server/flo_io/client_message_stream.rs:75:37
kablam!    |
kablam! 75 |     use protocol::{ProtocolMessage, ProduceEvent};
kablam!    |                                     ^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ErrorKind`, `IResult`, `Needed`
kablam!   --> src/server/flo_io/client_message_stream.rs:76:15
kablam!    |
kablam! 76 |     use nom::{IResult, Needed, ErrorKind};
kablam!    |               ^^^^^^^  ^^^^^^  ^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!   --> src/server/flo_io/client_message_stream.rs:84:9
kablam!    |
kablam! 84 |         ::env_logger::init();
kablam!    |         ^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_must_use)] on by default
kablam! 
kablam! warning: unused variable: `message`
kablam!    --> src/server/flo_io/client_message_stream.rs:120:37
kablam!     |
kablam! 120 |         if let Ok(Async::Ready(Some(message))) = result {
kablam!     |                                     ^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `ClientConnect`
kablam!   --> src/server/flo_io/mod.rs:12:56
kablam!    |
kablam! 12 | use server::engine::api::{ConnectionId, ClientMessage, ClientConnect};
kablam!    |                                                        ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::io`
kablam!   --> src/server/mod.rs:18:5
kablam!    |
kablam! 18 | use std::io;
kablam!    |     ^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `engine::version_vec::VersionVector`
kablam!  --> src/engine/producer/cluster.rs:3:5
kablam!   |
kablam! 3 | use engine::version_vec::VersionVector;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `futures::sync::mpsc::UnboundedSender`
kablam!  --> src/engine/producer/cluster.rs:5:5
kablam!   |
kablam! 5 | use futures::sync::mpsc::UnboundedSender;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `event::ActorId`
kablam!    --> src/engine/producer/cluster.rs:182:9
kablam!     |
kablam! 182 |     use event::ActorId;
kablam!     |         ^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: field is never used: `metrics`
kablam!   --> src/engine/producer/mod.rs:32:5
kablam!    |
kablam! 32 |     metrics: ProducerMetrics,
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/engine/producer/mod.rs:97:13
kablam!    |
kablam! 97 |         let mut cluster_members = {
kablam!    |             ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `clients`
kablam!   --> src/engine/producer/mod.rs:98:53
kablam!    |
kablam! 98 |             let ProducerManager {ref cluster_state, ref clients, ..} = *self;
kablam!    |                                                     ^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `replicate_event`
kablam!    --> src/engine/producer/mod.rs:177:5
kablam!     |
kablam! 177 |     fn replicate_event(&mut self, connection_id: ConnectionId, event: OwnedFloEvent, message_recv_time: Instant) -> Result<(), String> {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `message_recv_time`
kablam!    --> src/engine/producer/mod.rs:177:86
kablam!     |
kablam! 177 |     fn replicate_event(&mut self, connection_id: ConnectionId, event: OwnedFloEvent, message_recv_time: Instant) -> Result<(), String> {
kablam!     |                                                                                      ^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `message_recv_time`
kablam!    --> src/engine/producer/mod.rs:189:111
kablam!     |
kablam! 189 |     fn on_peer_announce(&mut self, connection_id: ConnectionId, peer_cluster_state: ::protocol::ClusterState, message_recv_time: Instant) -> Result<(), String> {
kablam!     |                                                                                                               ^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `actor_port`
kablam!    --> src/engine/producer/mod.rs:194:49
kablam!     |
kablam! 194 |         let ::protocol::ClusterState {actor_id, actor_port, version_vector, other_members} = peer_cluster_state;
kablam!     |                                                 ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `other_members`
kablam!    --> src/engine/producer/mod.rs:194:77
kablam!     |
kablam! 194 |         let ::protocol::ClusterState {actor_id, actor_port, version_vector, other_members} = peer_cluster_state;
kablam!     |                                                                             ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: `ClusterState` is ambiguous
kablam!    --> src/engine/producer/mod.rs:362:26
kablam!     |
kablam! 266 |     use super::*;
kablam!     |         --------- `ClusterState` could also refer to the name imported here
kablam! 267 |     use engine::api::*;
kablam! 268 |     use protocol::*;
kablam!     |         ------------ `ClusterState` could refer to the name imported here
kablam! ...
kablam! 362 |         let peer_state = ClusterState {
kablam!     |                          ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(legacy_imports)] on by default
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #38260 <https://github.com/rust-lang/rust/issues/38260>
kablam! 
kablam! warning: unused import: `Instant`
kablam!    --> src/engine/producer/mod.rs:274:21
kablam!     |
kablam! 274 |     use std::time::{Instant, Duration};
kablam!     |                     ^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: method is never used: `stop_consuming`
kablam!    --> src/engine/consumer/client/mod.rs:144:5
kablam!     |
kablam! 144 |       pub fn stop_consuming(&mut self) {
kablam!     |  _____^ starting here...
kablam! 145 | |         self.new_consumer_state = ConsumerState::NotConsuming;
kablam! 146 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `limit`
kablam!   --> src/engine/consumer/mod.rs:63:85
kablam!    |
kablam! 63 |             ConsumerManagerMessage::ContinueConsuming(connection_id, last_event_id, limit) => {
kablam!    |                                                                                     ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `connection_id`
kablam!   --> src/engine/consumer/mod.rs:82:52
kablam!    |
kablam! 82 |             ConsumerManagerMessage::EventPersisted(connection_id, event) => {
kablam!    |                                                    ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `recv_time`
kablam!   --> src/engine/consumer/mod.rs:98:68
kablam!    |
kablam! 98 |     fn process_received_message(&mut self, ReceivedMessage{sender, recv_time, message}: ReceivedMessage) -> Result<(), String> {
kablam!    |                                                                    ^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!    --> src/engine/consumer/mod.rs:109:17
kablam!     |
kablam! 109 |                 self.consumers.update_consumer_position(sender, ack.event_id);
kablam!     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_must_use)] on by default
kablam! 
kablam! warning: unused import: `event::ActorId`
kablam!   --> src/engine/mod.rs:14:5
kablam!    |
kablam! 14 | use event::ActorId;
kablam!    |     ^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `IResult`
kablam!   --> src/protocol/client.rs:13:35
kablam!    |
kablam! 13 | use nom::{be_u64, be_u32, be_u16, IResult};
kablam!    |                                   ^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Read`, `self`
kablam!   --> src/protocol/client.rs:17:15
kablam!    |
kablam! 17 | use std::io::{self, Read};
kablam!    |               ^^^^  ^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: constant item is never used: `CLUSTER_STATE`
kablam!   --> src/protocol/client.rs:33:5
kablam!    |
kablam! 33 |     pub const CLUSTER_STATE: &'static [u8; 8] = b"FLO_CLS\n";
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: function is never used: `serialize_produce_header`
kablam!    --> src/protocol/client.rs:470:1
kablam!     |
kablam! 470 | fn serialize_produce_header(header: &ProduceEventHeader, mut buf: &mut [u8]) -> usize {
kablam!     | ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `event`
kablam!    --> src/protocol/client.rs:530:43
kablam!     |
kablam! 530 |             ProtocolMessage::ReceiveEvent(ref event) => {
kablam!     |                                           ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `get_body_mut`
kablam!    --> src/protocol/client.rs:573:5
kablam!     |
kablam! 573 |     pub fn get_body_mut(&mut self) -> Option<&mut Vec<u8>> {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `std::io::Read`
kablam!    --> src/protocol/client.rs:589:9
kablam!     |
kablam! 589 |     use std::io::Read;
kablam!     |         ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `nom::IResult`
kablam!    --> src/protocol/server.rs:119:9
kablam!     |
kablam! 119 |     use nom::IResult;
kablam!     |         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: method is never used: `drain`
kablam!   --> src/protocol/mod.rs:59:5
kablam!    |
kablam! 59 |       pub fn drain(&mut self, num_bytes: usize) -> &[u8] {
kablam!    |  _____^ starting here...
kablam! 60 | |         let pos = self.pos;
kablam! 61 | |         let byte_count = ::std::cmp::min(num_bytes, self.len - pos);
kablam! 62 | |         self.consume(byte_count);
kablam! 63 | |         &self.bytes[pos..(pos + byte_count)]
kablam! 64 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `write`
kablam!   --> src/protocol/mod.rs:97:5
kablam!    |
kablam! 97 |       pub fn write(&mut self, message_writer: &mut MessageWriter) -> io::Result<()> {
kablam!    |  _____^ starting here...
kablam! 98 | |         message_writer.write(&mut self.io)
kablam! 99 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `need`
kablam!    --> src/protocol/mod.rs:125:41
kablam!     |
kablam! 125 |                     IResult::Incomplete(need) => {
kablam!     |                                         ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: struct is never used: `MessageWriter`
kablam!    --> src/protocol/mod.rs:200:1
kablam!     |
kablam! 200 |   pub struct MessageWriter<'a> {
kablam!     |  _^ starting here...
kablam! 201 | |     message: &'a mut ProtocolMessage,
kablam! 202 | |     body_position: usize,
kablam! 203 | |     header_written: bool,
kablam! 204 | | }
kablam!     | |_^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!    --> src/protocol/mod.rs:207:5
kablam!     |
kablam! 207 |       pub fn new(message: &'a mut ProtocolMessage) -> MessageWriter<'a> {
kablam!     |  _____^ starting here...
kablam! 208 | |         MessageWriter {
kablam! 209 | |             message: message,
kablam! 210 | |             body_position: 0,
kablam! 211 | |             header_written: false,
kablam! 212 | |         }
kablam! 213 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `write`
kablam!    --> src/protocol/mod.rs:215:5
kablam!     |
kablam! 215 |     pub fn write<T: Write>(&mut self, dest: &mut T) -> io::Result<()> {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/serializer.rs:17:23
kablam!    |
kablam! 17 |     pub fn write_bool(mut self, value: bool) -> Self {
kablam!    |                       ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 40.47 secs
boom! running `docker rm -f 9a43b6724190f918bb4b9388b8630554764fa46d89d9b16b886a6f3c9203e401`
blam! 9a43b6724190f918bb4b9388b8630554764fa46d89d9b16b886a6f3c9203e401
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! c2b31f2697cb5d110398e68f4ffd4e6e59a177c37825b527bd778724d7771f1f
boom! running `docker start -a c2b31f2697cb5d110398e68f4ffd4e6e59a177c37825b527bd778724d7771f1f`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/flo-966110e56ee9532d
blam! 
blam! running 85 tests
blam! test engine::consumer::client::namespace::test::double_star_matches_any_number_of_subdirectories ... ok
blam! test engine::consumer::client::namespace::test::does_not_match_when_glob_pattern_contains_no_stars ... ok
blam! test engine::consumer::client::namespace::test::matches_the_same_namespace ... ok
blam! test engine::consumer::client::namespace::test::invalid_glob_syntax_returns_an_error ... ok
blam! test engine::consumer::client::namespace::test::test_globbing_in_subdirectories ... ok
blam! test engine::consumer::client::namespace::test::slash_start_pattern_matches_all_top_level_namespaces ... ok
blam! test engine::consumer::client::test::consume_from_namespace_returns_error_when_client_has_been_previously_upgraded_to_peer ... ok
blam! test engine::consumer::client::test::continue_consuming_returns_none_when_client_has_been_sent_number_limit_of_events ... ok
blam! test engine::consumer::client::test::consumer_returns_to_not_consuming_state_when_event_limit_is_reached ... ok
blam! test engine::consumer::client::test::continue_consuming_returns_none_when_client_has_not_started_consuming ... ok
blam! test engine::consumer::client::test::send_event_returns_error_when_client_is_in_initial_state ... ok
blam! test engine::consumer::client::test::send_event_returns_err_when_event_id_is_less_than_or_equal_to_the_one_in_the_version_vector_for_that_actor ... ok
blam! test engine::consumer::client::test::send_event_updates_the_version_vector ... ok
blam! test engine::consumer::client::test::should_send_event_returns_false_when_client_has_not_started_consuming ... ok
blam! test engine::consumer::client::test::should_send_event_returns_false_when_event_id_is_less_than_or_equal_to_the_id_in_the_version_vec ... ok
blam! test engine::consumer::client::test::should_send_event_returns_false_when_namespace_does_not_match ... ok
blam! test engine::consumer::client::test::should_send_event_returns_true_if_namespace_matches_for_normal_consumer_and_event_id_is_greater_than_version_vec ... ok
blam! test engine::consumer::client::test::should_send_event_returns_true_when_client_is_a_peer_and_event_is_greater_than_version_vector ... ok
blam! test engine::consumer::client::test::start_peer_replication_returns_error_when_client_has_already_started_consuming ... ok
blam! test engine::consumer::client::test::should_send_event_returns_true_when_event_id_is_greater_than_the_one_in_version_vec ... ok
blam! test engine::consumer::test::client_is_sent_all_events_greater_than_those_in_version_map_after_upgrading_to_peer ... ok
blam! test engine::event_store::fs::test::event_header_is_read ... ok
blam! test engine::event_store::fs::test::event_size_on_disk_is_computed_correctly ... ok
blam! test engine::event_store::fs::test::event_is_serialized_and_deserialized ... ok
blam! test engine::event_store::index::index_test::adding_an_entry_returns_removed_entry_when_total_entries_exceeds_max ... ok
blam! test engine::event_store::index::index_test::get_next_entry_returns_first_entry_when_start_id_is_zero ... ok
blam! test engine::event_store::index::index_test::index_tracks_max_actor_id ... ok
blam! test engine::event_store::index::index_test::version_vector_is_kept_up_to_date ... ok
blam! test engine::producer::cluster::test::attempt_connections_does_not_return_addresses_that_are_in_process_of_attempting_connection ... ok
blam! test engine::producer::cluster::test::attempt_connections_returns_addresses_of_peers_that_are_disconnected ... ok
blam! test engine::producer::cluster::test::disconnected_peer_reconnect_interval_increases_with_connection_attempts ... ok
blam! test engine::event_store::fs::test::events_are_stored_and_read_starting_in_the_middle_with_fresh_directory ... ok
blam! test engine::producer::cluster::test::peer_connected_creates_new_connected_peer_if_one_does_not_exist_in_map ... ok
blam! test engine::producer::cluster::test::peer_message_received_sets_the_actor_id_of_a_peer ... ok
blam! test engine::producer::cluster::test::peer_should_attempt_connection_has_an_incremental_backoff ... ok
blam! test engine::producer::cluster::test::peer_should_attempt_connection_returns_true_for_first_attempt ... ok
blam! test engine::producer::test::when_client_produces_event_it_is_written_and_consumer_manager_is_notified ... ok
blam! test engine::producer::test::when_client_produces_event_then_version_vec_is_updated ... ok
blam! test engine::producer::test::when_client_upgrades_to_peer_then_version_vector_is_sent_to_client ... ok
blam! test engine::event_store::fs::test::events_are_stored_and_read_with_fresh_directory ... ok
blam! test engine::version_vec::test::empty_version_vector_is_converted_to_and_from_vector ... ok
blam! test engine::producer::test::when_peer_sends_event_delta_then_events_are_persisted_and_version_vector_is_updated ... ok
blam! test engine::version_vec::test::empty_version_vector_returns_0_when_get_is_called_for_any_actor_id ... ok
blam! test engine::version_vec::test::from_vec_returns_error_when_there_are_multiple_entries_for_the_same_actor ... ok
blam! test engine::version_vec::test::min_returns_the_smallest_value_in_the_version_vector ... ok
blam! test engine::version_vec::test::snapshot_returns_vec_of_event_ids ... ok
blam! test engine::version_vec::test::update_if_greater_updates_the_counter_when_it_is_greater_than_the_existing_one ... ok
blam! test engine::version_vec::test::min_returns_zero_when_the_version_vector_is_empty ... ok
blam! test engine::version_vec::test::update_sets_event_counter_for_actor_when_actor_did_not_already_exist ... ok
blam! test engine::version_vec::test::vec_of_event_ids_is_converted_to_version_vector ... ok
blam! test engine::version_vec::test::update_returns_error_when_new_event_counter_is_less_than_existing_counter ... ok
blam! test event::event_id_test::flo_event_id_is_parsed_from_25_digit_string ... ok
blam! test engine::producer::cluster::test::peer_connected_moves_disconnected_peer_to_connected_peer ... ok
blam! test logging::test::invalid_log_options_return_err_when_creating_from_str ... ok
blam! test logging::test::log_option_is_created_from_str_with_valid_log_level ... ok
blam! test event::event_id_test::flo_event_id_is_displayed_as_string ... ok
blam! test protocol::client::test::acknowledge_event_message_is_parsed ... ok
blam! test protocol::client::test::awaiting_events_message_is_serialized_and_parsed ... ok
blam! test protocol::client::test::error_message_is_parsed ... ok
blam! test engine::event_store::fs::test::storage_engine_initialized_from_preexisting_events ... ok
blam! test protocol::client::test::parse_client_auth_returns_error_result_when_namespace_contains_invalid_utf_characters ... ok
blam! test protocol::client::test::parse_client_auth_parses_valid_header_with_no_remaining_bytes ... ok
blam! test protocol::client::test::parse_client_auth_returns_incomplete_result_when_password_is_missing ... ok
blam! test protocol::client::test::event_marker_update_is_parsed ... ok
blam! test protocol::client::test::parse_producer_event_parses_the_header_but_not_the_data ... ok
blam! test protocol::client::test::parse_string_returns_empty_string_when_first_byte_is_a_newline ... ok
blam! test protocol::client::test::parse_string_returns_string_with_given_length ... ok
blam! test protocol::client::test::start_consuming_message_is_parsed ... ok
blam! test protocol::client::test::peer_announce_is_parsed ... ok
blam! test protocol::client::test::peer_update_is_parsed ... ok
blam! test protocol::server::test::event_ack_is_serialized_and_deserialized ... ok
blam! test protocol::server::test::error_message_is_serialized_and_deserialized ... ok
blam! test protocol::server::test::event_is_written_in_multiple_passes ... ok
blam! test serializer::test::multiple_values_are_written_in_sequence ... ok
blam! test protocol::server::test::event_is_written_in_one_pass ... ok
blam! test protocol::server::test::event_is_serialized_and_deserialized_as_header_and_data ... ok
blam! test serializer::test::newline_terminated_string_is_written ... ok
blam! test serializer::test::u16_is_written ... ok
blam! test serializer::test::raw_bytes_are_written ... ok
blam! test serializer::test::u32_is_written ... ok
blam! test serializer::test::u64_is_written ... ok
blam! test serializer::test::u8_is_written ... ok
blam! test time::test::timestamp_is_converted_from_u64_and_back ... ok
blam! test time::test::millis_since_epoch_panics_if_timestamp_is_prior_to_unix_epoch ... ok
blam! test server::flo_io::client_message_stream::test::multiple_events_are_read_in_sequence ... ok
blam! 
blam! test result: ok. 85 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/flo_client-ed6bd496f9328735
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/flo_sync_client-c65db43c7c5ddcaa
blam! 
blam! running 29 tests
blam! test event::event_id_test::flo_event_id_is_displayed_as_string ... ok
blam! test event::event_id_test::flo_event_id_is_parsed_from_25_digit_string ... ok
blam! test protocol::client::test::acknowledge_event_message_is_parsed ... ok
blam! test protocol::client::test::awaiting_events_message_is_serialized_and_parsed ... ok
blam! test protocol::client::test::error_message_is_parsed ... ok
blam! test protocol::client::test::event_marker_update_is_parsed ... ok
blam! test protocol::client::test::parse_client_auth_returns_error_result_when_namespace_contains_invalid_utf_characters ... ok
blam! test protocol::client::test::parse_client_auth_parses_valid_header_with_no_remaining_bytes ... ok
blam! test protocol::client::test::parse_client_auth_returns_incomplete_result_when_password_is_missing ... ok
blam! test protocol::client::test::parse_producer_event_parses_the_header_but_not_the_data ... ok
blam! test protocol::client::test::parse_string_returns_empty_string_when_first_byte_is_a_newline ... ok
blam! test protocol::client::test::start_consuming_message_is_parsed ... ok
blam! test protocol::client::test::peer_announce_is_parsed ... ok
blam! test protocol::client::test::parse_string_returns_string_with_given_length ... ok
blam! test protocol::client::test::peer_update_is_parsed ... ok
blam! test protocol::server::test::error_message_is_serialized_and_deserialized ... ok
blam! test protocol::server::test::event_is_serialized_and_deserialized_as_header_and_data ... ok
blam! test serializer::test::multiple_values_are_written_in_sequence ... ok
blam! test serializer::test::newline_terminated_string_is_written ... ok
blam! test protocol::server::test::event_ack_is_serialized_and_deserialized ... ok
blam! test serializer::test::raw_bytes_are_written ... ok
blam! test protocol::server::test::event_is_written_in_multiple_passes ... ok
blam! test protocol::server::test::event_is_written_in_one_pass ... ok
blam! test serializer::test::u16_is_written ... ok
blam! test serializer::test::u32_is_written ... ok
blam! test serializer::test::u8_is_written ... ok
blam! test time::test::timestamp_is_converted_from_u64_and_back ... ok
blam! test serializer::test::u64_is_written ... ok
blam! test time::test::millis_since_epoch_panics_if_timestamp_is_prior_to_unix_epoch ... ok
blam! 
blam! test result: ok. 29 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/sync_client_tests-8addca971dce2450
blam! 
blam! running 9 tests
blam! test consumer_only_receives_events_with_exactly_matching_namespace ... FAILED
blam! test consumer_receives_error_after_starting_to_consume_with_invalid_namespace ... FAILED
blam! test clients_can_connect_and_disconnect_multiple_times_without_making_the_server_barf ... FAILED
blam! test consumer_reads_events_matching_glob_pattern ... FAILED
blam! test consumer_responds_to_event ... FAILED
blam! test event_is_written_using_sync_connection ... FAILED
blam! test events_are_consumed_as_they_are_written ... FAILED
blam! test consumer_transitions_from_reading_events_from_disk_to_reading_from_memory ... FAILED
blam! test many_events_are_produced_using_sync_client ... FAILED
blam! 
blam! failures:
blam! 
blam! ---- consumer_only_receives_events_with_exactly_matching_namespace stdout ----
blam! 	Starting flo server
blam! thread 'consumer_only_receives_events_with_exactly_matching_namespace' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! ---- consumer_receives_error_after_starting_to_consume_with_invalid_namespace stdout ----
blam! 	Starting flo server
blam! thread 'consumer_receives_error_after_starting_to_consume_with_invalid_namespace' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! ---- clients_can_connect_and_disconnect_multiple_times_without_making_the_server_barf stdout ----
blam! 	Starting flo server
blam! thread 'clients_can_connect_and_disconnect_multiple_times_without_making_the_server_barf' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! ---- consumer_reads_events_matching_glob_pattern stdout ----
blam! 	Starting flo server
blam! thread 'consumer_reads_events_matching_glob_pattern' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! ---- consumer_responds_to_event stdout ----
blam! 	Starting flo server
blam! thread 'consumer_responds_to_event' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! ---- event_is_written_using_sync_connection stdout ----
blam! 	Starting flo server
blam! thread 'event_is_written_using_sync_connection' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! ---- events_are_consumed_as_they_are_written stdout ----
blam! 	Starting flo server
blam! thread 'events_are_consumed_as_they_are_written' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! ---- consumer_transitions_from_reading_events_from_disk_to_reading_from_memory stdout ----
blam! 	Starting flo server
blam! thread 'consumer_transitions_from_reading_events_from_disk_to_reading_from_memory' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! ---- many_events_are_produced_using_sync_client stdout ----
blam! 	Starting flo server
blam! thread 'many_events_are_produced_using_sync_client' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 2, message: "No such file or directory" } }', /checkout/src/libcore/result.rs:860
blam! 
blam! 
blam! failures:
blam!     clients_can_connect_and_disconnect_multiple_times_without_making_the_server_barf
blam!     consumer_only_receives_events_with_exactly_matching_namespace
blam!     consumer_reads_events_matching_glob_pattern
blam!     consumer_receives_error_after_starting_to_consume_with_invalid_namespace
blam!     consumer_responds_to_event
blam!     consumer_transitions_from_reading_events_from_disk_to_reading_from_memory
blam!     event_is_written_using_sync_connection
blam!     events_are_consumed_as_they_are_written
blam!     many_events_are_produced_using_sync_client
blam! 
blam! test result: FAILED. 0 passed; 9 failed; 0 ignored; 0 measured
blam! 
kablam! error: test failed
boom! running `docker rm -f c2b31f2697cb5d110398e68f4ffd4e6e59a177c37825b527bd778724d7771f1f`
blam! c2b31f2697cb5d110398e68f4ffd4e6e59a177c37825b527bd778724d7771f1f
