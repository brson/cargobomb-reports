boom! testing climatempo-0.1.0 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 77328741d7d16120f419301d3936e67cffcfe4f81b04b14bead60534bd172870
boom! running `docker start -a 77328741d7d16120f419301d3936e67cffcfe4f81b04b14bead60534bd172870`
kablam!    Compiling climatempo v0.1.0 (file:///source)
kablam! warning: unused result which must be used
kablam!   --> src/lib.rs:70:9
kablam!    |
kablam! 70 |         res.read_to_string(&mut html_string);
kablam!    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_must_use)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 2.99 secs
boom! running `docker rm -f 77328741d7d16120f419301d3936e67cffcfe4f81b04b14bead60534bd172870`
blam! 77328741d7d16120f419301d3936e67cffcfe4f81b04b14bead60534bd172870
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! 4555cd0ea6a2006ba73539910ed24371a5195b1bbef13e02bac77537ae94b11e
boom! running `docker start -a 4555cd0ea6a2006ba73539910ed24371a5195b1bbef13e02bac77537ae94b11e`
kablam!    Compiling climatempo v0.1.0 (file:///source)
kablam! warning: unused result which must be used
kablam!   --> src/lib.rs:70:9
kablam!    |
kablam! 70 |         res.read_to_string(&mut html_string);
kablam!    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_must_use)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 4.10 secs
boom! running `docker rm -f 4555cd0ea6a2006ba73539910ed24371a5195b1bbef13e02bac77537ae94b11e`
blam! 4555cd0ea6a2006ba73539910ed24371a5195b1bbef13e02bac77537ae94b11e
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! b787dd0dcca81d10f69bfdde39ebbb3221a9e6708fd0c80d2a068dea4a98ed2d
boom! running `docker start -a b787dd0dcca81d10f69bfdde39ebbb3221a9e6708fd0c80d2a068dea4a98ed2d`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.10 secs
kablam!      Running /target/debug/deps/climatempo-4da164a0eb266e65
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests climatempo
blam! 
blam! running 2 tests
blam! test src/lib.rs - scraper (line 14) ... FAILED
blam! test src/lib.rs - scraper (line 6) ... ok
blam! 
blam! failures:
blam! 
blam! ---- src/lib.rs - scraper (line 14) stdout ----
blam! 	error[E0277]: the trait bound `std::option::Option<i32>: std::fmt::Display` is not satisfied
blam!  --> <anon>:8:38
blam!   |
blam! 8 |   println!("Temperature: {} Celsius",city.temperature());
blam!   |                                      ^^^^^^^^^^^^^^^^^^ the trait `std::fmt::Display` is not implemented for `std::option::Option<i32>`
blam!   |
blam!   = note: `std::option::Option<i32>` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string
blam!   = note: required by `std::fmt::Display::fmt`
blam! 
blam! error[E0277]: the trait bound `std::option::Option<i32>: std::fmt::Display` is not satisfied
blam!  --> <anon>:9:28
blam!   |
blam! 9 |   println!("Humidity: {}%",city.humidity());
blam!   |                            ^^^^^^^^^^^^^^^ the trait `std::fmt::Display` is not implemented for `std::option::Option<i32>`
blam!   |
blam!   = note: `std::option::Option<i32>` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string
blam!   = note: required by `std::fmt::Display::fmt`
blam! 
blam! error[E0277]: the trait bound `std::option::Option<i32>: std::fmt::Display` is not satisfied
blam!   --> <anon>:10:31
blam!    |
blam! 10 |   println!("Pressure: {} hPa",city.pressure());
blam!    |                               ^^^^^^^^^^^^^^^ the trait `std::fmt::Display` is not implemented for `std::option::Option<i32>`
blam!    |
blam!    = note: `std::option::Option<i32>` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string
blam!    = note: required by `std::fmt::Display::fmt`
blam! 
blam! error[E0277]: the trait bound `std::option::Option<i32>: std::fmt::Display` is not satisfied
blam!   --> <anon>:11:28
blam!    |
blam! 11 |   println!("Wind: {} km/h",city.wind());
blam!    |                            ^^^^^^^^^^^ the trait `std::fmt::Display` is not implemented for `std::option::Option<i32>`
blam!    |
blam!    = note: `std::option::Option<i32>` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string
blam!    = note: required by `std::fmt::Display::fmt`
blam! 
blam! error: aborting due to previous error(s)
blam! 
blam! thread 'rustc' panicked at 'Box<Any>', /checkout/src/librustc/session/mod.rs:203
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! 
blam! failures:
blam!     src/lib.rs - scraper (line 14)
blam! 
blam! test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured
blam! 
kablam! error: test failed
boom! running `docker rm -f b787dd0dcca81d10f69bfdde39ebbb3221a9e6708fd0c80d2a068dea4a98ed2d`
blam! b787dd0dcca81d10f69bfdde39ebbb3221a9e6708fd0c80d2a068dea4a98ed2d
