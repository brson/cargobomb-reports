boom! testing cuda_dnn-0.1.1 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 933d4771715dfe1b1d05e73018a220171a38d133cde4450c1bd6fbeed03d3317
boom! running `docker start -a 933d4771715dfe1b1d05e73018a220171a38d133cde4450c1bd6fbeed03d3317`
kablam!    Compiling float v0.1.1
kablam!    Compiling cuda_dnn v0.1.1 (file:///source)
kablam! warning: field is never used: `s_width`
kablam!   --> src/v5/mod.rs:82:3
kablam!    |
kablam! 82 |   s_width:      usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_height`
kablam!   --> src/v5/mod.rs:83:3
kablam!    |
kablam! 83 |   s_height:     usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_channels`
kablam!   --> src/v5/mod.rs:84:3
kablam!    |
kablam! 84 |   s_channels:   usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_batch_size`
kablam!   --> src/v5/mod.rs:85:3
kablam!    |
kablam! 85 |   s_batch_size: usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `width`
kablam!    --> src/v5/mod.rs:225:3
kablam!     |
kablam! 225 |   width:        usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `height`
kablam!    --> src/v5/mod.rs:226:3
kablam!     |
kablam! 226 |   height:       usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `in_channels`
kablam!    --> src/v5/mod.rs:227:3
kablam!     |
kablam! 227 |   in_channels:  usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `out_channels`
kablam!    --> src/v5/mod.rs:228:3
kablam!     |
kablam! 228 |   out_channels: usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `stride_w`
kablam!    --> src/v5/mod.rs:267:3
kablam!     |
kablam! 267 |   stride_w: usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `stride_h`
kablam!    --> src/v5/mod.rs:268:3
kablam!     |
kablam! 268 |   stride_h: usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `pad_w`
kablam!    --> src/v5/mod.rs:269:3
kablam!     |
kablam! 269 |   pad_w:    usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `pad_h`
kablam!    --> src/v5/mod.rs:270:3
kablam!     |
kablam! 270 |   pad_h:    usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:323:25
kablam!     |
kablam! 323 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, filter_desc: CudnnFilterDesc<f32>, conv_desc: CudnnConvDesc, mut dst_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvFwdOp> {
kablam!     |                         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:323:122
kablam!     |
kablam! 323 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, filter_desc: CudnnFilterDesc<f32>, conv_desc: CudnnConvDesc, mut dst_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvFwdOp> {
kablam!     |                                                                                                                          ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:326:9
kablam!     |
kablam! 326 |     let status = unsafe { cudnnFindConvolutionForwardAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:417:18
kablam!     |
kablam! 417 |     let status = unsafe { cudnnConvolutionForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:457:25
kablam!     |
kablam! 457 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, grad_filter_desc: CudnnFilterDesc<f32>, grad_bias_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdFilterOp> {
kablam!     |                         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:457:61
kablam!     |
kablam! 457 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, grad_filter_desc: CudnnFilterDesc<f32>, grad_bias_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdFilterOp> {
kablam!     |                                                             ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:460:9
kablam!     |
kablam! 460 |     let status = unsafe { cudnnFindConvolutionBackwardFilterAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:509:9
kablam!     |
kablam! 509 |     let mut status = cudnnStatus_t::Success;
kablam!     |         ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:547:18
kablam!     |
kablam! 547 |     let status = unsafe { cudnnConvolutionBackwardFilter(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:568:18
kablam!     |
kablam! 568 |       let status = unsafe { cudnnConvolutionBackwardBias(
kablam!     |  __________________^ starting here...
kablam! 569 | |         handle.ptr,
kablam! 570 | |         &alpha as *const f32 as *const c_void,
kablam! 571 | |         self.diff_desc.ptr,
kablam! 572 | |         out_delta as *const c_void,
kablam! 573 | |         &beta as *const f32 as *const c_void,
kablam! 574 | |         self.grad_bias_desc.ptr,
kablam! 575 | |         grad_bias_accum as *mut c_void,
kablam! 576 | |     ) };
kablam!     | |_______^ ...ending here: unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:601:60
kablam!     |
kablam! 601 |   pub fn create_fastest(filter_desc: CudnnFilterDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, mut grad_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdDataOp> {
kablam!     |                                                            ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:601:123
kablam!     |
kablam! 601 |   pub fn create_fastest(filter_desc: CudnnFilterDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, mut grad_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdDataOp> {
kablam!     |                                                                                                                           ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:604:9
kablam!     |
kablam! 604 |     let status = unsafe { cudnnFindConvolutionBackwardDataAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:652:9
kablam!     |
kablam! 652 |     let mut status = cudnnStatus_t::Success;
kablam!     |         ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:689:18
kablam!     |
kablam! 689 |     let status = unsafe { cudnnConvolutionBackwardData(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:755:18
kablam!     |
kablam! 755 |       let status = unsafe { cudnnAddTensor(
kablam!     |  __________________^ starting here...
kablam! 756 | |         handle.ptr,
kablam! 757 | |         &alpha as *const f32 as *const c_void,
kablam! 758 | |         self.bias_desc.ptr,
kablam! 759 | |         bias as *const c_void,
kablam! 760 | |         &beta as *const f32 as *const c_void,
kablam! 761 | |         self.src_dst_desc.ptr,
kablam! 762 | |         src_dst as *mut c_void,
kablam! 763 | |     ) };
kablam!     | |_______^ ...ending here: unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:809:18
kablam!     |
kablam! 809 |     let status = unsafe { cudnnActivationForward_v3(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:825:18
kablam!     |
kablam! 825 |     let status = unsafe { cudnnActivationBackward_v3(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:870:18
kablam!     |
kablam! 870 |     let status = unsafe { cudnnSoftmaxForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:967:18
kablam!     |
kablam! 967 |     let status = unsafe { cudnnPoolingForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:983:18
kablam!     |
kablam! 983 |     let status = unsafe { cudnnPoolingBackward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1015:18
kablam!      |
kablam! 1015 |       let status = unsafe { cudnnTransformTensor(
kablam!      |  __________________^ starting here...
kablam! 1016 | |         handle.ptr,
kablam! 1017 | |         &alpha as *const f32 as *const c_void,
kablam! 1018 | |         self.src_desc.ptr,
kablam! 1019 | |         src_data as *const c_void,
kablam! 1020 | |         &beta as *const f32 as *const c_void,
kablam! 1021 | |         self.dst_desc.ptr,
kablam! 1022 | |         dst_data as *mut c_void,
kablam! 1023 | |     ) };
kablam!      | |_______^ ...ending here: unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1084:18
kablam!      |
kablam! 1084 |     let status = unsafe { cudnnBatchNormalizationForwardInference(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1121:18
kablam!      |
kablam! 1121 |     let status = unsafe { cudnnBatchNormalizationForwardTraining(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1162:18
kablam!      |
kablam! 1162 |     let status = unsafe { cudnnBatchNormalizationBackward(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 1.3 secs
boom! running `docker rm -f 933d4771715dfe1b1d05e73018a220171a38d133cde4450c1bd6fbeed03d3317`
blam! 933d4771715dfe1b1d05e73018a220171a38d133cde4450c1bd6fbeed03d3317
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! b9eb36575340bd13732085a21ce54a7a6f71fe1303f08878a89ca0f501df2279
boom! running `docker start -a b9eb36575340bd13732085a21ce54a7a6f71fe1303f08878a89ca0f501df2279`
kablam!    Compiling cuda_dnn v0.1.1 (file:///source)
kablam! warning: field is never used: `s_width`
kablam!   --> src/v5/mod.rs:82:3
kablam!    |
kablam! 82 |   s_width:      usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_height`
kablam!   --> src/v5/mod.rs:83:3
kablam!    |
kablam! 83 |   s_height:     usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_channels`
kablam!   --> src/v5/mod.rs:84:3
kablam!    |
kablam! 84 |   s_channels:   usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_batch_size`
kablam!   --> src/v5/mod.rs:85:3
kablam!    |
kablam! 85 |   s_batch_size: usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `width`
kablam!    --> src/v5/mod.rs:225:3
kablam!     |
kablam! 225 |   width:        usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `height`
kablam!    --> src/v5/mod.rs:226:3
kablam!     |
kablam! 226 |   height:       usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `in_channels`
kablam!    --> src/v5/mod.rs:227:3
kablam!     |
kablam! 227 |   in_channels:  usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `out_channels`
kablam!    --> src/v5/mod.rs:228:3
kablam!     |
kablam! 228 |   out_channels: usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `stride_w`
kablam!    --> src/v5/mod.rs:267:3
kablam!     |
kablam! 267 |   stride_w: usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `stride_h`
kablam!    --> src/v5/mod.rs:268:3
kablam!     |
kablam! 268 |   stride_h: usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `pad_w`
kablam!    --> src/v5/mod.rs:269:3
kablam!     |
kablam! 269 |   pad_w:    usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `pad_h`
kablam!    --> src/v5/mod.rs:270:3
kablam!     |
kablam! 270 |   pad_h:    usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:323:25
kablam!     |
kablam! 323 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, filter_desc: CudnnFilterDesc<f32>, conv_desc: CudnnConvDesc, mut dst_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvFwdOp> {
kablam!     |                         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:323:122
kablam!     |
kablam! 323 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, filter_desc: CudnnFilterDesc<f32>, conv_desc: CudnnConvDesc, mut dst_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvFwdOp> {
kablam!     |                                                                                                                          ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:326:9
kablam!     |
kablam! 326 |     let status = unsafe { cudnnFindConvolutionForwardAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:417:18
kablam!     |
kablam! 417 |     let status = unsafe { cudnnConvolutionForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:457:25
kablam!     |
kablam! 457 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, grad_filter_desc: CudnnFilterDesc<f32>, grad_bias_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdFilterOp> {
kablam!     |                         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:457:61
kablam!     |
kablam! 457 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, grad_filter_desc: CudnnFilterDesc<f32>, grad_bias_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdFilterOp> {
kablam!     |                                                             ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:460:9
kablam!     |
kablam! 460 |     let status = unsafe { cudnnFindConvolutionBackwardFilterAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:509:9
kablam!     |
kablam! 509 |     let mut status = cudnnStatus_t::Success;
kablam!     |         ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:547:18
kablam!     |
kablam! 547 |     let status = unsafe { cudnnConvolutionBackwardFilter(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:568:18
kablam!     |
kablam! 568 |       let status = unsafe { cudnnConvolutionBackwardBias(
kablam!     |  __________________^ starting here...
kablam! 569 | |         handle.ptr,
kablam! 570 | |         &alpha as *const f32 as *const c_void,
kablam! 571 | |         self.diff_desc.ptr,
kablam! 572 | |         out_delta as *const c_void,
kablam! 573 | |         &beta as *const f32 as *const c_void,
kablam! 574 | |         self.grad_bias_desc.ptr,
kablam! 575 | |         grad_bias_accum as *mut c_void,
kablam! 576 | |     ) };
kablam!     | |_______^ ...ending here: unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:601:60
kablam!     |
kablam! 601 |   pub fn create_fastest(filter_desc: CudnnFilterDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, mut grad_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdDataOp> {
kablam!     |                                                            ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:601:123
kablam!     |
kablam! 601 |   pub fn create_fastest(filter_desc: CudnnFilterDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, mut grad_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdDataOp> {
kablam!     |                                                                                                                           ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:604:9
kablam!     |
kablam! 604 |     let status = unsafe { cudnnFindConvolutionBackwardDataAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:652:9
kablam!     |
kablam! 652 |     let mut status = cudnnStatus_t::Success;
kablam!     |         ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:689:18
kablam!     |
kablam! 689 |     let status = unsafe { cudnnConvolutionBackwardData(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:755:18
kablam!     |
kablam! 755 |       let status = unsafe { cudnnAddTensor(
kablam!     |  __________________^ starting here...
kablam! 756 | |         handle.ptr,
kablam! 757 | |         &alpha as *const f32 as *const c_void,
kablam! 758 | |         self.bias_desc.ptr,
kablam! 759 | |         bias as *const c_void,
kablam! 760 | |         &beta as *const f32 as *const c_void,
kablam! 761 | |         self.src_dst_desc.ptr,
kablam! 762 | |         src_dst as *mut c_void,
kablam! 763 | |     ) };
kablam!     | |_______^ ...ending here: unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:809:18
kablam!     |
kablam! 809 |     let status = unsafe { cudnnActivationForward_v3(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:825:18
kablam!     |
kablam! 825 |     let status = unsafe { cudnnActivationBackward_v3(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:870:18
kablam!     |
kablam! 870 |     let status = unsafe { cudnnSoftmaxForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:967:18
kablam!     |
kablam! 967 |     let status = unsafe { cudnnPoolingForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:983:18
kablam!     |
kablam! 983 |     let status = unsafe { cudnnPoolingBackward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1015:18
kablam!      |
kablam! 1015 |       let status = unsafe { cudnnTransformTensor(
kablam!      |  __________________^ starting here...
kablam! 1016 | |         handle.ptr,
kablam! 1017 | |         &alpha as *const f32 as *const c_void,
kablam! 1018 | |         self.src_desc.ptr,
kablam! 1019 | |         src_data as *const c_void,
kablam! 1020 | |         &beta as *const f32 as *const c_void,
kablam! 1021 | |         self.dst_desc.ptr,
kablam! 1022 | |         dst_data as *mut c_void,
kablam! 1023 | |     ) };
kablam!      | |_______^ ...ending here: unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1084:18
kablam!      |
kablam! 1084 |     let status = unsafe { cudnnBatchNormalizationForwardInference(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1121:18
kablam!      |
kablam! 1121 |     let status = unsafe { cudnnBatchNormalizationForwardTraining(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1162:18
kablam!      |
kablam! 1162 |     let status = unsafe { cudnnBatchNormalizationBackward(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! error: linking with `cc` failed: exit code: 1
kablam!   |
kablam!   = note: "cc" "-Wl,--as-needed" "-Wl,-z,noexecstack" "-m64" "-L" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib" "/target/debug/deps/cuda_dnn-a867937757989bc6.0.o" "-o" "/target/debug/deps/cuda_dnn-a867937757989bc6" "-Wl,--gc-sections" "-pie" "-nodefaultlibs" "-L" "/target/debug/deps" "-L" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib" "-Wl,-Bstatic" "-Wl,-Bdynamic" "-l" "cudnn" "/target/debug/deps/libcuda-f7db31a0c355cc46.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libtest-6c35a477e7bec8d3.rlib" "/target/debug/deps/liblibc-5dc7b85e748840b4.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libgetopts-a80f7c589731de53.rlib" "/target/debug/deps/libfloat-cdfc256a65855475.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libterm-fa872424129019f5.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-f4594d3e53dcb114.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libpanic_unwind-a0157c0ca919c364.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libunwind-488b4ab4bd53a138.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/librand-1efbcfd8938372b6.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcollections-532a3dbf317eff86.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc-ca07b617414dd0fa.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc_jemalloc-492d8ea7fa3384ff.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liblibc-88c194c15fdb6521.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd_unicode-cfbd6648f7db2ee5.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-687e6a964d22cbb4.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcompiler_builtins-987729be881d4d32.rlib" "-l" "cudart" "-l" "util" "-l" "dl" "-l" "rt" "-l" "pthread" "-l" "gcc_s" "-l" "pthread" "-l" "c" "-l" "m" "-l" "rt" "-l" "util"
kablam!   = note: /usr/bin/ld: cannot find -lcudnn
kablam!           /usr/bin/ld: cannot find -lcudart
kablam!           collect2: error: ld returned 1 exit status
kablam!           
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `cuda_dnn`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f b9eb36575340bd13732085a21ce54a7a6f71fe1303f08878a89ca0f501df2279`
blam! b9eb36575340bd13732085a21ce54a7a6f71fe1303f08878a89ca0f501df2279
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! ba2eab8d0a5d4969771369af5dc0e90a0a0180a56f07362a8a2ca4483583b615
boom! running `docker start -a ba2eab8d0a5d4969771369af5dc0e90a0a0180a56f07362a8a2ca4483583b615`
kablam!    Compiling cuda_dnn v0.1.1 (file:///source)
kablam! warning: field is never used: `s_width`
kablam!   --> src/v5/mod.rs:82:3
kablam!    |
kablam! 82 |   s_width:      usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_height`
kablam!   --> src/v5/mod.rs:83:3
kablam!    |
kablam! 83 |   s_height:     usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_channels`
kablam!   --> src/v5/mod.rs:84:3
kablam!    |
kablam! 84 |   s_channels:   usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `s_batch_size`
kablam!   --> src/v5/mod.rs:85:3
kablam!    |
kablam! 85 |   s_batch_size: usize,
kablam!    |   ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `width`
kablam!    --> src/v5/mod.rs:225:3
kablam!     |
kablam! 225 |   width:        usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `height`
kablam!    --> src/v5/mod.rs:226:3
kablam!     |
kablam! 226 |   height:       usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `in_channels`
kablam!    --> src/v5/mod.rs:227:3
kablam!     |
kablam! 227 |   in_channels:  usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `out_channels`
kablam!    --> src/v5/mod.rs:228:3
kablam!     |
kablam! 228 |   out_channels: usize,
kablam!     |   ^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `stride_w`
kablam!    --> src/v5/mod.rs:267:3
kablam!     |
kablam! 267 |   stride_w: usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `stride_h`
kablam!    --> src/v5/mod.rs:268:3
kablam!     |
kablam! 268 |   stride_h: usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `pad_w`
kablam!    --> src/v5/mod.rs:269:3
kablam!     |
kablam! 269 |   pad_w:    usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `pad_h`
kablam!    --> src/v5/mod.rs:270:3
kablam!     |
kablam! 270 |   pad_h:    usize,
kablam!     |   ^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:323:25
kablam!     |
kablam! 323 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, filter_desc: CudnnFilterDesc<f32>, conv_desc: CudnnConvDesc, mut dst_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvFwdOp> {
kablam!     |                         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:323:122
kablam!     |
kablam! 323 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, filter_desc: CudnnFilterDesc<f32>, conv_desc: CudnnConvDesc, mut dst_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvFwdOp> {
kablam!     |                                                                                                                          ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:326:9
kablam!     |
kablam! 326 |     let status = unsafe { cudnnFindConvolutionForwardAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:417:18
kablam!     |
kablam! 417 |     let status = unsafe { cudnnConvolutionForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:457:25
kablam!     |
kablam! 457 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, grad_filter_desc: CudnnFilterDesc<f32>, grad_bias_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdFilterOp> {
kablam!     |                         ^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:457:61
kablam!     |
kablam! 457 |   pub fn create_fastest(mut src_desc: CudnnTensorDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, grad_filter_desc: CudnnFilterDesc<f32>, grad_bias_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdFilterOp> {
kablam!     |                                                             ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:460:9
kablam!     |
kablam! 460 |     let status = unsafe { cudnnFindConvolutionBackwardFilterAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:509:9
kablam!     |
kablam! 509 |     let mut status = cudnnStatus_t::Success;
kablam!     |         ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:547:18
kablam!     |
kablam! 547 |     let status = unsafe { cudnnConvolutionBackwardFilter(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:568:18
kablam!     |
kablam! 568 |       let status = unsafe { cudnnConvolutionBackwardBias(
kablam!     |  __________________^ starting here...
kablam! 569 | |         handle.ptr,
kablam! 570 | |         &alpha as *const f32 as *const c_void,
kablam! 571 | |         self.diff_desc.ptr,
kablam! 572 | |         out_delta as *const c_void,
kablam! 573 | |         &beta as *const f32 as *const c_void,
kablam! 574 | |         self.grad_bias_desc.ptr,
kablam! 575 | |         grad_bias_accum as *mut c_void,
kablam! 576 | |     ) };
kablam!     | |_______^ ...ending here: unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:601:60
kablam!     |
kablam! 601 |   pub fn create_fastest(filter_desc: CudnnFilterDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, mut grad_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdDataOp> {
kablam!     |                                                            ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:601:123
kablam!     |
kablam! 601 |   pub fn create_fastest(filter_desc: CudnnFilterDesc<f32>, mut diff_desc: CudnnTensorDesc<f32>, conv_desc: CudnnConvDesc, mut grad_desc: CudnnTensorDesc<f32>, handle: &CudnnHandle) -> CudnnResult<CudnnConvBwdDataOp> {
kablam!     |                                                                                                                           ^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `status`
kablam!    --> src/v5/mod.rs:604:9
kablam!     |
kablam! 604 |     let status = unsafe { cudnnFindConvolutionBackwardDataAlgorithm(
kablam!     |         ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/v5/mod.rs:652:9
kablam!     |
kablam! 652 |     let mut status = cudnnStatus_t::Success;
kablam!     |         ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:689:18
kablam!     |
kablam! 689 |     let status = unsafe { cudnnConvolutionBackwardData(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:755:18
kablam!     |
kablam! 755 |       let status = unsafe { cudnnAddTensor(
kablam!     |  __________________^ starting here...
kablam! 756 | |         handle.ptr,
kablam! 757 | |         &alpha as *const f32 as *const c_void,
kablam! 758 | |         self.bias_desc.ptr,
kablam! 759 | |         bias as *const c_void,
kablam! 760 | |         &beta as *const f32 as *const c_void,
kablam! 761 | |         self.src_dst_desc.ptr,
kablam! 762 | |         src_dst as *mut c_void,
kablam! 763 | |     ) };
kablam!     | |_______^ ...ending here: unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:809:18
kablam!     |
kablam! 809 |     let status = unsafe { cudnnActivationForward_v3(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:825:18
kablam!     |
kablam! 825 |     let status = unsafe { cudnnActivationBackward_v3(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:870:18
kablam!     |
kablam! 870 |     let status = unsafe { cudnnSoftmaxForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:967:18
kablam!     |
kablam! 967 |     let status = unsafe { cudnnPoolingForward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!    --> src/v5/mod.rs:983:18
kablam!     |
kablam! 983 |     let status = unsafe { cudnnPoolingBackward(
kablam!     |                  ^ unnecessary `unsafe` block
kablam!     |
kablam!     = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1015:18
kablam!      |
kablam! 1015 |       let status = unsafe { cudnnTransformTensor(
kablam!      |  __________________^ starting here...
kablam! 1016 | |         handle.ptr,
kablam! 1017 | |         &alpha as *const f32 as *const c_void,
kablam! 1018 | |         self.src_desc.ptr,
kablam! 1019 | |         src_data as *const c_void,
kablam! 1020 | |         &beta as *const f32 as *const c_void,
kablam! 1021 | |         self.dst_desc.ptr,
kablam! 1022 | |         dst_data as *mut c_void,
kablam! 1023 | |     ) };
kablam!      | |_______^ ...ending here: unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1084:18
kablam!      |
kablam! 1084 |     let status = unsafe { cudnnBatchNormalizationForwardInference(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1121:18
kablam!      |
kablam! 1121 |     let status = unsafe { cudnnBatchNormalizationForwardTraining(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! warning: unnecessary `unsafe` block
kablam!     --> src/v5/mod.rs:1162:18
kablam!      |
kablam! 1162 |     let status = unsafe { cudnnBatchNormalizationBackward(
kablam!      |                  ^ unnecessary `unsafe` block
kablam!      |
kablam!      = note: #[warn(unused_unsafe)] on by default
kablam! 
kablam! error: linking with `cc` failed: exit code: 1
kablam!   |
kablam!   = note: "cc" "-Wl,--as-needed" "-Wl,-z,noexecstack" "-m64" "-L" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib" "/target/debug/deps/cuda_dnn-a867937757989bc6.0.o" "-o" "/target/debug/deps/cuda_dnn-a867937757989bc6" "-Wl,--gc-sections" "-pie" "-nodefaultlibs" "-L" "/target/debug/deps" "-L" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib" "-Wl,-Bstatic" "-Wl,-Bdynamic" "-l" "cudnn" "/target/debug/deps/libcuda-f7db31a0c355cc46.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libtest-6c35a477e7bec8d3.rlib" "/target/debug/deps/liblibc-5dc7b85e748840b4.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libgetopts-a80f7c589731de53.rlib" "/target/debug/deps/libfloat-cdfc256a65855475.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libterm-fa872424129019f5.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-f4594d3e53dcb114.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libpanic_unwind-a0157c0ca919c364.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libunwind-488b4ab4bd53a138.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/librand-1efbcfd8938372b6.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcollections-532a3dbf317eff86.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc-ca07b617414dd0fa.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liballoc_jemalloc-492d8ea7fa3384ff.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/liblibc-88c194c15fdb6521.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd_unicode-cfbd6648f7db2ee5.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcore-687e6a964d22cbb4.rlib" "/rustup-home/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcompiler_builtins-987729be881d4d32.rlib" "-l" "cudart" "-l" "util" "-l" "dl" "-l" "rt" "-l" "pthread" "-l" "gcc_s" "-l" "pthread" "-l" "c" "-l" "m" "-l" "rt" "-l" "util"
kablam!   = note: /usr/bin/ld: cannot find -lcudnn
kablam!           /usr/bin/ld: cannot find -lcudart
kablam!           collect2: error: ld returned 1 exit status
kablam!           
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `cuda_dnn`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f ba2eab8d0a5d4969771369af5dc0e90a0a0180a56f07362a8a2ca4483583b615`
blam! ba2eab8d0a5d4969771369af5dc0e90a0a0180a56f07362a8a2ca4483583b615
