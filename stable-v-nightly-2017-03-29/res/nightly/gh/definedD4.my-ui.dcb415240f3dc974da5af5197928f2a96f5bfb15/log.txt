boom! testing https://github.com/definedD4/my-ui#dcb415240f3dc974da5af5197928f2a96f5bfb15 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 1f8e48b0d8d20b56daf6d08a315ee849a7b7842dd966bb5c120556f98e2e8f67
boom! running `docker start -a 1f8e48b0d8d20b56daf6d08a315ee849a7b7842dd966bb5c120556f98e2e8f67`
kablam!    Compiling backtrace-sys v0.1.10
kablam!    Compiling rand v0.3.15
kablam!    Compiling fs2 v0.2.5
kablam!    Compiling shared_library v0.1.5
kablam!    Compiling backtrace v0.2.3
kablam!    Compiling memmap v0.4.0
kablam!    Compiling osmesa-sys v0.1.2
kablam!    Compiling x11-dl v2.12.0
kablam!    Compiling tempfile v2.1.5
kablam!    Compiling phf_generator v0.7.21
kablam!    Compiling phf_codegen v0.7.21
kablam!    Compiling target_build_utils v0.3.0
kablam!    Compiling libloading v0.3.2
kablam!    Compiling dlib v0.3.1
kablam!    Compiling wayland-sys v0.7.8
kablam!    Compiling wayland-client v0.7.8
kablam!    Compiling wayland-kbd v0.6.3
kablam!    Compiling wayland-window v0.4.4
kablam!    Compiling winit v0.5.11
kablam!    Compiling glutin v0.7.4
kablam!    Compiling glium v0.16.0
kablam!    Compiling my-ui v0.1.0 (file:///source)
kablam! warning: this feature has been stable since 1.17.0. Attribute no longer needed
kablam!  --> src/main.rs:1:12
kablam!   |
kablam! 1 | #![feature(ptr_eq)]
kablam!   |            ^^^^^^
kablam!   |
kablam!   = note: #[warn(stable_features)] on by default
kablam! 
kablam! warning: method is never used: `from_tuple`
kablam!   --> src/primitives.rs:14:5
kablam!    |
kablam! 14 |       pub fn from_tuple(t: (f32, f32)) -> Point {
kablam!    |  _____^ starting here...
kablam! 15 | |         Point::new(t.0, t.1)
kablam! 16 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `from_tuple`
kablam!   --> src/primitives.rs:58:5
kablam!    |
kablam! 58 |       pub fn from_tuple(t: (f32, f32)) -> Size {
kablam!    |  _____^ starting here...
kablam! 59 | |         Size::new(t.0, t.1)
kablam! 60 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `to_tuple_argb`
kablam!   --> src/primitives.rs:85:5
kablam!    |
kablam! 85 |       pub fn to_tuple_argb(&self) -> (f32, f32, f32, f32){
kablam!    |  _____^ starting here...
kablam! 86 | |         (self.a, self.r, self.g, self.b)
kablam! 87 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `transform_to_inner`
kablam!    --> src/primitives.rs:153:5
kablam!     |
kablam! 153 |       pub fn transform_to_inner(&self, rect: Rect) -> Rect {
kablam!     |  _____^ starting here...
kablam! 154 | |         Rect::pos_size(rect.pos - self.pos, rect.size)
kablam! 155 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `expand`
kablam!    --> src/primitives.rs:157:5
kablam!     |
kablam! 157 |       pub fn expand(&self, margin: Thickness) -> Rect {
kablam!     |  _____^ starting here...
kablam! 158 | |         Rect::from_bounds(self.right() + margin.right, self.top() - margin.top,
kablam! 159 | |                           self.left() - margin.left, self.bottom() + margin.bottom)
kablam! 160 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `rect_in`
kablam!    --> src/primitives.rs:190:5
kablam!     |
kablam! 190 |       pub fn rect_in(&self, container: Size) -> Rect {
kablam!     |  _____^ starting here...
kablam! 191 | |         Rect::from_bounds(container.w - self.right, self.top, self.left, container.h - self.bottom)
kablam! 192 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `cast_element_ref`
kablam!   --> src/tree.rs:24:5
kablam!    |
kablam! 24 |       pub fn cast_element_ref<T: Any>(&self) -> Option<&T> {
kablam!    |  _____^ starting here...
kablam! 25 | |         if self.can_cast::<T>() {
kablam! 26 | |             unsafe {
kablam! 27 | |                 Some(&*(self as *const Element as *const T))
kablam! 28 | |             }
kablam! 29 | |         } else {
kablam! 30 | |             None
kablam! 31 | |         }
kablam! 32 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `parrent`
kablam!    --> src/tree.rs:104:5
kablam!     |
kablam! 104 |       pub fn parrent(&self) -> Option<NodeRef> {
kablam!     |  _____^ starting here...
kablam! 105 | |         self.node.borrow().parrent.as_ref().map(|w| w.upgrade().unwrap())
kablam! 106 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `rect`
kablam!    --> src/tree.rs:108:5
kablam!     |
kablam! 108 |       pub fn rect(&self) -> Rect {
kablam!     |  _____^ starting here...
kablam! 109 | |         self.node.borrow().rect
kablam! 110 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `element`
kablam!    --> src/tree.rs:116:5
kablam!     |
kablam! 116 |       pub fn element(&self) -> Ref<Element + 'static> {
kablam!     |  _____^ starting here...
kablam! 117 | |         Ref::map(self.element.borrow(), |b| &**b)
kablam! 118 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `element_mut`
kablam!    --> src/tree.rs:120:5
kablam!     |
kablam! 120 |       pub fn element_mut(&self) -> RefMut<Element + 'static> {
kablam!     |  _____^ starting here...
kablam! 121 | |         RefMut::map(self.element.borrow_mut(), |b| &mut **b)
kablam! 122 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `cast_element`
kablam!    --> src/tree.rs:124:5
kablam!     |
kablam! 124 |       pub fn cast_element<T: Any>(&self) -> Option<Ref<T>> {
kablam!     |  _____^ starting here...
kablam! 125 | |         let element = Ref::map(self.element.borrow(), |b| &**b);
kablam! 126 | |         if element.can_cast::<T>() {
kablam! 127 | |             Some(Ref::map(element, |e| e.cast_element_ref::<T>().unwrap()))
kablam! 128 | |         } else {
kablam! 129 | |             None
kablam! 130 | |         }
kablam! 131 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `title`
kablam!   --> src/window.rs:13:5
kablam!    |
kablam! 13 |     title: String,
kablam!    |     ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/window.rs:97:21
kablam!    |
kablam! 97 |         if let Some(mut root) = self.tree.root() {
kablam!    |                     ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: method is never used: `with_size`
kablam!    --> src/window.rs:129:5
kablam!     |
kablam! 129 |       pub fn with_size(mut self, size: Size) -> WindowBuilder {
kablam!     |  _____^ starting here...
kablam! 130 | |         self.size = size;
kablam! 131 | |         self
kablam! 132 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `with_content`
kablam!    --> src/window.rs:140:5
kablam!     |
kablam! 140 |       pub fn with_content<T: Element + 'static>(mut self, content: T) -> WindowBuilder {
kablam!     |  _____^ starting here...
kablam! 141 | |         self.content = Some(Box::new(content));
kablam! 142 | |         self
kablam! 143 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variant is never used: `ReadOnly`
kablam!  --> src/property.rs:3:5
kablam!   |
kablam! 3 |     ReadOnly,
kablam!   |     ^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: variant is never used: `WriteOnly`
kablam!  --> src/property.rs:4:5
kablam!   |
kablam! 4 |     WriteOnly,
kablam!   |     ^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `read_enabled`
kablam!   --> src/property.rs:9:5
kablam!    |
kablam! 9  |       pub fn read_enabled(&self) -> bool {
kablam!    |  _____^ starting here...
kablam! 10 | |         match *self {
kablam! 11 | |             PropertyTraits::ReadOnly | PropertyTraits::ReadWrite => true,
kablam! 12 | |             PropertyTraits::WriteOnly => false,
kablam! 13 | |         }
kablam! 14 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `write_enabled`
kablam!   --> src/property.rs:16:5
kablam!    |
kablam! 16 |       pub fn write_enabled(&self) -> bool {
kablam!    |  _____^ starting here...
kablam! 17 | |         match *self {
kablam! 18 | |             PropertyTraits::WriteOnly | PropertyTraits::ReadWrite => true,
kablam! 19 | |             PropertyTraits::ReadOnly => false,
kablam! 20 | |         }
kablam! 21 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `read_write_enabled`
kablam!   --> src/property.rs:23:5
kablam!    |
kablam! 23 |       pub fn read_write_enabled(&self) -> bool {
kablam!    |  _____^ starting here...
kablam! 24 | |         match *self {
kablam! 25 | |             PropertyTraits::ReadWrite => true,
kablam! 26 | |             PropertyTraits::ReadOnly | PropertyTraits::WriteOnly => false,
kablam! 27 | |         }
kablam! 28 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `suits`
kablam!   --> src/property.rs:30:5
kablam!    |
kablam! 30 |       pub fn suits(&self, other: PropertyTraits) -> bool{
kablam!    |  _____^ starting here...
kablam! 31 | |         match *self {
kablam! 32 | |             PropertyTraits::ReadOnly => other.read_enabled(),
kablam! 33 | |             PropertyTraits::WriteOnly => other.write_enabled(),
kablam! 34 | |             PropertyTraits::ReadWrite => other.read_write_enabled(),
kablam! 35 | |         }
kablam! 36 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: struct is never used: `Property`
kablam!   --> src/property.rs:39:1
kablam!    |
kablam! 39 |   pub struct Property<T: Copy> {
kablam!    |  _^ starting here...
kablam! 40 | |     name: String,
kablam! 41 | |     traits: PropertyTraits,
kablam! 42 | |     source: Box<ValueSource<T>>,
kablam! 43 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!   --> src/property.rs:52:5
kablam!    |
kablam! 52 |     pub fn new<S: Into<String>>(name: S, traits: PropertyTraits, source: Box<ValueSource<T>>) -> Result<Property<T>, String> {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `name`
kablam!   --> src/property.rs:64:5
kablam!    |
kablam! 64 |       pub fn name(&self) -> &str {
kablam!    |  _____^ starting here...
kablam! 65 | |         &self.name
kablam! 66 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `traits`
kablam!   --> src/property.rs:68:5
kablam!    |
kablam! 68 |       pub fn traits(&self) -> PropertyTraits {
kablam!    |  _____^ starting here...
kablam! 69 | |         self.traits
kablam! 70 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `get`
kablam!   --> src/property.rs:72:5
kablam!    |
kablam! 72 |       pub fn get(&self) -> T {
kablam!    |  _____^ starting here...
kablam! 73 | |         if !self.traits.read_enabled() {
kablam! 74 | |             panic!("Calling get on property with disabled read");
kablam! 75 | |         }
kablam! 76 | |         self.source.get()
kablam! 77 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `set`
kablam!   --> src/property.rs:79:5
kablam!    |
kablam! 79 |       pub fn set(&self, value: T) {
kablam!    |  _____^ starting here...
kablam! 80 | |         if !self.traits.write_enabled() {
kablam! 81 | |             panic!("Calling set on property with disabled write");
kablam! 82 | |         }
kablam! 83 | |         self.source.set(value)
kablam! 84 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: struct is never used: `Variable`
kablam!   --> src/property.rs:92:5
kablam!    |
kablam! 92 |       pub struct Variable<T> {
kablam!    |  _____^ starting here...
kablam! 93 | |         data: Cell<T>,
kablam! 94 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!    --> src/property.rs:97:9
kablam!     |
kablam! 97  |           pub fn new(default: T) -> Variable<T> {
kablam!     |  _________^ starting here...
kablam! 98  | |             Variable {
kablam! 99  | |                 data: Cell::new(default)
kablam! 100 | |             }
kablam! 101 | |         }
kablam!     | |_________^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `glium::glutin`
kablam!  --> src/render.rs:3:5
kablam!   |
kablam! 3 | use glium::glutin;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::any::Any`
kablam!   --> src/main.rs:17:5
kablam!    |
kablam! 17 | use std::any::Any;
kablam!    |     ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!   --> src/main.rs:28:24
kablam!    |
kablam! 28 |     fn init(&mut self, node: NodeRef){
kablam!    |                        ^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!   --> src/main.rs:32:23
kablam!    |
kablam! 32 |     fn measure(&self, node: NodeRef) -> Size {
kablam!    |                       ^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/main.rs:37:26
kablam!    |
kablam! 37 |     fn layout(&mut self, mut node: NodeRef, container: Size) {
kablam!    |                          ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!   --> src/main.rs:42:22
kablam!    |
kablam! 42 |     fn render(&self, node: NodeRef, renderer: &mut Renderer) {
kablam!    |                      ^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!   --> src/main.rs:60:23
kablam!    |
kablam! 60 |     fn measure(&self, node: NodeRef) -> Size {
kablam!    |                       ^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/main.rs:65:26
kablam!    |
kablam! 65 |     fn layout(&mut self, mut node: NodeRef, container: Size) {
kablam!    |                          ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!   --> src/main.rs:74:22
kablam!    |
kablam! 74 |     fn render(&self, node: NodeRef, renderer: &mut Renderer) {
kablam!    |                      ^^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!    --> src/main.rs:136:23
kablam!     |
kablam! 136 |     fn measure(&self, node: NodeRef) -> Size {
kablam!     |                       ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/main.rs:141:26
kablam!     |
kablam! 141 |     fn layout(&mut self, mut node: NodeRef, container: Size) {
kablam!     |                          ^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!    --> src/main.rs:155:22
kablam!     |
kablam! 155 |     fn render(&self, node: NodeRef, renderer: &mut Renderer) {
kablam!     |                      ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!    --> src/main.rs:162:24
kablam!     |
kablam! 162 |     fn init(&mut self, node: NodeRef){
kablam!     |                        ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/main.rs:175:26
kablam!     |
kablam! 175 |     fn layout(&mut self, mut node: NodeRef, container: Size) {
kablam!     |                          ^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: unused variable: `node`
kablam!    --> src/main.rs:188:22
kablam!     |
kablam! 188 |     fn render(&self, node: NodeRef, renderer: &mut Renderer) {
kablam!     |                      ^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `renderer`
kablam!    --> src/main.rs:188:37
kablam!     |
kablam! 188 |     fn render(&self, node: NodeRef, renderer: &mut Renderer) {
kablam!     |                                     ^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!    --> src/main.rs:194:5
kablam!     |
kablam! 194 |     my_logger::init(log::LogLevel::Debug);
kablam!     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_must_use)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/main.rs:201:13
kablam!     |
kablam! 201 |         let mut border = window.set_content(Box::new(TestBorder::new(Thickness::hv(4.0, 8.0))));
kablam!     |             ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/main.rs:203:13
kablam!     |
kablam! 203 |         let mut list = border.cast_element_mut::<TestBorder>().unwrap().set_content(Box::new(TestList::new()));
kablam!     |             ^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 88.47 secs
boom! running `docker rm -f 1f8e48b0d8d20b56daf6d08a315ee849a7b7842dd966bb5c120556f98e2e8f67`
blam! 1f8e48b0d8d20b56daf6d08a315ee849a7b7842dd966bb5c120556f98e2e8f67
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! f385a8e917b07269c399b5d6adb76c091b1b35ddb207ab6ea60631c7a9334240
boom! running `docker start -a f385a8e917b07269c399b5d6adb76c091b1b35ddb207ab6ea60631c7a9334240`
kablam!    Compiling my-ui v0.1.0 (file:///source)
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:233:20
kablam!     |
kablam! 233 |         let tree = Tree::<i32>::new();
kablam!     |                    ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:239:24
kablam!     |
kablam! 239 |         let mut tree = Tree::<i32>::new();
kablam!     |                        ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:240:28
kablam!     |
kablam! 240 |         tree.set_root(Some(42));
kablam!     |                            ^^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element>`
kablam!                found type `{integer}`
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:248:26
kablam!     |
kablam! 248 |         assert_eq!(*root.data(), 42);
kablam!     |                          ^^^^
kablam! 
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:253:24
kablam!     |
kablam! 253 |         let mut tree = Tree::<i32>::new();
kablam!     |                        ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:254:28
kablam!     |
kablam! 254 |         tree.set_root(Some(42));
kablam!     |                            ^^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element>`
kablam!                found type `{integer}`
kablam! 
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:263:24
kablam!     |
kablam! 263 |         let mut tree = Tree::<i32>::new();
kablam!     |                        ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:264:28
kablam!     |
kablam! 264 |         tree.set_root(Some(0));
kablam!     |                            ^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element>`
kablam!                found type `{integer}`
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:269:24
kablam!     |
kablam! 269 |         root.add_child(1);
kablam!     |                        ^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element + 'static>`
kablam!                found type `{integer}`
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:274:32
kablam!     |
kablam! 274 |             assert_eq!(*child0.data(), 1);
kablam!     |                                ^^^^
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:277:24
kablam!     |
kablam! 277 |         root.add_child(2);
kablam!     |                        ^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element + 'static>`
kablam!                found type `{integer}`
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:283:32
kablam!     |
kablam! 283 |             assert_eq!(*child0.data(), 1);
kablam!     |                                ^^^^
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:284:32
kablam!     |
kablam! 284 |             assert_eq!(*child1.data(), 2);
kablam!     |                                ^^^^
kablam! 
kablam! error: aborting due to 13 previous errors
kablam! 
kablam! error: Could not compile `my-ui`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f f385a8e917b07269c399b5d6adb76c091b1b35ddb207ab6ea60631c7a9334240`
blam! f385a8e917b07269c399b5d6adb76c091b1b35ddb207ab6ea60631c7a9334240
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! ead4e2ac8680e9383363217c2c5c1a6aec30f033d2bd150bb59b7a6b7d1ae206
boom! running `docker start -a ead4e2ac8680e9383363217c2c5c1a6aec30f033d2bd150bb59b7a6b7d1ae206`
kablam!    Compiling my-ui v0.1.0 (file:///source)
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:233:20
kablam!     |
kablam! 233 |         let tree = Tree::<i32>::new();
kablam!     |                    ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:239:24
kablam!     |
kablam! 239 |         let mut tree = Tree::<i32>::new();
kablam!     |                        ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:240:28
kablam!     |
kablam! 240 |         tree.set_root(Some(42));
kablam!     |                            ^^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element>`
kablam!                found type `{integer}`
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:248:26
kablam!     |
kablam! 248 |         assert_eq!(*root.data(), 42);
kablam!     |                          ^^^^
kablam! 
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:253:24
kablam!     |
kablam! 253 |         let mut tree = Tree::<i32>::new();
kablam!     |                        ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:254:28
kablam!     |
kablam! 254 |         tree.set_root(Some(42));
kablam!     |                            ^^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element>`
kablam!                found type `{integer}`
kablam! 
kablam! error[E0244]: wrong number of type arguments: expected 0, found 1
kablam!    --> src/tree.rs:263:24
kablam!     |
kablam! 263 |         let mut tree = Tree::<i32>::new();
kablam!     |                        ^^^^^^^^^^^^^^^^ expected no type arguments
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:264:28
kablam!     |
kablam! 264 |         tree.set_root(Some(0));
kablam!     |                            ^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element>`
kablam!                found type `{integer}`
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:269:24
kablam!     |
kablam! 269 |         root.add_child(1);
kablam!     |                        ^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element + 'static>`
kablam!                found type `{integer}`
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:274:32
kablam!     |
kablam! 274 |             assert_eq!(*child0.data(), 1);
kablam!     |                                ^^^^
kablam! 
kablam! error[E0308]: mismatched types
kablam!    --> src/tree.rs:277:24
kablam!     |
kablam! 277 |         root.add_child(2);
kablam!     |                        ^ expected struct `std::boxed::Box`, found integral variable
kablam!     |
kablam!     = note: expected type `std::boxed::Box<tree::Element + 'static>`
kablam!                found type `{integer}`
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:283:32
kablam!     |
kablam! 283 |             assert_eq!(*child0.data(), 1);
kablam!     |                                ^^^^
kablam! 
kablam! error: no method named `data` found for type `tree::NodeRef` in the current scope
kablam!    --> src/tree.rs:284:32
kablam!     |
kablam! 284 |             assert_eq!(*child1.data(), 2);
kablam!     |                                ^^^^
kablam! 
kablam! error: aborting due to 13 previous errors
kablam! 
kablam! error: Could not compile `my-ui`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f ead4e2ac8680e9383363217c2c5c1a6aec30f033d2bd150bb59b7a6b7d1ae206`
blam! ead4e2ac8680e9383363217c2c5c1a6aec30f033d2bd150bb59b7a6b7d1ae206
