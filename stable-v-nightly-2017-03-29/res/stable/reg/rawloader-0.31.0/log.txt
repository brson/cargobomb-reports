boom! testing rawloader-0.31.0 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! fe3f4c183a5b2667692bbfad74ebac4561469a23b70ab77332841c43f0c8c63d
boom! running `docker start -a fe3f4c183a5b2667692bbfad74ebac4561469a23b70ab77332841c43f0c8c63d`
kablam!    Compiling lazy_static v0.2.4
kablam!    Compiling num-traits v0.1.37
kablam!    Compiling libc v0.2.21
kablam!    Compiling byteorder v1.0.0
kablam!    Compiling glob v0.2.11
kablam!    Compiling either v1.0.3
kablam!    Compiling itertools v0.5.9
kablam!    Compiling time v0.1.36
kablam!    Compiling rand v0.3.15
kablam!    Compiling enum_primitive v0.1.1
kablam!    Compiling num_cpus v1.3.0
kablam!    Compiling rustc-serialize v0.3.23
kablam!    Compiling num-integer v0.1.33
kablam!    Compiling deque v0.3.1
kablam!    Compiling num-iter v0.1.33
kablam!    Compiling rayon v0.6.0
kablam!    Compiling toml v0.2.1
kablam!    Compiling num-complex v0.1.36
kablam!    Compiling num-bigint v0.1.37
kablam!    Compiling num-rational v0.1.36
kablam!    Compiling num v0.1.37
kablam!    Compiling rawloader v0.31.0 (file:///source)
kablam! error: failed to run custom build command for `rawloader v0.31.0 (file:///source)`
kablam! process didn't exit successfully: `/target/debug/build/rawloader-46baa2f40baf4d3a/build-script-join` (exit code: 101)
kablam! --- stderr
kablam! thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error { repr: Os { code: 30, message: "Read-only file system" } }', /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/src/libcore/result.rs:868
kablam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
kablam! 
boom! running `docker rm -f fe3f4c183a5b2667692bbfad74ebac4561469a23b70ab77332841c43f0c8c63d`
blam! fe3f4c183a5b2667692bbfad74ebac4561469a23b70ab77332841c43f0c8c63d
