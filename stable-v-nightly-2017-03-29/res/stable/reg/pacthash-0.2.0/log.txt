boom! testing pacthash-0.2.0 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! b81265283a316d7f595769865e93d54c58879f01aa03066a567dacce77e09b05
boom! running `docker start -a b81265283a316d7f595769865e93d54c58879f01aa03066a567dacce77e09b05`
kablam!    Compiling secp256k1 v0.5.6
kablam!    Compiling eventual v0.1.7
kablam!    Compiling strason v0.3.4
kablam!    Compiling bitcoin v0.4.5
kablam! error: `$r:expr` may be followed by `copy`, which is not allowed for `expr` fragments
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1687:16
kablam!      |
kablam! 1687 |              $(copy $c:expr);*
kablam!      |                ^^^^
kablam! 
kablam! error: `$r:expr` may be followed by `swap`, which is not allowed for `expr` fragments
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1688:16
kablam!      |
kablam! 1688 |              $(swap ($a:expr, $b:expr));*
kablam!      |                ^^^^
kablam! 
kablam! error: `$r:expr` may be followed by `perm`, which is not allowed for `expr` fragments
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1689:16
kablam!      |
kablam! 1689 |              $(perm ($first:expr, $($i:expr),*) );*
kablam!      |                ^^^^
kablam! 
kablam! error: `$r:expr` may be followed by `drop`, which is not allowed for `expr` fragments
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1690:16
kablam!      |
kablam! 1690 |              $(drop $d:expr);*
kablam!      |                ^^^^
kablam! 
kablam! error: `$c:expr` may be followed by `swap`, which is not allowed for `expr` fragments
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1688:16
kablam!      |
kablam! 1688 |              $(swap ($a:expr, $b:expr));*
kablam!      |                ^^^^
kablam! 
kablam! error: `$c:expr` may be followed by `perm`, which is not allowed for `expr` fragments
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1689:16
kablam!      |
kablam! 1689 |              $(perm ($first:expr, $($i:expr),*) );*
kablam!      |                ^^^^
kablam! 
kablam! error: `$c:expr` may be followed by `drop`, which is not allowed for `expr` fragments
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1690:16
kablam!      |
kablam! 1690 |              $(drop $d:expr);*
kablam!      |                ^^^^
kablam! 
kablam! error[E0308]: match arms have incompatible types
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:2269:25
kablam!      |
kablam! 2269 |                         match op {
kablam!      |                         ^ expected (), found bool
kablam!      |
kablam!      = note: expected type `()`
kablam!                 found type `bool`
kablam! note: match arm with an incompatible type
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:2337:60
kablam!      |
kablam! 2337 |                             opcodes::Ordinary::OP_2DROP => stack_opcode!(stack(2): require 2 drop 1; drop 2),
kablam!      |                                                            ------------------------------------------------- in this macro invocation
kablam! 
kablam! error[E0308]: mismatched types
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:2359:33
kablam!      |
kablam! 2359 |                                   match top_n {
kablam!      |  _________________________________^ starting here...
kablam! 2360 | |                                     Some(n) => stack_opcode!(stack(n + 1): require n + 1 copy n + 1),
kablam! 2361 | |                                     // The stack will wind up with the 1 and nth inputs being identical
kablam! 2362 | |                                     // with n input-dependent. I can imagine scripts which check this
kablam! 2363 | |                                     // condition or its negation for various n to get arbitrary finite
kablam! 2364 | |                                     // sets of allowable values. It's not clear to me that this is
kablam! 2365 | |                                     // feasible to analyze.
kablam! 2366 | |                                     None => { return Err(Error::Unanalyzable); }
kablam! 2367 | |                                 }
kablam!      | |_________________________________^ ...ending here: expected (), found bool
kablam!      |
kablam!      = note: expected type `()`
kablam!                 found type `bool`
kablam! 
kablam! error[E0308]: mismatched types
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:2377:33
kablam!      |
kablam! 2377 |                                   match top_n {
kablam!      |  _________________________________^ starting here...
kablam! 2378 | |                                     Some(n) => stack_opcode!(stack(n + 1): require n + 1 copy n + 1 drop n + 1),
kablam! 2379 | |                                     // The stack will wind up reordered, so in principle I could just force
kablam! 2380 | |                                     // the input to be zero (other n values can be converted to zero by just
kablam! 2381 | |                                     // manually rearranging the input). The problem is if numeric bounds are
kablam! 2382 | |                                     // later set on n. I can't analyze that.
kablam! 2383 | |                                     None => { return Err(Error::Unanalyzable); }
kablam! 2384 | |                                 }
kablam!      | |_________________________________^ ...ending here: expected (), found bool
kablam!      |
kablam!      = note: expected type `()`
kablam!                 found type `bool`
kablam! 
kablam! error[E0308]: match arms have incompatible types
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1916:21
kablam!      |
kablam! 1916 |                     match op {
kablam!      |                     ^ expected (), found bool
kablam!      |
kablam!      = note: expected type `()`
kablam!                 found type `bool`
kablam! note: match arm with an incompatible type
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1956:56
kablam!      |
kablam! 1956 |                         opcodes::Ordinary::OP_2DROP => stack_opcode!(stack(2): drop 1; drop 2),
kablam!      |                                                        --------------------------------------- in this macro invocation
kablam! 
kablam! error[E0308]: mismatched types
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1974:29
kablam!      |
kablam! 1974 |                             stack_opcode!(stack(n + 1): copy n + 1)
kablam!      |                             ---------------------------------------
kablam!      |                             |
kablam!      |                             expected (), found bool
kablam!      |                             in this macro invocation
kablam!      |
kablam!      = note: expected type `()`
kablam!                 found type `bool`
kablam! 
kablam! error[E0308]: mismatched types
kablam!     --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/bitcoin-0.4.5/src/blockdata/script.rs:1983:29
kablam!      |
kablam! 1983 |                             stack_opcode!(stack(n + 1): copy n + 1 drop n + 1)
kablam!      |                             --------------------------------------------------
kablam!      |                             |
kablam!      |                             expected (), found bool
kablam!      |                             in this macro invocation
kablam!      |
kablam!      = note: expected type `()`
kablam!                 found type `bool`
kablam! 
kablam! error: aborting due to 6 previous errors
kablam! 
kablam! error: Could not compile `bitcoin`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f b81265283a316d7f595769865e93d54c58879f01aa03066a567dacce77e09b05`
blam! b81265283a316d7f595769865e93d54c58879f01aa03066a567dacce77e09b05
