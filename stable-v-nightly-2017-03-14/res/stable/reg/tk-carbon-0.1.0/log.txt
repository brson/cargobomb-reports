boom! testing tk-carbon-0.1.0 against stable for nightly
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! 76bbcff0fc238a6bf09f280d6601fe200eacadd079f40e25be91b436c5ecf92f
boom! running `docker start -a 76bbcff0fc238a6bf09f280d6601fe200eacadd079f40e25be91b436c5ecf92f`
kablam! warning: unused manifest key: package.categories
kablam! warning: unused manifest key: package.categories
kablam!    Compiling abstract-ns v0.3.1
kablam!    Compiling tk-carbon v0.1.0 (file:///source)
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 3.86 secs
boom! running `docker rm -f 76bbcff0fc238a6bf09f280d6601fe200eacadd079f40e25be91b436c5ecf92f`
blam! 76bbcff0fc238a6bf09f280d6601fe200eacadd079f40e25be91b436c5ecf92f
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! c242764a257d81160b4c9c453fb0816bdabaa7d2a279106c8971805bafb3cb39
boom! running `docker start -a c242764a257d81160b4c9c453fb0816bdabaa7d2a279106c8971805bafb3cb39`
kablam! warning: unused manifest key: package.categories
kablam! warning: unused manifest key: package.categories
kablam!    Compiling futures-cpupool v0.1.3
kablam!    Compiling tk-easyloop v0.1.1
kablam!    Compiling ns-std-threaded v0.2.0
kablam!    Compiling tk-carbon v0.1.0 (file:///source)
kablam! warning: unused result which must be used, #[warn(unused_must_use)] on by default
kablam!   --> examples/pool.rs:27:9
kablam!    |
kablam! 27 |           tk_easyloop::run_forever(move || {
kablam!    |  _________^ starting here...
kablam! 28 | |             let resolver = ns_std_threaded::ThreadedResolver::new(
kablam! 29 | |                 futures_cpupool::CpuPool::new(1));
kablam! 30 | |             init.connect_to(resolver.subscribe(&name), &tk_easyloop::handle());
kablam! 31 | |             Ok::<(), ()>(())
kablam! 32 | |         });
kablam!    | |___________^ ...ending here
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 7.39 secs
boom! running `docker rm -f c242764a257d81160b4c9c453fb0816bdabaa7d2a279106c8971805bafb3cb39`
blam! c242764a257d81160b4c9c453fb0816bdabaa7d2a279106c8971805bafb3cb39
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! ff8f2a904f8b742dff4e6e84b9523b2cb0f2fc2449121f6dae0259281c631c42
boom! running `docker start -a ff8f2a904f8b742dff4e6e84b9523b2cb0f2fc2449121f6dae0259281c631c42`
kablam! warning: unused manifest key: package.categories
kablam! warning: unused manifest key: package.categories
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/tk_carbon-3b30ed13b1ff80b4
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests tk-carbon
blam! 
blam! running 4 tests
blam! test _0 ... ignored
blam! test public::Carbon::add_value_0 ... ignored
blam! test public::Carbon::add_value_at_0 ... ignored
blam! test _1 ... FAILED
blam! 
blam! failures:
blam! 
blam! ---- _1 stdout ----
blam! 	error[E0433]: failed to resolve. Use of undeclared type or module `Carbon`
blam!  --> <anon>:2:22
blam!   |
blam! 2 | let (carbon, init) = Carbon::new(&Config::new().done());
blam!   |                      ^^^^^^^^^^^ Use of undeclared type or module `Carbon`
blam! 
blam! error[E0433]: failed to resolve. Use of undeclared type or module `Config`
blam!  --> <anon>:2:35
blam!   |
blam! 2 | let (carbon, init) = Carbon::new(&Config::new().done());
blam!   |                                   ^^^^^^^^^^^ Use of undeclared type or module `Config`
blam! 
blam! error[E0425]: unresolved name `handle`
blam!  --> <anon>:3:1
blam!   |
blam! 3 | handle.spawn(TcpStream::connect(&addr, &handle)
blam!   | ^^^^^^ unresolved name
blam! 
blam! error[E0433]: failed to resolve. Use of undeclared type or module `TcpStream`
blam!  --> <anon>:3:14
blam!   |
blam! 3 | handle.spawn(TcpStream::connect(&addr, &handle)
blam!   |              ^^^^^^^^^^^^^^^^^^ Use of undeclared type or module `TcpStream`
blam! 
blam! error[E0425]: unresolved name `addr`
blam!  --> <anon>:3:34
blam!   |
blam! 3 | handle.spawn(TcpStream::connect(&addr, &handle)
blam!   |                                  ^^^^ unresolved name
blam! 
blam! error[E0425]: unresolved name `handle`
blam!  --> <anon>:3:41
blam!   |
blam! 3 | handle.spawn(TcpStream::connect(&addr, &handle)
blam!   |                                         ^^^^^^ unresolved name
blam! 
blam! error[E0425]: unresolved name `handle2`
blam!  --> <anon>:4:55
blam!   |
blam! 4 |     .and_then(move |sock| init.from_connection(sock, &handle2))
blam!   |                                                       ^^^^^^^ unresolved name
blam! 
blam! error: aborting due to previous error(s)
blam! 
blam! thread '_1' panicked at 'Box<Any>', /buildslave/rust-buildbot/slave/stable-dist-rustc-linux/build/src/librustc/session/mod.rs:201
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! 
blam! failures:
blam!     _1
blam! 
blam! test result: FAILED. 0 passed; 1 failed; 3 ignored; 0 measured
blam! 
kablam! error: test failed
boom! running `docker rm -f ff8f2a904f8b742dff4e6e84b9523b2cb0f2fc2449121f6dae0259281c631c42`
blam! ff8f2a904f8b742dff4e6e84b9523b2cb0f2fc2449121f6dae0259281c631c42
