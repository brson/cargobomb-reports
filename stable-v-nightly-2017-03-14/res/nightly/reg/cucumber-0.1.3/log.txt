boom! testing cucumber-0.1.3 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! db489c27418fd01b5f1c083d4a33db67ea5edc5d09f0835864e40e3f79099e4a
boom! running `docker start -a db489c27418fd01b5f1c083d4a33db67ea5edc5d09f0835864e40e3f79099e4a`
kablam!    Compiling syntex_errors v0.39.0
kablam!    Compiling syntex_syntax v0.39.0
kablam!    Compiling serde_codegen_internals v0.4.0
kablam!    Compiling aster v0.22.1
kablam!    Compiling syntex v0.39.0
kablam!    Compiling quasi v0.16.0
kablam!    Compiling quasi_codegen v0.16.0
kablam!    Compiling serde_codegen v0.7.15
kablam!    Compiling cucumber v0.1.3 (file:///source)
kablam! warning: unused import: `Serializer`
kablam!   --> src/event/response.rs:12:19
kablam!    |
kablam! 12 | use serde::{self, Serializer};
kablam!    |                   ^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 116.80 secs
boom! running `docker rm -f db489c27418fd01b5f1c083d4a33db67ea5edc5d09f0835864e40e3f79099e4a`
blam! db489c27418fd01b5f1c083d4a33db67ea5edc5d09f0835864e40e3f79099e4a
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! a47bd09469fd974dee412cdd4f80034b444d776c70eddb0fc0cbea43a125c95e
boom! running `docker start -a a47bd09469fd974dee412cdd4f80034b444d776c70eddb0fc0cbea43a125c95e`
kablam!    Compiling cucumber v0.1.3 (file:///source)
kablam! warning: code relies on type inference rules which are likely to change
kablam!   --> features/step_definitions/project_steps.rs:11:3
kablam!    |
kablam! 11 |     Given!(c, "^a project$", |_, world: &mut CucumberWorld, _| {
kablam!    |  ___^ starting here...
kablam! 12 | |     match fs::create_project() {
kablam! 13 | |       Ok(current_project) => {
kablam! 14 | |         world.current_project = Some(current_project);
kablam! 15 | |         InvokeResponse::Success
kablam! 16 | |       },
kablam! 17 | |       Err(ref err) => InvokeResponse::fail_from_str(&format!("Failed to create project {}", err))
kablam! 18 | |     }
kablam! 19 | |   });
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!    = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: code relies on type inference rules which are likely to change
kablam!   --> features/step_definitions/project_steps.rs:21:3
kablam!    |
kablam! 21 |     Given!(c, "^a project if I don't already have one$", |cuke: &Cucumber<CucumberWorld>, world: &mut CucumberWorld, _| {
kablam!    |  ___^ starting here...
kablam! 22 | |     match world.current_project {
kablam! 23 | |       Some(_) => InvokeResponse::Success,
kablam! 24 | |       None => cuke.invoke("a project", world, None)
kablam! 25 | |     }
kablam! 26 | |   });
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!    = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: code relies on type inference rules which are likely to change
kablam!   --> features/step_definitions/project_steps.rs:38:3
kablam!    |
kablam! 38 |   Then!(c, "^the project compiles$", |_, world: &mut CucumberWorld, _| {
kablam!    |   ^
kablam!    |
kablam!    = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!    = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: code relies on type inference rules which are likely to change
kablam!   --> features/step_definitions/project_steps.rs:62:3
kablam!    |
kablam! 62 |     Then!(c, "^the feature passes with no undefined steps$", |cuke: &Cucumber<CucumberWorld>, world: &mut CucumberWorld, _| {
kablam!    |  ___^ starting here...
kablam! 63 | |     cuke.invoke("the feature passes", world, None)
kablam! 64 | |       .and(cuke.invoke("the feature reports no undefined steps", world, None))
kablam! 65 | |   });
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!    = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: code relies on type inference rules which are likely to change
kablam!   --> features/step_definitions/project_steps.rs:67:3
kablam!    |
kablam! 67 |     Then!(c, "^the feature passes$", |_, world: &mut CucumberWorld, _| {
kablam!    |  ___^ starting here...
kablam! 68 | |     match world.execute_result {
kablam! 69 | |       None => InvokeResponse::fail_from_str("Expected there to be an execute result but there wasn't one"),
kablam! 70 | |       Some(Err(ref err)) => InvokeResponse::fail_from_str(&format!("Expected scenario to pass but it failed with {}", err)),
kablam! 71 | |       _ => InvokeResponse::Success
kablam! 72 | |     }
kablam! 73 | |   });
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!    = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: code relies on type inference rules which are likely to change
kablam!   --> features/step_definitions/project_steps.rs:85:3
kablam!    |
kablam! 85 |     Then!(c, "^the feature reports an undefined step$", |_, world: &mut CucumberWorld, _| {
kablam!    |  ___^ starting here...
kablam! 86 | |     match world.execute_result {
kablam! 87 | |       None => InvokeResponse::fail_from_str("Expected there to be an execute result but there wasn't one"),
kablam! 88 | |       Some(Err(_)) => InvokeResponse::fail_from_str("Expected scenario to pass (to retrieve an undefined step) but it failed"),
kablam! 89 | |       Some(Ok(ref output)) => InvokeResponse::expect(output.contains("1 undefined"), "Expected scenario output to contain exactly one undefined step")
kablam! 90 | |     }
kablam! 91 | |   });
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!    = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: code relies on type inference rules which are likely to change
kablam!   --> features/step_definitions/project_steps.rs:93:3
kablam!    |
kablam! 93 |     Then!(c, "^the feature reports no undefined steps$", |_, world: &mut CucumberWorld, _| {
kablam!    |  ___^ starting here...
kablam! 94 | |     match world.execute_result {
kablam! 95 | |       None => InvokeResponse::fail_from_str("Expected there to be an execute result but there wasn't one"),
kablam! 96 | |       Some(Err(_)) => InvokeResponse::fail_from_str("Expected scenario to pass (to retrieve an undefined step) but it failed"),
kablam! 97 | |       Some(Ok(ref output)) => InvokeResponse::expect(!output.contains(" undefined"), &format!("Expected scenario output to contain no undefined steps, but it contained some: {}", output))
kablam! 98 | |     }
kablam! 99 | |   });
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!    = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!    = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: code relies on type inference rules which are likely to change
kablam!    --> features/step_definitions/project_steps.rs:101:3
kablam!     |
kablam! 101 |     Then!(c, "^the feature reports a pending step$", |_, world: &mut CucumberWorld, _| {
kablam!     |  ___^ starting here...
kablam! 102 | |     match world.execute_result {
kablam! 103 | |       None => InvokeResponse::fail_from_str("Expected there to be an execute result but there wasn't one"),
kablam! 104 | |       Some(Err(_)) => InvokeResponse::fail_from_str("Expected scenario to pass (to retrieve a pending step) but it failed"),
kablam! 105 | |       Some(Ok(ref output)) => InvokeResponse::expect(output.contains("Test step is pending"), "Expected scenario output to contain pending step")
kablam! 106 | |     }
kablam! 107 | |   });
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(resolve_trait_on_defaulted_unit)] on by default
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #39216 <https://github.com/rust-lang/rust/issues/39216>
kablam!     = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: unused import: `Serializer`
kablam!   --> src/event/response.rs:12:19
kablam!    |
kablam! 12 | use serde::{self, Serializer};
kablam!    |                   ^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 14.4 secs
boom! running `docker rm -f a47bd09469fd974dee412cdd4f80034b444d776c70eddb0fc0cbea43a125c95e`
blam! a47bd09469fd974dee412cdd4f80034b444d776c70eddb0fc0cbea43a125c95e
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! 34b6ac6ca4ebd86abcd5bd0f2ef7dd705474720764b374489af829acbfb5a664
boom! running `docker start -a 34b6ac6ca4ebd86abcd5bd0f2ef7dd705474720764b374489af829acbfb5a664`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/cucumber-f176236553e8622c
blam! 
blam! running 44 tests
blam! test cucumber_regex::test::it_makes_a_regex ... ok
blam! test definitions::destructuring::invoke_arg::test::bool::bool_is_false_string_false ... ok
blam! test definitions::destructuring::invoke_arg::test::bool::bool_is_false_from_none ... ok
blam! test definitions::destructuring::invoke_arg::test::bool::bool_doesnt_parse_from_table ... ok
blam! test definitions::destructuring::invoke_arg::test::string_can_be_destructured ... ok
blam! test definitions::destructuring::invoke_arg::test::table_can_be_destructured ... ok
blam! test definitions::destructuring::invoke_arg::test::bool::bool_is_true_from_other_strings ... ok
blam! test definitions::destructuring::invoke_arg::test::wrong_type_destructure_fails_correctly ... ok
blam! test definitions::destructuring::invoke_arg_set::test::destructure_for_element_count_fails_correctly ... ok
blam! test definitions::destructuring::invoke_arg_set::test::tuple_1_bool_can_be_destructured ... ok
blam! test definitions::destructuring::invoke_arg_set::test::destructure_for_type_mismatch_fails_correctly ... ok
blam! test definitions::destructuring::invoke_arg_set::test::tuple_1_string_can_be_destructured ... ok
blam! test definitions::destructuring::invoke_arg_set::test::tuple_3_can_be_destructured ... ok
blam! test event::request::test::read_begin_scenario ... ok
blam! test event::request::test::read_begin_scenario_empty ... ok
blam! test event::request::test::read_invoke_complicated_args ... ok
blam! test event::request::test::read_end_scenario ... ok
blam! test event::request::test::read_end_scenario_empty ... ok
blam! test event::request::test::read_invoke_no_args ... ok
blam! test event::request::test::read_step_matches ... ok
blam! test event::request::test::read_invoke_string_arg ... ok
blam! test event::request::test::read_snippet_text ... ok
blam! test event::response::test::invoke_response_check ... ok
blam! test event::response::test::invoke_response_and ... ok
blam! test event::response::test::invoke_response_check_eq ... ok
blam! test event::response::test::invoke_response_check_not_eq ... ok
blam! test event::response::test::invoke_response_expect ... ok
blam! test event::response::test::invoke_response_or ... ok
blam! test event::response::test::it_serializes_begin_scenario ... ok
blam! test event::response::test::it_serializes_end_scenario ... ok
blam! test event::response::test::it_serializes_invoke_fail ... ok
blam! test event::response::test::it_serializes_invoke_pending ... ok
blam! test event::response::test::it_serializes_invoke_success ... ok
blam! test event::response::test::it_serializes_snippet_text ... ok
blam! test event::response::test::it_serializes_step_matches_match ... ok
blam! test event::response::test::it_serializes_step_matches_no_match ... ok
blam! test server::test::it_makes_a_server ... ok
blam! test state::test::cuke_inserts_step ... ok
blam! test state::test::cuke_instantiates ... ok
blam! test state::test::cuke_invoke_fails_on_no_match ... ok
blam! test state::test::cuke_invoke_fails_on_multiple_match ... ok
blam! test state::test::cuke_invokes ... ok
blam! test state::test::find_match_optional_args_work ... ok
blam! test server::test::it_relays_commands_to_the_runner ... ok
blam! 
blam! test result: ok. 44 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/cuke-a9fe23824232f0ff
blam! 
blam! running 1 test
blam! test cuke ... FAILED
blam! 
blam! failures:
blam! 
blam! ---- cuke stdout ----
blam! 	thread 'cuke' panicked at 'failed to execute process: No such file or directory (os error 2)', src/launcher.rs:61
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! 
blam! failures:
blam!     cuke
blam! 
blam! test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured
blam! 
kablam! error: test failed
boom! running `docker rm -f 34b6ac6ca4ebd86abcd5bd0f2ef7dd705474720764b374489af829acbfb5a664`
blam! 34b6ac6ca4ebd86abcd5bd0f2ef7dd705474720764b374489af829acbfb5a664
