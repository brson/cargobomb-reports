boom! testing graphml-0.1.0 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! bddfc86a5a446970362fb389014cf30483980bfe538f3e22c4858ec6a2eb8a52
boom! running `docker start -a bddfc86a5a446970362fb389014cf30483980bfe538f3e22c4858ec6a2eb8a52`
kablam!    Compiling serde_xml v0.6.3
kablam!    Compiling quasi_codegen v0.7.0
kablam! error[E0271]: type mismatch resolving `for<'cx, 'r, 'r> <fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_stmt::<'_>} as std::ops::FnOnce<(&'cx mut syntax::ext::base::ExtCtxt<'r>, syntax::codemap::Span, &'r [syntax::ast::TokenTree])>>::Output == std::boxed::Box<syntax::ext::base::MacResult + 'cx>`
kablam!    --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/quasi_codegen-0.7.0/src/lib.rs:728:9
kablam!     |
kablam! 728 |     reg.add_macro("quote_stmt", expand_quote_stmt);
kablam!     |         ^^^^^^^^^ expected bound lifetime parameter 'cx, found concrete lifetime
kablam!     |
kablam!     = note: concrete lifetime that was found is lifetime '_#56r
kablam!     = note: required because of the requirements on the impl of `syntax::ext::base::TTMacroExpander` for `fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_stmt::<'_>}`
kablam! 
kablam! error[E0271]: type mismatch resolving `for<'cx, 'r, 'r> <fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_item::<'_>} as std::ops::FnOnce<(&'cx mut syntax::ext::base::ExtCtxt<'r>, syntax::codemap::Span, &'r [syntax::ast::TokenTree])>>::Output == std::boxed::Box<syntax::ext::base::MacResult + 'cx>`
kablam!    --> /cargo-home/registry/src/github.com-1ecc6299db9ec823/quasi_codegen-0.7.0/src/lib.rs:733:9
kablam!     |
kablam! 733 |     reg.add_macro("quote_item", expand_quote_item);
kablam!     |         ^^^^^^^^^ expected bound lifetime parameter 'cx, found concrete lifetime
kablam!     |
kablam!     = note: concrete lifetime that was found is lifetime '_#119r
kablam!     = note: required because of the requirements on the impl of `syntax::ext::base::TTMacroExpander` for `fn(&mut syntax::ext::base::ExtCtxt<'_>, syntax::codemap::Span, &[syntax::ast::TokenTree]) -> std::boxed::Box<syntax::ext::base::MacResult> {expand_quote_item::<'_>}`
kablam! 
kablam! error: aborting due to 2 previous errors
kablam! 
kablam! error: Could not compile `quasi_codegen`.
blam! Build failed, waiting for other jobs to finish...
kablam! error: build failed
boom! running `docker rm -f bddfc86a5a446970362fb389014cf30483980bfe538f3e22c4858ec6a2eb8a52`
blam! bddfc86a5a446970362fb389014cf30483980bfe538f3e22c4858ec6a2eb8a52
