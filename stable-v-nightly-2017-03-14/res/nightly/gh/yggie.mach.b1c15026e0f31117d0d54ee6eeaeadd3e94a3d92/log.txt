boom! testing https://github.com/yggie/mach#b1c15026e0f31117d0d54ee6eeaeadd3e94a3d92 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 48ba79d55d6dd45fca7c0bd65af22e20a4166bb2a16fed3f9b3a688e223da665
boom! running `docker start -a 48ba79d55d6dd45fca7c0bd65af22e20a4166bb2a16fed3f9b3a688e223da665`
kablam!    Compiling mach v0.0.1 (file:///source)
kablam! warning: unused variable: `sphere`
kablam!  --> src/collisions/shapes/convex_shapes/intersections/ray_sphere_intersection.rs:8:28
kablam!   |
kablam! 8 |     fn intersection(&self, sphere: &Sphere) -> Option<Self::Output> {
kablam!   |                            ^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `Vec3D`
kablam!  --> src/collisions/detection/gjkepa/gjk.rs:2:29
kablam!   |
kablam! 2 | use maths::{Approximations, Vec3D};
kablam!   |                             ^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `ray`
kablam!   --> src/collisions/broadphase/brute_force_broadphase.rs:97:31
kablam!    |
kablam! 97 |     fn cast_ray<'a>(&'a self, ray: &Ray) -> Box<Iterator<Item=Ref<O>> + 'a> {
kablam!    |                               ^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 6.21 secs
boom! running `docker rm -f 48ba79d55d6dd45fca7c0bd65af22e20a4166bb2a16fed3f9b3a688e223da665`
blam! 48ba79d55d6dd45fca7c0bd65af22e20a4166bb2a16fed3f9b3a688e223da665
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! f99d4b15730d13761c869034bffdcc61a6ada0eff0a71c703ceacfa4216c8206
boom! running `docker start -a f99d4b15730d13761c869034bffdcc61a6ada0eff0a71c703ceacfa4216c8206`
kablam!    Compiling phf_generator v0.7.20
kablam!    Compiling shared_library v0.1.5
kablam!    Compiling wayland-scanner v0.5.11
kablam!    Compiling nalgebra v0.10.1
kablam!    Compiling phf_codegen v0.7.20
kablam!    Compiling osmesa-sys v0.1.2
kablam!    Compiling target_build_utils v0.1.2
kablam!    Compiling gl_generator v0.5.2
kablam!    Compiling wayland-client v0.5.12
kablam!    Compiling fs2 v0.2.5
kablam!    Compiling glutin v0.6.2
kablam!    Compiling memmap v0.2.3
kablam!    Compiling env_logger v0.3.5
kablam!    Compiling libloading v0.3.1
kablam!    Compiling glium v0.15.0
kablam!    Compiling dlib v0.3.1
kablam!    Compiling wayland-sys v0.5.11
kablam!    Compiling quickcheck v0.4.1
kablam!    Compiling time v0.1.35
kablam!    Compiling wayland-kbd v0.3.6
kablam!    Compiling tempfile v2.1.4
kablam!    Compiling x11-dl v2.12.0
kablam!    Compiling wayland-window v0.2.3
kablam!    Compiling mach v0.0.1 (file:///source)
kablam! warning: field is never used: `color`
kablam!  --> examples/raytracing/point_light.rs:6:5
kablam!   |
kablam! 6 |     color: Color,
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `position`
kablam!  --> examples/raytracing/point_light.rs:7:5
kablam!   |
kablam! 7 |     position: Vec3D,
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `color`
kablam!  --> examples/raytracing/directional_light.rs:6:5
kablam!   |
kablam! 6 |     color: Color,
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `direction`
kablam!  --> examples/raytracing/directional_light.rs:7:5
kablam!   |
kablam! 7 |     direction: UnitVec3D,
kablam!   |     ^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused import: `CollisionObjectSpace`
kablam!  --> examples/ray_tracing_demo.rs:8:12
kablam!   |
kablam! 8 | use mach::{CollisionObjectSpace, DynamicBody, MachWorld, UnitVec3D, Vec3D, World};
kablam!   |            ^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: field is never used: `point_lights`
kablam!   --> examples/ray_tracing_demo.rs:19:5
kablam!    |
kablam! 19 |     point_lights: Vec<PointLight>,
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `max_ray_bounces`
kablam!   --> examples/ray_tracing_demo.rs:20:5
kablam!    |
kablam! 20 |     max_ray_bounces: usize,
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: field is never used: `directional_lights`
kablam!   --> examples/ray_tracing_demo.rs:21:5
kablam!    |
kablam! 21 |     directional_lights: Vec<DirectionalLight>,
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `sphere`
kablam!  --> src/collisions/shapes/convex_shapes/intersections/ray_sphere_intersection.rs:8:28
kablam!   |
kablam! 8 |     fn intersection(&self, sphere: &Sphere) -> Option<Self::Output> {
kablam!   |                            ^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `Vec3D`
kablam!  --> src/collisions/detection/gjkepa/gjk.rs:2:29
kablam!   |
kablam! 2 | use maths::{Approximations, Vec3D};
kablam!   |                             ^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `ray`
kablam!   --> src/collisions/broadphase/brute_force_broadphase.rs:97:31
kablam!    |
kablam! 97 |     fn cast_ray<'a>(&'a self, ray: &Ray) -> Box<Iterator<Item=Ref<O>> + 'a> {
kablam!    |                               ^^^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 100.41 secs
boom! running `docker rm -f f99d4b15730d13761c869034bffdcc61a6ada0eff0a71c703ceacfa4216c8206`
blam! f99d4b15730d13761c869034bffdcc61a6ada0eff0a71c703ceacfa4216c8206
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! cbb67a9508ffed23b76721fd3ea3b060496df8848847ae362d623f2a35da9174
boom! running `docker start -a cbb67a9508ffed23b76721fd3ea3b060496df8848847ae362d623f2a35da9174`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/mach-e8679a1298287f02
blam! 
blam! running 114 tests
blam! test collisions::collision_group::tests::it_allows_environment_group_to_collide_with_all_other_groups ... ok
blam! test collisions::broadphase::brute_force_broadphase::tests::broadphase_behaviour::it_generates_close_proximity_pairs_for_intersecting_bodies ... ok
blam! test collisions::broadphase::brute_force_broadphase::tests::broadphase_behaviour::it_does_not_generate_close_proximity_pairs_for_intersecting_environment_bodies ... ok
blam! test collisions::collision_group::tests::it_allows_non_environment_groups_to_collide_within_the_group ... ok
blam! test collisions::broadphase::brute_force_broadphase::tests::broadphase_behaviour::it_does_not_allow_environment_bodies_to_collide ... ok
blam! test collisions::collisionobjectspace::mach_collision_object_space::tests::collision_object_space_behaviour::it_generates_unique_ids ... ok
blam! test collisions::collision_group::tests::it_does_not_allow_non_environment_groups_to_collide_across_groups ... ok
blam! test collisions::collisionobjectspace::mach_collision_object_space::tests::collision_object_space_behaviour::it_only_considers_non_environment_bodies_as_foreground ... ok
blam! test collisions::collision_group::tests::it_does_not_allow_environment_group_to_collide_with_itself ... ok
blam! test collisions::detection::gjkepa::contact_tracker::tests::it_can_be_instantiated_with_intersecting_bodies ... ok
blam! test collisions::detection::gjkepa::contact_tracker::tests::it_can_be_instantiated_with_non_intersecting_bodies ... ok
blam! test collisions::detection::gjkepa::gjk_epa_detection::tests::detection_behaviour::it_does_not_return_false_positives ... ok
blam! test collisions::detection::gjkepa::gjk_epa_detection::tests::detection_behaviour::it_handles_edge_edge_collisions ... ok
blam! test collisions::detection::gjkepa::gjk_epa_detection::tests::detection_behaviour::it_handles_edge_face_collisions ... ok
blam! test collisions::detection::gjkepa::gjk_epa_detection::tests::detection_behaviour::it_handles_face_face_collisions ... ok
blam! test collisions::detection::gjkepa::gjk_epa_detection::tests::detection_behaviour::it_handles_vertex_face_collisions ... ok
blam! test collisions::detection::gjkepa::gjk_simplex::tests::it_returns_an_error_when_the_vertices_are_coplanar ... ok
blam! test collisions::detection::gjkepa::minkowski_difference::tests::it_always_generates_a_valid_support_point ... ok
blam! test collisions::detection::gjkepa::minkowski_difference::tests::it_behaves_like_a_support_map ... ok
blam! test collisions::narrowphase::null_narrowphase::tests::narrowphase_behaviour::it_passes_the_collision_test_for_definitely_intersecting_bodies ... ok
blam! test collisions::shapes::_2d::intersections::polygon_and_polygon_2d_intersection::tests::it_recognises_when_a_polygon_is_fully_encapsulated_by_another ... ok
blam! test collisions::shapes::_2d::intersections::polygon_and_polygon_2d_intersection::tests::it_recognises_when_the_polygons_do_not_intersect ... ok
blam! test collisions::shapes::_2d::intersections::polygon_and_polygon_2d_intersection::tests::it_recognises_when_the_polygons_intersect_excluding_any_points_on_either_polygon ... ok
blam! test collisions::shapes::_2d::intersections::polygon_and_polygon_2d_intersection::tests::it_recognises_when_the_polygons_intersect_including_points_on_the_polygons ... ok
blam! test collisions::shapes::_2d::intersections::ray_and_ray_2d_intersection::tests::it_correctly_identifies_intersecting_rays ... ok
blam! test collisions::shapes::_2d::intersections::ray_and_ray_2d_intersection::tests::it_correctly_identifies_non_intersecting_rays ... ok
blam! test collisions::shapes::_2d::plane_2d::tests::it_can_project_2d_vectors_along_the_plane_normal ... ok
blam! test collisions::shapes::_2d::polygon::tests::it_cannot_be_created_with_less_than_3_points ... ok
blam! test collisions::shapes::_2d::polygon::tests::it_generates_convex_polygons_from_arbitrary_points ... ok
blam! test collisions::shapes::convex_shapes::convex_polyhedron::tests::it_returns_an_error_with_coplanar_points ... ok
blam! test collisions::shapes::convex_shapes::convex_polyhedron::tests::it_returns_an_error_with_too_few_points ... ok
blam! test collisions::shapes::convex_shapes::cuboid::tests::computing_the_number_of_vertices ... ok
blam! test collisions::shapes::convex_shapes::cuboid::tests::computing_the_support_indices ... ok
blam! test collisions::shapes::convex_shapes::cuboid::tests::computing_the_volume ... ok
blam! test collisions::shapes::convex_shapes::cuboid::tests::determining_equality ... ok
blam! test collisions::shapes::convex_shapes::cuboid::tests::instantiating_with_dimensions ... ok
blam! test collisions::shapes::convex_shapes::cuboid::tests::it_behaves_like_a_support_map ... ok
blam! test collisions::shapes::convex_shapes::sphere::tests::it_behaves_like_a_support_map ... ok
blam! test collisions::shapes::direction::direction_test::it_can_be_transformed_by_a_transform ... ok
blam! test collisions::shapes::direction::direction_test::it_can_be_transformed_by_the_inverse_of_a_transform ... ok
blam! test collisions::shapes::line_projection::tests::it_recognises_projected_points_before_the_start_of_the_line ... ok
blam! test collisions::shapes::line_projection::tests::it_recognises_projected_points_beyond_the_end_of_the_line ... ok
blam! test collisions::shapes::line_projection::tests::it_recognises_projected_points_on_the_line ... ok
blam! test collisions::shapes::ray::tests::it_can_compute_the_closest_point_to_another_ray ... ok
blam! test collisions::shapes::support_map::vec_tests::it_behaves_like_a_support_map ... ok
blam! test dynamics::integrators::semi_implicit_euler::tests::integrator_behaviour::it_can_correctly_integrate_zero_motion ... ok
blam! test dynamics::integrators::semi_implicit_euler::tests::integrator_behaviour::it_correctly_integrates_simple_constant_force_linear_motion ... ok
blam! test dynamics::integrators::semi_implicit_euler::tests::integrator_behaviour::it_correctly_integrates_simple_constant_velocity_linear_motion ... ok
blam! test dynamics::integrators::semi_implicit_euler::tests::integrator_behaviour::it_does_not_change_velocity_or_angular_velocity_with_no_applied_force ... ok
blam! test mach_world::tests::world_behaviour::it_can_simulate_collisions_with_rotation ... ok
blam! test mach_world::tests::world_behaviour::it_can_simulate_collisions_without_rotation ... ok
blam! test mach_world::tests::world_behaviour::it_can_simulate_constant_velocity ... ok
blam! test maths::_2d::unit_vec_2d::tests::it_always_has_a_length_of_one ... ok
blam! test maths::_2d::vec_2d::tests::it_can_be_rotated_90_degrees_counter_clockwise ... ok
blam! test maths::matrix::matrix_test::adding_a_matrix ... ok
blam! test maths::matrix::matrix_test::computing_the_determinant ... ok
blam! test maths::matrix::matrix_test::computing_the_inverse ... ok
blam! test maths::matrix::matrix_test::dividing_by_a_scalar ... ok
blam! test maths::matrix::matrix_test::getting_elements_by_element_position ... ok
blam! test maths::matrix::matrix_test::instantiating_as_a_diagonal_matrix ... ok
blam! test maths::matrix::matrix_test::instantiating_as_a_skew_matrix ... ok
blam! test maths::matrix::matrix_test::instantiating_as_the_identity_matrix ... ok
blam! test maths::matrix::matrix_test::instantiating_from_a_slice ... ok
blam! test maths::matrix::matrix_test::instantiating_from_axis_angle ... ok
blam! test maths::matrix::matrix_test::instantiating_with_components ... ok
blam! test maths::matrix::matrix_test::multiplying_by_a_matrix ... ok
blam! test maths::matrix::matrix_test::multiplying_by_a_scalar ... ok
blam! test maths::matrix::matrix_test::multiplying_by_a_vector ... ok
blam! test maths::matrix::matrix_test::negating ... ok
blam! test maths::matrix::matrix_test::setting_by_index ... ok
blam! test maths::matrix::matrix_test::subtrating_by_a_matrix ... ok
blam! test maths::quat::quat_test::it_can_be_cloned ... ok
blam! test maths::quat::quat_test::it_can_be_instantiated_as_the_identity_quaternion ... ok
blam! test maths::quat::quat_test::it_can_be_instantiated_from_a_vector ... ok
blam! test maths::quat::quat_test::it_can_be_instantiated_with_scalars ... ok
blam! test maths::quat::quat_test::it_can_be_normalized ... ok
blam! test maths::quat::quat_test::it_can_compute_the_inverse ... ok
blam! test maths::quat::quat_test::it_can_compute_the_length ... ok
blam! test maths::quat::quat_test::it_can_compute_the_squared_length ... ok
blam! test maths::quat::quat_test::it_supports_quaternion_multiplication_using_the_multiplication_operator ... ok
blam! test maths::quat::quat_test::it_supports_quaternion_multiplication_with_a_scalar ... ok
blam! test maths::quat::quat_test::it_supports_quaternion_multiplication_with_scalars ... ok
blam! test maths::quat::quat_test::it_supports_scalar_multiplication_using_the_multiplication_operator ... ok
blam! test maths::quat::quat_test::it_supports_the_division_operator_with_scalars ... ok
blam! test maths::quat::quat_test::it_supports_the_subtraction_operator_with_quaternions ... ok
blam! test maths::quat::quat_test::it_supports_the_unary_negation_operator ... ok
blam! test maths::sparse_matrix::sparse_matrix_test::it_zeroes_all_entries_by_default ... ok
blam! test maths::transform::transform_test::it_can_be_apply_itself_to_a_point ... ok
blam! test maths::transform::transform_test::it_can_be_instantiated_as_the_identity_transform ... ok
blam! test maths::transform::transform_test::it_can_be_instantiated_with_translation_and_rotation ... ok
blam! test maths::unit_quat::tests::it_can_be_instantiated_using_the_axis_angle_formulation ... ok
blam! test maths::unit_quat::tests::it_can_rotate_a_vector ... ok
blam! test maths::unit_vec_3d::tests::computing_the_normalized_vector ... ok
blam! test maths::vec_3d::tests::cloning ... ok
blam! test maths::vec_3d::tests::computing_distance_between_vectors ... ok
blam! test maths::vec_3d::tests::computing_the_cross_product ... ok
blam! test maths::vec_3d::tests::computing_the_inner_product ... ok
blam! test maths::vec_3d::tests::computing_the_outer_product ... ok
blam! test maths::vec_3d::tests::computing_the_squared_length ... ok
blam! test maths::vec_3d::tests::computing_the_vector_length ... ok
blam! test maths::vec_3d::tests::dereferencing_elements_by_index ... ok
blam! test maths::vec_3d::tests::it_can_be_cloned ... ok
blam! test maths::vec_3d::tests::it_can_be_instantiated_with_scalars ... ok
blam! test maths::vec_3d::tests::it_can_be_instatiated_as_the_zero_vector ... ok
blam! test maths::vec_3d::tests::it_supports_the_addition_operator_with_vectors ... ok
blam! test maths::vec_3d::tests::it_supports_the_subtraction_operator_with_vectors ... ok
blam! test maths::vec_3d::tests::multiplying_by_a_scalar ... ok
blam! test maths::vec_3d::tests::mutably_dereferencing_elements_by_index ... ok
blam! test maths::vec_3d::tests::negating ... ok
blam! test utils::compute_surfaces_for_convex_hull::tests::it_works_with_a_cube ... ok
blam! test utils::compute_surfaces_for_convex_hull::tests::it_works_with_a_tetrahedron ... ok
blam! test collisions::detection::gjkepa::epa::tests::it_generates_valid_convex_polyhedron ... ok
blam! test collisions::detection::gjkepa::gjk_epa_detection::tests::detection_behaviour::it_does_not_return_false_negatives ... ok
blam! test collisions::detection::gjkepa::gjk_epa_detection::tests::detection_behaviour::it_always_has_the_normal_pointing_towards_the_first_body ... ok
blam! 
blam! test result: ok. 114 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests mach
blam! 
blam! running 3 tests
blam! test src/maths/matrix.rs - maths::matrix::Matrix::fmt (line 125) ... ignored
blam! test src/maths/quat.rs - maths::quat::Quat::fmt (line 106) ... ignored
blam! test src/maths/vec_3d.rs - maths::vec_3d::Vec3D (line 79) ... ok
blam! 
blam! test result: ok. 1 passed; 0 failed; 2 ignored; 0 measured
blam! 
boom! running `docker rm -f cbb67a9508ffed23b76721fd3ea3b060496df8848847ae362d623f2a35da9174`
blam! cbb67a9508ffed23b76721fd3ea3b060496df8848847ae362d623f2a35da9174
