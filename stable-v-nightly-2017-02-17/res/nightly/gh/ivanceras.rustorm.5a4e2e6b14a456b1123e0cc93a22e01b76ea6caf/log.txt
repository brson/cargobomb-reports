boom! testing https://github.com/ivanceras/rustorm#5a4e2e6b14a456b1123e0cc93a22e01b76ea6caf against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! e1def3bfa07dfd28a82afd009eb7a30a228456811db6cc0a2cd484956576f04f
boom! running `docker start -a e1def3bfa07dfd28a82afd009eb7a30a228456811db6cc0a2cd484956576f04f`
kablam!    Compiling unicode-bidi v0.2.3
kablam!    Compiling memchr v0.1.11
kablam!    Compiling uuid v0.3.1
kablam!    Compiling time v0.1.35
kablam!    Compiling thread-id v2.0.0
kablam!    Compiling aho-corasick v0.5.3
kablam!    Compiling thread_local v0.2.7
kablam!    Compiling chrono v0.2.25
kablam!    Compiling idna v0.1.0
kablam!    Compiling regex v0.1.80
kablam!    Compiling url v1.2.3
kablam!    Compiling postgres v0.11.11
kablam!    Compiling env_logger v0.3.5
kablam!    Compiling r2d2_postgres v0.10.1
kablam!    Compiling rustorm v0.5.6 (file:///source)
kablam! warning: unused import: `Value`
kablam!  --> src/query/mod.rs:1:11
kablam!   |
kablam! 1 | use dao::{Value, ToValue};
kablam!   |           ^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `table::Table`
kablam!  --> src/query/mod.rs:2:5
kablam!   |
kablam! 2 | use table::Table;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::collections::BTreeMap`
kablam!  --> src/query/mod.rs:3:5
kablam!   |
kablam! 3 | use std::collections::BTreeMap;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::fmt`
kablam!   --> src/query/mod.rs:10:5
kablam!    |
kablam! 10 | use std::fmt;
kablam!    |     ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::HasEquality`
kablam!  --> src/query/column_name.rs:1:5
kablam!   |
kablam! 1 | use query::HasEquality;
kablam!   |     ^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `dao::ToValue`
kablam!  --> src/query/column_name.rs:2:5
kablam!   |
kablam! 2 | use dao::ToValue;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Filter`
kablam!  --> src/query/column_name.rs:3:5
kablam!   |
kablam! 3 | use query::Filter;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Equality`
kablam!  --> src/query/column_name.rs:4:5
kablam!   |
kablam! 4 | use query::Equality;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Condition`
kablam!  --> src/query/column_name.rs:7:5
kablam!   |
kablam! 7 | use query::Condition;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Operand`
kablam!  --> src/query/column_name.rs:8:5
kablam!   |
kablam! 8 | use query::Operand;
kablam!   |     ^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Connector`
kablam!  --> src/query/column_name.rs:9:5
kablam!   |
kablam! 9 | use query::Connector;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::operand::ToOperand`
kablam!   --> src/query/column_name.rs:10:5
kablam!    |
kablam! 10 | use query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Join`
kablam!  --> src/query/table_name.rs:4:5
kablam!   |
kablam! 4 | use query::Join;
kablam!   |     ^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Filter`
kablam!  --> src/query/table_name.rs:5:5
kablam!   |
kablam! 5 | use query::Filter;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `ColumnName`
kablam!  --> src/query/filter.rs:3:13
kablam!   |
kablam! 3 | use query::{ColumnName, ToColumnName};
kablam!   |             ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `dao::Value`
kablam!  --> src/query/filter.rs:4:5
kablam!   |
kablam! 4 | use dao::Value;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::ops::BitAnd`
kablam!  --> src/query/filter.rs:5:5
kablam!   |
kablam! 5 | use std::ops::BitAnd;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::ops::BitOr`
kablam!  --> src/query/filter.rs:6:5
kablam!   |
kablam! 6 | use std::ops::BitOr;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `dao::Type`
kablam!  --> src/query/filter.rs:8:5
kablam!   |
kablam! 8 | use dao::Type;
kablam!   |     ^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: method `AND` should have a snake case name such as `and`
kablam!   --> src/query/filter.rs:71:5
kablam!    |
kablam! 71 |       pub fn AND(mut self, filter: Filter) -> Self {
kablam!    |  _____^ starting here...
kablam! 72 | |         let mut filter = filter.clone();
kablam! 73 | |         filter.connector = Connector::And;
kablam! 74 | |         self.sub_filters.push(filter);
kablam! 75 | |         self
kablam! 76 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `OR` should have a snake case name such as `or`
kablam!   --> src/query/filter.rs:77:5
kablam!    |
kablam! 77 |       pub fn OR(mut self, filter: Filter) -> Self {
kablam!    |  _____^ starting here...
kablam! 78 | |         let mut filter = filter.clone();
kablam! 79 | |         filter.connector = Connector::Or;
kablam! 80 | |         self.sub_filters.push(filter);
kablam! 81 | |         self
kablam! 82 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `EQ` should have a snake case name such as `eq`
kablam!   --> src/query/filter.rs:88:5
kablam!    |
kablam! 88 |     fn EQ(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `NEQ` should have a snake case name such as `neq`
kablam!   --> src/query/filter.rs:89:5
kablam!    |
kablam! 89 |     fn NEQ(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `GT` should have a snake case name such as `gt`
kablam!   --> src/query/filter.rs:90:5
kablam!    |
kablam! 90 |     fn GT(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `GTE` should have a snake case name such as `gte`
kablam!   --> src/query/filter.rs:91:5
kablam!    |
kablam! 91 |     fn GTE(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `LT` should have a snake case name such as `lt`
kablam!   --> src/query/filter.rs:92:5
kablam!    |
kablam! 92 |     fn LT(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `LTE` should have a snake case name such as `lte`
kablam!   --> src/query/filter.rs:93:5
kablam!    |
kablam! 93 |     fn LTE(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `LIKE` should have a snake case name such as `like`
kablam!   --> src/query/filter.rs:94:5
kablam!    |
kablam! 94 |     fn LIKE(&self, to_value: &ToValue) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ILIKE` should have a snake case name such as `ilike`
kablam!   --> src/query/filter.rs:95:5
kablam!    |
kablam! 95 |     fn ILIKE(&self, to_value: &ToValue) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `IS_NULL` should have a snake case name such as `is_null`
kablam!   --> src/query/filter.rs:96:5
kablam!    |
kablam! 96 |     fn IS_NULL(&self) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `IS_NOT_NULL` should have a snake case name such as `is_not_null`
kablam!   --> src/query/filter.rs:97:5
kablam!    |
kablam! 97 |     fn IS_NOT_NULL(&self) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `IN` should have a snake case name such as `in`
kablam!   --> src/query/filter.rs:98:5
kablam!    |
kablam! 98 |     fn IN(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `NOT_IN` should have a snake case name such as `not_in`
kablam!   --> src/query/filter.rs:99:5
kablam!    |
kablam! 99 |     fn NOT_IN(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::Direction`
kablam!  --> src/query/builder.rs:3:5
kablam!   |
kablam! 3 | use query::Direction;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Equality`
kablam!  --> src/query/builder.rs:4:5
kablam!   |
kablam! 4 | use query::Equality;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ColumnName`, `ToColumnName`
kablam!  --> src/query/builder.rs:7:13
kablam!   |
kablam! 7 | use query::{ColumnName, ToColumnName};
kablam!   |             ^^^^^^^^^^  ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::NullsWhere`
kablam!  --> src/query/builder.rs:8:5
kablam!   |
kablam! 8 | use query::NullsWhere;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `TableName`
kablam!   --> src/query/builder.rs:10:13
kablam!    |
kablam! 10 | use query::{TableName, ToTableName};
kablam!    |             ^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `Value`
kablam!   --> src/query/builder.rs:12:11
kablam!    |
kablam! 12 | use dao::{Value, ToValue};
kablam!    |           ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Order`
kablam!   --> src/query/builder.rs:14:5
kablam!    |
kablam! 14 | use query::Order;
kablam!    |     ^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `HasDirection`
kablam!   --> src/query/builder.rs:16:29
kablam!    |
kablam! 16 | use query::order::{ToOrder, HasDirection};
kablam!    |                             ^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `database::BuildMode`
kablam!   --> src/query/builder.rs:19:5
kablam!    |
kablam! 19 | use database::BuildMode;
kablam!    |     ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::join::ToJoin`
kablam!   --> src/query/builder.rs:20:5
kablam!    |
kablam! 20 | use query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::ToField`
kablam!   --> src/query/builder.rs:24:5
kablam!    |
kablam! 24 | use query::ToField;
kablam!    |     ^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: function `SELECT_ALL` should have a snake case name such as `select_all`
kablam!   --> src/query/builder.rs:33:1
kablam!    |
kablam! 33 |   pub fn SELECT_ALL() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 34 | |     QueryBuilder::SELECT_ALL()
kablam! 35 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `SELECT` should have a snake case name such as `select`
kablam!   --> src/query/builder.rs:37:1
kablam!    |
kablam! 37 |   pub fn SELECT() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 38 | |     QueryBuilder::SELECT()
kablam! 39 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `INSERT` should have a snake case name such as `insert`
kablam!   --> src/query/builder.rs:41:1
kablam!    |
kablam! 41 |   pub fn INSERT() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 42 | |     QueryBuilder::INSERT()
kablam! 43 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `UPDATE` should have a snake case name such as `update`
kablam!   --> src/query/builder.rs:45:1
kablam!    |
kablam! 45 |   pub fn UPDATE(to_table_name: &ToTableName) -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 46 | |     QueryBuilder::UPDATE(to_table_name)
kablam! 47 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `DELETE` should have a snake case name such as `delete`
kablam!   --> src/query/builder.rs:49:1
kablam!    |
kablam! 49 |   pub fn DELETE() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 50 | |     QueryBuilder::DELETE()
kablam! 51 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `WITH` should have a snake case name such as `with`
kablam!   --> src/query/builder.rs:59:5
kablam!    |
kablam! 59 |     pub fn WITH(&mut self, query: Query, alias: &str) -> &mut Self {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `WITH_RECURSIVE` should have a snake case name such as `with_recursive`
kablam!   --> src/query/builder.rs:70:5
kablam!    |
kablam! 70 |     pub fn WITH_RECURSIVE(&mut self, query: Query, alias: &str) -> &mut Self {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `SELECT` should have a snake case name such as `select`
kablam!   --> src/query/builder.rs:81:5
kablam!    |
kablam! 81 |       pub fn SELECT() -> Self {
kablam!    |  _____^ starting here...
kablam! 82 | |         let mut q = Query::select();
kablam! 83 | |         QueryBuilder { query: q }
kablam! 84 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/query/builder.rs:82:13
kablam!    |
kablam! 82 |         let mut q = Query::select();
kablam!    |             ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: method `SELECT_ALL` should have a snake case name such as `select_all`
kablam!   --> src/query/builder.rs:85:5
kablam!    |
kablam! 85 |       pub fn SELECT_ALL() -> Self {
kablam!    |  _____^ starting here...
kablam! 86 | |         let mut qb = Self::SELECT();
kablam! 87 | |         qb.ALL();
kablam! 88 | |         qb
kablam! 89 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `INSERT` should have a snake case name such as `insert`
kablam!   --> src/query/builder.rs:91:5
kablam!    |
kablam! 91 |       pub fn INSERT() -> Self {
kablam!    |  _____^ starting here...
kablam! 92 | |         let mut q = Query::insert();
kablam! 93 | |         QueryBuilder { query: q }
kablam! 94 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/query/builder.rs:92:13
kablam!    |
kablam! 92 |         let mut q = Query::insert();
kablam!    |             ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: method `UPDATE` should have a snake case name such as `update`
kablam!    --> src/query/builder.rs:95:5
kablam!     |
kablam! 95  |     pub fn UPDATE(to_table_name: &ToTableName) -> Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `DELETE` should have a snake case name such as `delete`
kablam!    --> src/query/builder.rs:105:5
kablam!     |
kablam! 105 |       pub fn DELETE() -> Self {
kablam!     |  _____^ starting here...
kablam! 106 | |         let mut q = Query::delete();
kablam! 107 | |         QueryBuilder { query: q }
kablam! 108 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/query/builder.rs:106:13
kablam!     |
kablam! 106 |         let mut q = Query::delete();
kablam!     |             ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: method `DISTINCT` should have a snake case name such as `distinct`
kablam!    --> src/query/builder.rs:111:5
kablam!     |
kablam! 111 |       pub fn DISTINCT(&mut self) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 112 | |         self.query.distinct = true;
kablam! 113 | |         self
kablam! 114 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `ALL` should have a snake case name such as `all`
kablam!    --> src/query/builder.rs:117:5
kablam!     |
kablam! 117 |       pub fn ALL(&mut self) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 118 | |         self.query.all();
kablam! 119 | |         self
kablam! 120 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `SET` should have a snake case name such as `set`
kablam!    --> src/query/builder.rs:122:5
kablam!     |
kablam! 122 |       pub fn SET(&mut self, column: &str, to_value: &ToValue) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 123 | |         self.query.set(column, to_value);
kablam! 124 | |         self
kablam! 125 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `COLUMNS` should have a snake case name such as `columns`
kablam!    --> src/query/builder.rs:127:5
kablam!     |
kablam! 127 |     pub fn COLUMNS(&mut self, to_operand: &[&ToOperand]) -> &mut Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `VALUES` should have a snake case name such as `values`
kablam!    --> src/query/builder.rs:138:5
kablam!     |
kablam! 138 |       pub fn VALUES(&mut self, to_values: &[&ToValue]) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 139 | |         for tov in to_values {
kablam! 140 | |             let v = tov.to_db_type();
kablam! 141 | |             let operand = Operand::Value(v);
kablam! 142 | |             self.query.values.push(operand);
kablam! 143 | |         }
kablam! 144 | |         self
kablam! 145 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `FROM` should have a snake case name such as `from`
kablam!    --> src/query/builder.rs:149:5
kablam!     |
kablam! 149 |       pub fn FROM(&mut self, to_source_field: &ToSourceField) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 150 | |         self.query.from(to_source_field);
kablam! 151 | |         self
kablam! 152 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `INTO` should have a snake case name such as `into`
kablam!    --> src/query/builder.rs:156:5
kablam!     |
kablam! 156 |       pub fn INTO(&mut self, table: &ToTableName) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 157 | |         assert_eq!(self.query.sql_type, SqlType::INSERT);
kablam! 158 | |         self.TABLE(table);
kablam! 159 | |         self
kablam! 160 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `TABLE` should have a snake case name such as `table`
kablam!    --> src/query/builder.rs:162:5
kablam!     |
kablam! 162 |     pub fn TABLE(&mut self, table: &ToTableName) -> &mut Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `JOIN` should have a snake case name such as `join`
kablam!    --> src/query/builder.rs:177:5
kablam!     |
kablam! 177 |       pub fn JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 178 | |         self.query.joins.push(join);
kablam! 179 | |         self
kablam! 180 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `LEFT_JOIN` should have a snake case name such as `left_join`
kablam!    --> src/query/builder.rs:184:5
kablam!     |
kablam! 184 |       pub fn LEFT_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 185 | |         let mut join = join.clone();
kablam! 186 | |         join.modifier = Some(Modifier::LEFT);
kablam! 187 | |         self.JOIN(join);
kablam! 188 | |         self
kablam! 189 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `RIGHT_JOIN` should have a snake case name such as `right_join`
kablam!    --> src/query/builder.rs:190:5
kablam!     |
kablam! 190 |       pub fn RIGHT_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 191 | |         let mut join = join.clone();
kablam! 192 | |         join.modifier = Some(Modifier::RIGHT);
kablam! 193 | |         self.JOIN(join);
kablam! 194 | |         self
kablam! 195 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `FULL_JOIN` should have a snake case name such as `full_join`
kablam!    --> src/query/builder.rs:196:5
kablam!     |
kablam! 196 |       pub fn FULL_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 197 | |         let mut join = join.clone();
kablam! 198 | |         join.modifier = Some(Modifier::FULL);
kablam! 199 | |         self.JOIN(join);
kablam! 200 | |         self
kablam! 201 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `INNER_JOIN` should have a snake case name such as `inner_join`
kablam!    --> src/query/builder.rs:202:5
kablam!     |
kablam! 202 |       pub fn INNER_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 203 | |         let mut join = join.clone();
kablam! 204 | |         join.join_type = Some(JoinType::INNER);
kablam! 205 | |         self.JOIN(join);
kablam! 206 | |         self
kablam! 207 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `WHERE` should have a snake case name such as `where`
kablam!    --> src/query/builder.rs:209:5
kablam!     |
kablam! 209 |       pub fn WHERE(&mut self, filter: Filter) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 210 | |         self.query.filters.push(filter);
kablam! 211 | |         self
kablam! 212 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `GROUP_BY` should have a snake case name such as `group_by`
kablam!    --> src/query/builder.rs:214:5
kablam!     |
kablam! 214 |     pub fn GROUP_BY(&mut self, to_operand: &ToOperand) -> &mut Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `HAVING` should have a snake case name such as `having`
kablam!    --> src/query/builder.rs:230:5
kablam!     |
kablam! 230 |       pub fn HAVING(&mut self, filter: Filter) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 231 | |         self.query.having.push(filter);
kablam! 232 | |         self
kablam! 233 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `ORDER_BY` should have a snake case name such as `order_by`
kablam!    --> src/query/builder.rs:236:5
kablam!     |
kablam! 236 |       pub fn ORDER_BY(&mut self, to_order: &ToOrder) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 237 | |         let mut orders = to_order.to_order();
kablam! 238 | |         self.query.order_by.append(&mut orders);
kablam! 239 | |         self
kablam! 240 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `LIMIT` should have a snake case name such as `limit`
kablam!    --> src/query/builder.rs:242:5
kablam!     |
kablam! 242 |       pub fn LIMIT(&mut self, n: usize) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 243 | |         self.query.set_limit(n);
kablam! 244 | |         self
kablam! 245 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `OFFSET` should have a snake case name such as `offset`
kablam!    --> src/query/builder.rs:247:5
kablam!     |
kablam! 247 |       pub fn OFFSET(&mut self, o: usize) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 248 | |         self.query.set_offset(o);
kablam! 249 | |         self
kablam! 250 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused imports: `ColumnName`, `ToColumnName`
kablam!  --> src/query/function.rs:3:13
kablam!   |
kablam! 3 | use query::{ColumnName, ToColumnName};
kablam!   |             ^^^^^^^^^^  ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: function `COUNT` should have a snake case name such as `count`
kablam!   --> src/query/function.rs:18:1
kablam!    |
kablam! 18 |   pub fn COUNT(to_operand: &ToOperand) -> Operand {
kablam!    |  _^ starting here...
kablam! 19 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 20 | |         function: "COUNT".to_owned(),
kablam! 21 | |         params: vec![to_operand.to_operand()],
kablam! 22 | |     }))
kablam! 23 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `MAX` should have a snake case name such as `max`
kablam!   --> src/query/function.rs:26:1
kablam!    |
kablam! 26 |   pub fn MAX(to_operand: &ToOperand) -> Operand {
kablam!    |  _^ starting here...
kablam! 27 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 28 | |         function: "MAX".to_owned(),
kablam! 29 | |         params: vec![to_operand.to_operand()],
kablam! 30 | |     }))
kablam! 31 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `MIN` should have a snake case name such as `min`
kablam!   --> src/query/function.rs:33:1
kablam!    |
kablam! 33 |   pub fn MIN(to_operand: &ToOperand) -> Operand {
kablam!    |  _^ starting here...
kablam! 34 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 35 | |         function: "MIN".to_owned(),
kablam! 36 | |         params: vec![to_operand.to_operand()],
kablam! 37 | |     }))
kablam! 38 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `NOW` should have a snake case name such as `now`
kablam!   --> src/query/function.rs:42:1
kablam!    |
kablam! 42 |   pub fn NOW() -> Operand {
kablam!    |  _^ starting here...
kablam! 43 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 44 | |         function: "NOW".to_owned(),
kablam! 45 | |         params: vec![],
kablam! 46 | |     }))
kablam! 47 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::Condition`
kablam!  --> src/query/join.rs:3:5
kablam!   |
kablam! 3 | use query::Condition;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: trait method `ON` should have a snake case name such as `on`
kablam!   --> src/query/join.rs:35:5
kablam!    |
kablam! 35 |     fn ON(&self, filter: Filter) -> Join;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::TableName`
kablam!  --> src/query/operand.rs:2:5
kablam!   |
kablam! 2 | use query::TableName;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Function`
kablam!  --> src/query/operand.rs:3:5
kablam!   |
kablam! 3 | use query::Function;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Query`
kablam!  --> src/query/operand.rs:4:5
kablam!   |
kablam! 4 | use query::Query;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Filter`
kablam!  --> src/query/operand.rs:6:5
kablam!   |
kablam! 6 | use query::Filter;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::HasEquality`
kablam!  --> src/query/operand.rs:8:5
kablam!   |
kablam! 8 | use query::HasEquality;
kablam!   |     ^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Condition`
kablam!  --> src/query/operand.rs:9:5
kablam!   |
kablam! 9 | use query::Condition;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Equality`
kablam!   --> src/query/operand.rs:10:5
kablam!    |
kablam! 10 | use query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Connector`
kablam!   --> src/query/operand.rs:11:5
kablam!    |
kablam! 11 | use query::Connector;
kablam!    |     ^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::collections::BTreeMap`
kablam!   --> src/query/operand.rs:15:5
kablam!    |
kablam! 15 | use std::collections::BTreeMap;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `chrono::offset::utc::UTC`
kablam!   --> src/query/operand.rs:21:5
kablam!    |
kablam! 21 | use chrono::offset::utc::UTC;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `json_string`
kablam!    --> src/query/operand.rs:154:13
kablam!     |
kablam! 154 |         let json_string = format!("{}", self.pretty());
kablam!     |             ^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `table::Column`
kablam!  --> src/query/order.rs:1:5
kablam!   |
kablam! 1 | use table::Column;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::ColumnName`
kablam!  --> src/query/order.rs:4:5
kablam!   |
kablam! 4 | use query::ColumnName;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: method `NULLS_FIRST` should have a snake case name such as `nulls_first`
kablam!   --> src/query/order.rs:31:5
kablam!    |
kablam! 31 |       pub fn NULLS_FIRST(mut self) -> Order {
kablam!    |  _____^ starting here...
kablam! 32 | |         self.nulls_where = Some(NullsWhere::FIRST);
kablam! 33 | |         self
kablam! 34 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `NULLS_LAST` should have a snake case name such as `nulls_last`
kablam!   --> src/query/order.rs:35:5
kablam!    |
kablam! 35 |       pub fn NULLS_LAST(mut self) -> Order {
kablam!    |  _____^ starting here...
kablam! 36 | |         self.nulls_where = Some(NullsWhere::FIRST);
kablam! 37 | |         self
kablam! 38 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ASC` should have a snake case name such as `asc`
kablam!   --> src/query/order.rs:75:5
kablam!    |
kablam! 75 |     fn ASC(&self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `DESC` should have a snake case name such as `desc`
kablam!   --> src/query/order.rs:76:5
kablam!    |
kablam! 76 |     fn DESC(&self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ASC_NULLS_FIRST` should have a snake case name such as `asc_nulls_first`
kablam!   --> src/query/order.rs:77:5
kablam!    |
kablam! 77 |     fn ASC_NULLS_FIRST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ASC_NULLS_LAST` should have a snake case name such as `asc_nulls_last`
kablam!   --> src/query/order.rs:78:5
kablam!    |
kablam! 78 |     fn ASC_NULLS_LAST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `DESC_NULLS_FIRST` should have a snake case name such as `desc_nulls_first`
kablam!   --> src/query/order.rs:79:5
kablam!    |
kablam! 79 |     fn DESC_NULLS_FIRST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `DESC_NULLS_LAST` should have a snake case name such as `desc_nulls_last`
kablam!   --> src/query/order.rs:80:5
kablam!    |
kablam! 80 |     fn DESC_NULLS_LAST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::ColumnName`
kablam!  --> src/query/field.rs:2:5
kablam!   |
kablam! 2 | use query::ColumnName;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::ToTableName`
kablam!  --> src/query/field.rs:3:5
kablam!   |
kablam! 3 | use query::ToTableName;
kablam!   |     ^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: trait method `AS` should have a snake case name such as `as`
kablam!   --> src/query/field.rs:42:5
kablam!    |
kablam! 42 |     fn AS(&self, s: &str) -> SourceField;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::Operand`
kablam!  --> src/query/source.rs:1:5
kablam!   |
kablam! 1 | use query::Operand;
kablam!   |     ^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Field`
kablam!  --> src/query/source.rs:2:5
kablam!   |
kablam! 2 | use query::Field;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ColumnName`, `ToColumnName`
kablam!  --> src/query/source.rs:6:26
kablam!   |
kablam! 6 | use query::column_name::{ColumnName, ToColumnName};
kablam!   |                          ^^^^^^^^^^  ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `table::Column`
kablam!  --> src/query/source.rs:7:5
kablam!   |
kablam! 7 | use table::Column;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::operand::ToOperand`
kablam!   --> src/query/source.rs:10:5
kablam!    |
kablam! 10 | use query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `chrono::offset::utc::UTC`
kablam!  --> src/dao.rs:7:5
kablam!   |
kablam! 7 | use chrono::offset::utc::UTC;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ToJson`, `self`
kablam!   --> src/dao.rs:12:29
kablam!    |
kablam! 12 | use rustc_serialize::json::{self, ToJson, Json};
kablam!    |                             ^^^^  ^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustc_serialize::DecoderHelpers`
kablam!   --> src/dao.rs:13:5
kablam!    |
kablam! 13 | use rustc_serialize::DecoderHelpers;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `x`
kablam!    --> src/dao.rs:149:34
kablam!     |
kablam! 149 |             &SerValue::NaiveDate(ref x) => {
kablam!     |                                  ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `x`
kablam!    --> src/dao.rs:154:34
kablam!     |
kablam! 154 |             &SerValue::NaiveTime(ref x) => {
kablam!     |                                  ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `x`
kablam!    --> src/dao.rs:159:38
kablam!     |
kablam! 159 |             &SerValue::NaiveDateTime(ref x) => {
kablam!     |                                      ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `value`
kablam!    --> src/dao.rs:423:25
kablam!     |
kablam! 423 |             if let Some(value) = value {
kablam!     |                         ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `ToSourceField`
kablam!   --> src/database.rs:22:47
kablam!    |
kablam! 22 | use query::source::{SourceField, QuerySource, ToSourceField};
kablam!    |                                               ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustc_serialize::json::Json`
kablam!   --> src/platform/postgres.rs:16:5
kablam!    |
kablam! 16 | use rustc_serialize::json::Json;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `postgres::types::IsNull`
kablam!   --> src/platform/postgres.rs:18:5
kablam!    |
kablam! 18 | use postgres::types::IsNull;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!   --> src/platform/postgres.rs:19:5
kablam!    |
kablam! 19 | use uuid::Uuid;
kablam!    |     ^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `postgres as pg`
kablam!   --> src/platform/postgres.rs:21:5
kablam!    |
kablam! 21 | use postgres as pg;
kablam!    |     ^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!   --> src/platform/postgres.rs:99:33
kablam!    |
kablam! 99 |                             Err(e) => None,
kablam!    |                                 ^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:111:33
kablam!     |
kablam! 111 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:123:33
kablam!     |
kablam! 123 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:135:33
kablam!     |
kablam! 135 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:147:33
kablam!     |
kablam! 147 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:159:33
kablam!     |
kablam! 159 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:171:33
kablam!     |
kablam! 171 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:183:33
kablam!     |
kablam! 183 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:195:33
kablam!     |
kablam! 195 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:207:33
kablam!     |
kablam! 207 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:219:33
kablam!     |
kablam! 219 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:231:33
kablam!     |
kablam! 231 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:243:33
kablam!     |
kablam! 243 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:255:33
kablam!     |
kablam! 255 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:267:33
kablam!     |
kablam! 267 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:279:33
kablam!     |
kablam! 279 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `table`
kablam!    --> src/table.rs:115:36
kablam!     |
kablam! 115 |     pub fn clean_lookupname(&self, table: &Table, lookup: &Table) -> String {
kablam!     |                                    ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `get_parent_table`
kablam!    --> src/table.rs:482:5
kablam!     |
kablam! 482 |       fn get_parent_table<'a>(&self, tables: &'a [Table]) -> Option<&'a Table> {
kablam!     |  _____^ starting here...
kablam! 483 | |         match &self.parent_table {
kablam! 484 | |             &Some(ref p_table) => {
kablam! 485 | |                 let tmp_table = Table::with_name(&p_table);
kablam! 486 | |                 Some(Self::get_table(&tmp_table.schema, &tmp_table.name, tables))
kablam! 487 | |             }
kablam! 488 | |             &None => None,
kablam! 489 | |         }
kablam! 490 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `is_inherited_column`
kablam!    --> src/table.rs:494:5
kablam!     |
kablam! 494 |     fn is_inherited_column(self, column: &str, tables: &[Table]) -> bool {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `column`
kablam!    --> src/table.rs:494:34
kablam!     |
kablam! 494 |     fn is_inherited_column(self, column: &str, tables: &[Table]) -> bool {
kablam!     |                                  ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `same_schema`
kablam!    --> src/table.rs:508:5
kablam!     |
kablam! 508 |     fn same_schema(&self, table: &Table) -> bool {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `via_column`
kablam!    --> src/table.rs:662:26
kablam!     |
kablam! 662 |         for (hi, linker, via_column) in has_many_indirect {
kablam!     |                          ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `n`
kablam!    --> src/table.rs:710:13
kablam!     |
kablam! 710 |         let n = primary_and_foreign.len();
kablam!     |             ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `column`
kablam!    --> src/table.rs:715:14
kablam!     |
kablam! 715 |         for (column, has_one) in has_ones {
kablam!     |              ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `Host`
kablam!  --> src/config.rs:1:16
kablam!   |
kablam! 1 | use url::{Url, Host};
kablam!   |                ^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!   --> src/config.rs:58:17
kablam!    |
kablam! 58 |             Err(e) => None,
kablam!    |                 ^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 36.80 secs
boom! running `docker rm -f e1def3bfa07dfd28a82afd009eb7a30a228456811db6cc0a2cd484956576f04f`
blam! e1def3bfa07dfd28a82afd009eb7a30a228456811db6cc0a2cd484956576f04f
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! 7c782a82698f111338c9712938a1762d44d7ad9dccba874c53ba2612ea9fa84e
boom! running `docker start -a 7c782a82698f111338c9712938a1762d44d7ad9dccba874c53ba2612ea9fa84e`
kablam!    Compiling rustorm v0.5.6 (file:///source)
kablam! warningwarning: unused import: `uuid::Uuid`
kablam!  --> tests/test_having.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_having.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_having.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_having.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_having.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_having.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_having.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_having.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! : unused import: `uuid::Uuid`
kablam!  --> tests/test_insert_query.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_insert_query.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_insert_query.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_insert_query.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_insert_query.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_insert_query.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasEquality`warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_from_multiple_tables.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_from_multiple_tables.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_from_multiple_tables.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_from_multiple_tables.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_from_multiple_tables.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_from_multiple_tables.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasEquality`
kablam!   --> tests/test_from_multiple_tables.rs:14:5
kablam!    |
kablam! 14 | use rustorm::query::HasEquality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_from_multiple_tables.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_from_multiple_tables.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_from_multiple_tables.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! 
kablam!   --> tests/test_insert_query.rs:14:5
kablam!    |
kablam! 14 | use rustorm::query::HasEquality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_insert_query.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_insert_query.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_insert_query.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::dao::ToValue`
kablam!   --> tests/test_insert_query.rs:19:5
kablam!    |
kablam! 19 | use rustorm::dao::ToValue;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `Value`
kablam!  --> src/query/mod.rs:1:11
kablam!   |
kablam! 1 | use dao::{Value, ToValue};
kablam!   |           ^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `table::Table`
kablam!  --> src/query/mod.rs:2:5
kablam!   |
kablam! 2 | use table::Table;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::collections::BTreeMap`
kablam!  --> src/query/mod.rs:3:5
kablam!   |
kablam! 3 | use std::collections::BTreeMap;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::fmt`
kablam!   --> src/query/mod.rs:10:5
kablam!    |
kablam! 10 | use std::fmt;
kablam!    |     ^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::HasEquality`
kablam!  --> src/query/column_name.rs:1:5
kablam!   |
kablam! 1 | use query::HasEquality;
kablam!   |     ^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `dao::ToValue`
kablam!  --> src/query/column_name.rs:2:5
kablam!   |
kablam! 2 | use dao::ToValue;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Filter`
kablam!  --> src/query/column_name.rs:3:5
kablam!   |
kablam! 3 | use query::Filter;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Equality`
kablam!  --> src/query/column_name.rs:4:5
kablam!   |
kablam! 4 | use query::Equality;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Condition`
kablam!  --> src/query/column_name.rs:7:5
kablam!   |
kablam! 7 | use query::Condition;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Operand`
kablam!  --> src/query/column_name.rs:8:5
kablam!   |
kablam! 8 | use query::Operand;
kablam!   |     ^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Connector`
kablam!  --> src/query/column_name.rs:9:5
kablam!   |
kablam! 9 | use query::Connector;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::operand::ToOperand`
kablam!   --> src/query/column_name.rs:10:5
kablam!    |
kablam! 10 | use query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Join`
kablam!  --> src/query/table_name.rs:4:5
kablam!   |
kablam! 4 | use query::Join;
kablam!   |     ^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Filter`
kablam!  --> src/query/table_name.rs:5:5
kablam!   |
kablam! 5 | use query::Filter;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `ColumnName`
kablam!  --> src/query/filter.rs:3:13
kablam!   |
kablam! 3 | use query::{ColumnName, ToColumnName};
kablam!   |             ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `dao::Value`
kablam!  --> src/query/filter.rs:4:5
kablam!   |
kablam! 4 | use dao::Value;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::ops::BitAnd`
kablam!  --> src/query/filter.rs:5:5
kablam!   |
kablam! 5 | use std::ops::BitAnd;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::ops::BitOr`
kablam!  --> src/query/filter.rs:6:5
kablam!   |
kablam! 6 | use std::ops::BitOr;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `dao::Type`
kablam!  --> src/query/filter.rs:8:5
kablam!   |
kablam! 8 | use dao::Type;
kablam!   |     ^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: method `AND` should have a snake case name such as `and`
kablam!   --> src/query/filter.rs:71:5
kablam!    |
kablam! 71 |       pub fn AND(mut self, filter: Filter) -> Self {
kablam!    |  _____^ starting here...
kablam! 72 | |         let mut filter = filter.clone();
kablam! 73 | |         filter.connector = Connector::And;
kablam! 74 | |         self.sub_filters.push(filter);
kablam! 75 | |         self
kablam! 76 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `OR` should have a snake case name such as `or`
kablam!   --> src/query/filter.rs:77:5
kablam!    |
kablam! 77 |       pub fn OR(mut self, filter: Filter) -> Self {
kablam!    |  _____^ starting here...
kablam! 78 | |         let mut filter = filter.clone();
kablam! 79 | |         filter.connector = Connector::Or;
kablam! 80 | |         self.sub_filters.push(filter);
kablam! 81 | |         self
kablam! 82 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `EQ` should have a snake case name such as `eq`
kablam!   --> src/query/filter.rs:88:5
kablam!    |
kablam! 88 |     fn EQ(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `NEQ` should have a snake case name such as `neq`
kablam!   --> src/query/filter.rs:89:5
kablam!    |
kablam! 89 |     fn NEQ(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `GT` should have a snake case name such as `gt`
kablam!   --> src/query/filter.rs:90:5
kablam!    |
kablam! 90 |     fn GT(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `GTE` should have a snake case name such as `gte`
kablam!   --> src/query/filter.rs:91:5
kablam!    |
kablam! 91 |     fn GTE(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `LT` should have a snake case name such as `lt`
kablam!   --> src/query/filter.rs:92:5
kablam!    |
kablam! 92 |     fn LT(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `LTE` should have a snake case name such as `lte`
kablam!   --> src/query/filter.rs:93:5
kablam!    |
kablam! 93 |     fn LTE(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `LIKE` should have a snake case name such as `like`
kablam!   --> src/query/filter.rs:94:5
kablam!    |
kablam! 94 |     fn LIKE(&self, to_value: &ToValue) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ILIKE` should have a snake case name such as `ilike`
kablam!   --> src/query/filter.rs:95:5
kablam!    |
kablam! 95 |     fn ILIKE(&self, to_value: &ToValue) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `IS_NULL` should have a snake case name such as `is_null`
kablam!   --> src/query/filter.rs:96:5
kablam!    |
kablam! 96 |     fn IS_NULL(&self) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `IS_NOT_NULL` should have a snake case name such as `is_not_null`
kablam!   --> src/query/filter.rs:97:5
kablam!    |
kablam! 97 |     fn IS_NOT_NULL(&self) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `IN` should have a snake case name such as `in`
kablam!   --> src/query/filter.rs:98:5
kablam!    |
kablam! 98 |     fn IN(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `NOT_IN` should have a snake case name such as `not_in`
kablam!   --> src/query/filter.rs:99:5
kablam!    |
kablam! 99 |     fn NOT_IN(&self, to_operand: &ToOperand) -> Filter;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::Direction`
kablam!  --> src/query/builder.rs:3:5
kablam!   |
kablam! 3 | use query::Direction;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Equality`
kablam!  --> src/query/builder.rs:4:5
kablam!   |
kablam! 4 | use query::Equality;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ColumnName`, `ToColumnName`
kablam!  --> src/query/builder.rs:7:13
kablam!   |
kablam! 7 | use query::{ColumnName, ToColumnName};
kablam!   |             ^^^^^^^^^^  ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::NullsWhere`
kablam!  --> src/query/builder.rs:8:5
kablam!   |
kablam! 8 | use query::NullsWhere;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `TableName`
kablam!   --> src/query/builder.rs:10:13
kablam!    |
kablam! 10 | use query::{TableName, ToTableName};
kablam!    |             ^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `Value`
kablam!   --> src/query/builder.rs:12:11
kablam!    |
kablam! 12 | use dao::{Value, ToValue};
kablam!    |           ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Order`
kablam!   --> src/query/builder.rs:14:5
kablam!    |
kablam! 14 | use query::Order;
kablam!    |     ^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `HasDirection`
kablam!   --> src/query/builder.rs:16:29
kablam!    |
kablam! 16 | use query::order::{ToOrder, HasDirection};
kablam!    |                             ^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `database::BuildMode`
kablam!   --> src/query/builder.rs:19:5
kablam!    |
kablam! 19 | use database::BuildMode;
kablam!    |     ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::join::ToJoin`
kablam!   --> src/query/builder.rs:20:5
kablam!    |
kablam! 20 | use query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::ToField`
kablam!   --> src/query/builder.rs:24:5
kablam!    |
kablam! 24 | use query::ToField;
kablam!    |     ^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: function `SELECT_ALL` should have a snake case name such as `select_all`
kablam!   --> src/query/builder.rs:33:1
kablam!    |
kablam! 33 |   pub fn SELECT_ALL() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 34 | |     QueryBuilder::SELECT_ALL()
kablam! 35 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `SELECT` should have a snake case name such as `select`
kablam!   --> src/query/builder.rs:37:1
kablam!    |
kablam! 37 |   pub fn SELECT() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 38 | |     QueryBuilder::SELECT()
kablam! 39 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `INSERT` should have a snake case name such as `insert`
kablam!   --> src/query/builder.rs:41:1
kablam!    |
kablam! 41 |   pub fn INSERT() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 42 | |     QueryBuilder::INSERT()
kablam! 43 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `UPDATE` should have a snake case name such as `update`
kablam!   --> src/query/builder.rs:45:1
kablam!    |
kablam! 45 |   pub fn UPDATE(to_table_name: &ToTableName) -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 46 | |     QueryBuilder::UPDATE(to_table_name)
kablam! 47 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `DELETE` should have a snake case name such as `delete`
kablam!   --> src/query/builder.rs:49:1
kablam!    |
kablam! 49 |   pub fn DELETE() -> QueryBuilder {
kablam!    |  _^ starting here...
kablam! 50 | |     QueryBuilder::DELETE()
kablam! 51 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `WITH` should have a snake case name such as `with`
kablam!   --> src/query/builder.rs:59:5
kablam!    |
kablam! 59 |     pub fn WITH(&mut self, query: Query, alias: &str) -> &mut Self {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `WITH_RECURSIVE` should have a snake case name such as `with_recursive`
kablam!   --> src/query/builder.rs:70:5
kablam!    |
kablam! 70 |     pub fn WITH_RECURSIVE(&mut self, query: Query, alias: &str) -> &mut Self {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `SELECT` should have a snake case name such as `select`
kablam!   --> src/query/builder.rs:81:5
kablam!    |
kablam! 81 |       pub fn SELECT() -> Self {
kablam!    |  _____^ starting here...
kablam! 82 | |         let mut q = Query::select();
kablam! 83 | |         QueryBuilder { query: q }
kablam! 84 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/query/builder.rs:82:13
kablam!    |
kablam! 82 |         let mut q = Query::select();
kablam!    |             ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: method `SELECT_ALL` should have a snake case name such as `select_all`
kablam!   --> src/query/builder.rs:85:5
kablam!    |
kablam! 85 |       pub fn SELECT_ALL() -> Self {
kablam!    |  _____^ starting here...
kablam! 86 | |         let mut qb = Self::SELECT();
kablam! 87 | |         qb.ALL();
kablam! 88 | |         qb
kablam! 89 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `INSERT` should have a snake case name such as `insert`
kablam!   --> src/query/builder.rs:91:5
kablam!    |
kablam! 91 |       pub fn INSERT() -> Self {
kablam!    |  _____^ starting here...
kablam! 92 | |         let mut q = Query::insert();
kablam! 93 | |         QueryBuilder { query: q }
kablam! 94 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!   --> src/query/builder.rs:92:13
kablam!    |
kablam! 92 |         let mut q = Query::insert();
kablam!    |             ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: method `UPDATE` should have a snake case name such as `update`
kablam!    --> src/query/builder.rs:95:5
kablam!     |
kablam! 95  |     pub fn UPDATE(to_table_name: &ToTableName) -> Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `DELETE` should have a snake case name such as `delete`
kablam!    --> src/query/builder.rs:105:5
kablam!     |
kablam! 105 |       pub fn DELETE() -> Self {
kablam!     |  _____^ starting here...
kablam! 106 | |         let mut q = Query::delete();
kablam! 107 | |         QueryBuilder { query: q }
kablam! 108 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: variable does not need to be mutable
kablam!    --> src/query/builder.rs:106:13
kablam!     |
kablam! 106 |         let mut q = Query::delete();
kablam!     |             ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_mut)] on by default
kablam! 
kablam! warning: method `DISTINCT` should have a snake case name such as `distinct`
kablam!    --> src/query/builder.rs:111:5
kablam!     |
kablam! 111 |       pub fn DISTINCT(&mut self) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 112 | |         self.query.distinct = true;
kablam! 113 | |         self
kablam! 114 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `ALL` should have a snake case name such as `all`
kablam!    --> src/query/builder.rs:117:5
kablam!     |
kablam! 117 |       pub fn ALL(&mut self) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 118 | |         self.query.all();
kablam! 119 | |         self
kablam! 120 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `SET` should have a snake case name such as `set`
kablam!    --> src/query/builder.rs:122:5
kablam!     |
kablam! 122 |       pub fn SET(&mut self, column: &str, to_value: &ToValue) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 123 | |         self.query.set(column, to_value);
kablam! 124 | |         self
kablam! 125 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `COLUMNS` should have a snake case name such as `columns`
kablam!    --> src/query/builder.rs:127:5
kablam!     |
kablam! 127 |     pub fn COLUMNS(&mut self, to_operand: &[&ToOperand]) -> &mut Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `VALUES` should have a snake case name such as `values`
kablam!    --> src/query/builder.rs:138:5
kablam!     |
kablam! 138 |       pub fn VALUES(&mut self, to_values: &[&ToValue]) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 139 | |         for tov in to_values {
kablam! 140 | |             let v = tov.to_db_type();
kablam! 141 | |             let operand = Operand::Value(v);
kablam! 142 | |             self.query.values.push(operand);
kablam! 143 | |         }
kablam! 144 | |         self
kablam! 145 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `FROM` should have a snake case name such as `from`
kablam!    --> src/query/builder.rs:149:5
kablam!     |
kablam! 149 |       pub fn FROM(&mut self, to_source_field: &ToSourceField) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 150 | |         self.query.from(to_source_field);
kablam! 151 | |         self
kablam! 152 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `INTO` should have a snake case name such as `into`
kablam!    --> src/query/builder.rs:156:5
kablam!     |
kablam! 156 |       pub fn INTO(&mut self, table: &ToTableName) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 157 | |         assert_eq!(self.query.sql_type, SqlType::INSERT);
kablam! 158 | |         self.TABLE(table);
kablam! 159 | |         self
kablam! 160 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `TABLE` should have a snake case name such as `table`
kablam!    --> src/query/builder.rs:162:5
kablam!     |
kablam! 162 |     pub fn TABLE(&mut self, table: &ToTableName) -> &mut Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `JOIN` should have a snake case name such as `join`
kablam!    --> src/query/builder.rs:177:5
kablam!     |
kablam! 177 |       pub fn JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 178 | |         self.query.joins.push(join);
kablam! 179 | |         self
kablam! 180 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `LEFT_JOIN` should have a snake case name such as `left_join`
kablam!    --> src/query/builder.rs:184:5
kablam!     |
kablam! 184 |       pub fn LEFT_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 185 | |         let mut join = join.clone();
kablam! 186 | |         join.modifier = Some(Modifier::LEFT);
kablam! 187 | |         self.JOIN(join);
kablam! 188 | |         self
kablam! 189 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `RIGHT_JOIN` should have a snake case name such as `right_join`
kablam!    --> src/query/builder.rs:190:5
kablam!     |
kablam! 190 |       pub fn RIGHT_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 191 | |         let mut join = join.clone();
kablam! 192 | |         join.modifier = Some(Modifier::RIGHT);
kablam! 193 | |         self.JOIN(join);
kablam! 194 | |         self
kablam! 195 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `FULL_JOIN` should have a snake case name such as `full_join`
kablam!    --> src/query/builder.rs:196:5
kablam!     |
kablam! 196 |       pub fn FULL_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 197 | |         let mut join = join.clone();
kablam! 198 | |         join.modifier = Some(Modifier::FULL);
kablam! 199 | |         self.JOIN(join);
kablam! 200 | |         self
kablam! 201 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `INNER_JOIN` should have a snake case name such as `inner_join`
kablam!    --> src/query/builder.rs:202:5
kablam!     |
kablam! 202 |       pub fn INNER_JOIN(&mut self, join: Join) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 203 | |         let mut join = join.clone();
kablam! 204 | |         join.join_type = Some(JoinType::INNER);
kablam! 205 | |         self.JOIN(join);
kablam! 206 | |         self
kablam! 207 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `WHERE` should have a snake case name such as `where`
kablam!    --> src/query/builder.rs:209:5
kablam!     |
kablam! 209 |       pub fn WHERE(&mut self, filter: Filter) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 210 | |         self.query.filters.push(filter);
kablam! 211 | |         self
kablam! 212 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `GROUP_BY` should have a snake case name such as `group_by`
kablam!    --> src/query/builder.rs:214:5
kablam!     |
kablam! 214 |     pub fn GROUP_BY(&mut self, to_operand: &ToOperand) -> &mut Self {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `HAVING` should have a snake case name such as `having`
kablam!    --> src/query/builder.rs:230:5
kablam!     |
kablam! 230 |       pub fn HAVING(&mut self, filter: Filter) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 231 | |         self.query.having.push(filter);
kablam! 232 | |         self
kablam! 233 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `ORDER_BY` should have a snake case name such as `order_by`
kablam!    --> src/query/builder.rs:236:5
kablam!     |
kablam! 236 |       pub fn ORDER_BY(&mut self, to_order: &ToOrder) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 237 | |         let mut orders = to_order.to_order();
kablam! 238 | |         self.query.order_by.append(&mut orders);
kablam! 239 | |         self
kablam! 240 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `LIMIT` should have a snake case name such as `limit`
kablam!    --> src/query/builder.rs:242:5
kablam!     |
kablam! 242 |       pub fn LIMIT(&mut self, n: usize) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 243 | |         self.query.set_limit(n);
kablam! 244 | |         self
kablam! 245 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `OFFSET` should have a snake case name such as `offset`
kablam!    --> src/query/builder.rs:247:5
kablam!     |
kablam! 247 |       pub fn OFFSET(&mut self, o: usize) -> &mut Self {
kablam!     |  _____^ starting here...
kablam! 248 | |         self.query.set_offset(o);
kablam! 249 | |         self
kablam! 250 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused imports: `ColumnName`, `ToColumnName`
kablam!  --> src/query/function.rs:3:13
kablam!   |
kablam! 3 | use query::{ColumnName, ToColumnName};
kablam!   |             ^^^^^^^^^^  ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: function `COUNT` should have a snake case name such as `count`
kablam!   --> src/query/function.rs:18:1
kablam!    |
kablam! 18 |   pub fn COUNT(to_operand: &ToOperand) -> Operand {
kablam!    |  _^ starting here...
kablam! 19 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 20 | |         function: "COUNT".to_owned(),
kablam! 21 | |         params: vec![to_operand.to_operand()],
kablam! 22 | |     }))
kablam! 23 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `MAX` should have a snake case name such as `max`
kablam!   --> src/query/function.rs:26:1
kablam!    |
kablam! 26 |   pub fn MAX(to_operand: &ToOperand) -> Operand {
kablam!    |  _^ starting here...
kablam! 27 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 28 | |         function: "MAX".to_owned(),
kablam! 29 | |         params: vec![to_operand.to_operand()],
kablam! 30 | |     }))
kablam! 31 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `MIN` should have a snake case name such as `min`
kablam!   --> src/query/function.rs:33:1
kablam!    |
kablam! 33 |   pub fn MIN(to_operand: &ToOperand) -> Operand {
kablam!    |  _^ starting here...
kablam! 34 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 35 | |         function: "MIN".to_owned(),
kablam! 36 | |         params: vec![to_operand.to_operand()],
kablam! 37 | |     }))
kablam! 38 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: function `NOW` should have a snake case name such as `now`
kablam!   --> src/query/function.rs:42:1
kablam!    |
kablam! 42 |   pub fn NOW() -> Operand {
kablam!    |  _^ starting here...
kablam! 43 | |     Operand::QuerySource(QuerySource::Function(Function {
kablam! 44 | |         function: "NOW".to_owned(),
kablam! 45 | |         params: vec![],
kablam! 46 | |     }))
kablam! 47 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::Condition`
kablam!  --> src/query/join.rs:3:5
kablam!   |
kablam! 3 | use query::Condition;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: trait method `ON` should have a snake case name such as `on`
kablam!   --> src/query/join.rs:35:5
kablam!    |
kablam! 35 |     fn ON(&self, filter: Filter) -> Join;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::TableName`
kablam!  --> src/query/operand.rs:2:5
kablam!   |
kablam! 2 | use query::TableName;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Function`
kablam!  --> src/query/operand.rs:3:5
kablam!   |
kablam! 3 | use query::Function;
kablam!   |     ^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Query`
kablam!  --> src/query/operand.rs:4:5
kablam!   |
kablam! 4 | use query::Query;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Filter`
kablam!  --> src/query/operand.rs:6:5
kablam!   |
kablam! 6 | use query::Filter;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::HasEquality`
kablam!  --> src/query/operand.rs:8:5
kablam!   |
kablam! 8 | use query::HasEquality;
kablam!   |     ^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Condition`
kablam!  --> src/query/operand.rs:9:5
kablam!   |
kablam! 9 | use query::Condition;
kablam!   |     ^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Equality`
kablam!   --> src/query/operand.rs:10:5
kablam!    |
kablam! 10 | use query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Connector`
kablam!   --> src/query/operand.rs:11:5
kablam!    |
kablam! 11 | use query::Connector;
kablam!    |     ^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `std::collections::BTreeMap`
kablam!   --> src/query/operand.rs:15:5
kablam!    |
kablam! 15 | use std::collections::BTreeMap;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `chrono::offset::utc::UTC`
kablam!   --> src/query/operand.rs:21:5
kablam!    |
kablam! 21 | use chrono::offset::utc::UTC;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `json_string`
kablam!    --> src/query/operand.rs:154:13
kablam!     |
kablam! 154 |         let json_string = format!("{}", self.pretty());
kablam!     |             ^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `table::Column`
kablam!  --> src/query/order.rs:1:5
kablam!   |
kablam! 1 | use table::Column;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::ColumnName`
kablam!  --> src/query/order.rs:4:5
kablam!   |
kablam! 4 | use query::ColumnName;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: method `NULLS_FIRST` should have a snake case name such as `nulls_first`
kablam!   --> src/query/order.rs:31:5
kablam!    |
kablam! 31 |       pub fn NULLS_FIRST(mut self) -> Order {
kablam!    |  _____^ starting here...
kablam! 32 | |         self.nulls_where = Some(NullsWhere::FIRST);
kablam! 33 | |         self
kablam! 34 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: method `NULLS_LAST` should have a snake case name such as `nulls_last`
kablam!   --> src/query/order.rs:35:5
kablam!    |
kablam! 35 |       pub fn NULLS_LAST(mut self) -> Order {
kablam!    |  _____^ starting here...
kablam! 36 | |         self.nulls_where = Some(NullsWhere::FIRST);
kablam! 37 | |         self
kablam! 38 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ASC` should have a snake case name such as `asc`
kablam!   --> src/query/order.rs:75:5
kablam!    |
kablam! 75 |     fn ASC(&self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `DESC` should have a snake case name such as `desc`
kablam!   --> src/query/order.rs:76:5
kablam!    |
kablam! 76 |     fn DESC(&self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ASC_NULLS_FIRST` should have a snake case name such as `asc_nulls_first`
kablam!   --> src/query/order.rs:77:5
kablam!    |
kablam! 77 |     fn ASC_NULLS_FIRST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `ASC_NULLS_LAST` should have a snake case name such as `asc_nulls_last`
kablam!   --> src/query/order.rs:78:5
kablam!    |
kablam! 78 |     fn ASC_NULLS_LAST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `DESC_NULLS_FIRST` should have a snake case name such as `desc_nulls_first`
kablam!   --> src/query/order.rs:79:5
kablam!    |
kablam! 79 |     fn DESC_NULLS_FIRST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: trait method `DESC_NULLS_LAST` should have a snake case name such as `desc_nulls_last`
kablam!   --> src/query/order.rs:80:5
kablam!    |
kablam! 80 |     fn DESC_NULLS_LAST(self) -> Order;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::ColumnName`
kablam!  --> src/query/field.rs:2:5
kablam!   |
kablam! 2 | use query::ColumnName;
kablam!   |     ^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::ToTableName`
kablam!  --> src/query/field.rs:3:5
kablam!   |
kablam! 3 | use query::ToTableName;
kablam!   |     ^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: trait method `AS` should have a snake case name such as `as`
kablam!   --> src/query/field.rs:42:5
kablam!    |
kablam! 42 |     fn AS(&self, s: &str) -> SourceField;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(non_snake_case)] on by default
kablam! 
kablam! warning: unused import: `query::Operand`
kablam!  --> src/query/source.rs:1:5
kablam!   |
kablam! 1 | use query::Operand;
kablam!   |     ^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::Field`
kablam!  --> src/query/source.rs:2:5
kablam!   |
kablam! 2 | use query::Field;
kablam!   |     ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `ColumnName`, `ToColumnName`
kablam!  --> src/query/source.rs:6:26
kablam!   |
kablam! 6 | use query::column_name::{ColumnName, ToColumnName};
kablam!   |                          ^^^^^^^^^^  ^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `table::Column`
kablam!  --> src/query/source.rs:7:5
kablam!   |
kablam! 7 | use table::Column;
kablam!   |     ^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `query::operand::ToOperand`
kablam!   --> src/query/source.rs:10:5
kablam!    |
kablam! 10 | use query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `chrono::offset::utc::UTC`
kablam!  --> src/dao.rs:7:5
kablam!   |
kablam! 7 | use chrono::offset::utc::UTC;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `ToJson`
kablam!   --> src/dao.rs:12:35
kablam!    |
kablam! 12 | use rustc_serialize::json::{self, ToJson, Json};
kablam!    |                                   ^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustc_serialize::DecoderHelpers`
kablam!   --> src/dao.rs:13:5
kablam!    |
kablam! 13 | use rustc_serialize::DecoderHelpers;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `x`
kablam!    --> src/dao.rs:149:34
kablam!     |
kablam! 149 |             &SerValue::NaiveDate(ref x) => {
kablam!     |                                  ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `x`
kablam!    --> src/dao.rs:154:34
kablam!     |
kablam! 154 |             &SerValue::NaiveTime(ref x) => {
kablam!     |                                  ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `x`
kablam!    --> src/dao.rs:159:38
kablam!     |
kablam! 159 |             &SerValue::NaiveDateTime(ref x) => {
kablam!     |                                      ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `value`
kablam!    --> src/dao.rs:423:25
kablam!     |
kablam! 423 |             if let Some(value) = value {
kablam!     |                         ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `ToSourceField`
kablam!   --> src/database.rs:22:47
kablam!    |
kablam! 22 | use query::source::{SourceField, QuerySource, ToSourceField};
kablam!    |                                               ^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustc_serialize::json::Json`
kablam!   --> src/platform/postgres.rs:16:5
kablam!    |
kablam! 16 | use rustc_serialize::json::Json;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `postgres::types::IsNull`
kablam!   --> src/platform/postgres.rs:18:5
kablam!    |
kablam! 18 | use postgres::types::IsNull;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!   --> src/platform/postgres.rs:19:5
kablam!    |
kablam! 19 | use uuid::Uuid;
kablam!    |     ^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `postgres as pg`
kablam!   --> src/platform/postgres.rs:21:5
kablam!    |
kablam! 21 | use postgres as pg;
kablam!    |     ^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!   --> src/platform/postgres.rs:99:33
kablam!    |
kablam! 99 |                             Err(e) => None,
kablam!    |                                 ^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:111:33
kablam!     |
kablam! 111 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:123:33
kablam!     |
kablam! 123 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:135:33
kablam!     |
kablam! 135 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:147:33
kablam!     |
kablam! 147 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:159:33
kablam!     |
kablam! 159 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:171:33
kablam!     |
kablam! 171 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:183:33
kablam!     |
kablam! 183 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:195:33
kablam!     |
kablam! 195 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:207:33
kablam!     |
kablam! 207 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:219:33
kablam!     |
kablam! 219 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:231:33
kablam!     |
kablam! 231 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:243:33
kablam!     |
kablam! 243 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:255:33
kablam!     |
kablam! 255 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:267:33
kablam!     |
kablam! 267 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!    --> src/platform/postgres.rs:279:33
kablam!     |
kablam! 279 |                             Err(e) => None,
kablam!     |                                 ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `table`
kablam!    --> src/table.rs:115:36
kablam!     |
kablam! 115 |     pub fn clean_lookupname(&self, table: &Table, lookup: &Table) -> String {
kablam!     |                                    ^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `get_parent_table`
kablam!    --> src/table.rs:482:5
kablam!     |
kablam! 482 |       fn get_parent_table<'a>(&self, tables: &'a [Table]) -> Option<&'a Table> {
kablam!     |  _____^ starting here...
kablam! 483 | |         match &self.parent_table {
kablam! 484 | |             &Some(ref p_table) => {
kablam! 485 | |                 let tmp_table = Table::with_name(&p_table);
kablam! 486 | |                 Some(Self::get_table(&tmp_table.schema, &tmp_table.name, tables))
kablam! 487 | |             }
kablam! 488 | |             &None => None,
kablam! 489 | |         }
kablam! 490 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `is_inherited_column`
kablam!    --> src/table.rs:494:5
kablam!     |
kablam! 494 |     fn is_inherited_column(self, column: &str, tables: &[Table]) -> bool {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `column`
kablam!    --> src/table.rs:494:34
kablam!     |
kablam! 494 |     fn is_inherited_column(self, column: &str, tables: &[Table]) -> bool {
kablam!     |                                  ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: method is never used: `same_schema`
kablam!    --> src/table.rs:508:5
kablam!     |
kablam! 508 |     fn same_schema(&self, table: &Table) -> bool {
kablam!     |     ^
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: unused variable: `via_column`
kablam!    --> src/table.rs:662:26
kablam!     |
kablam! 662 |         for (hi, linker, via_column) in has_many_indirect {
kablam!     |                          ^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `n`
kablam!    --> src/table.rs:710:13
kablam!     |
kablam! 710 |         let n = primary_and_foreign.len();
kablam!     |             ^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `column`
kablam!    --> src/table.rs:715:14
kablam!     |
kablam! 715 |         for (column, has_one) in has_ones {
kablam!     |              ^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `Host`
kablam!  --> src/config.rs:1:16
kablam!   |
kablam! 1 | use url::{Url, Host};
kablam!   |                ^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused variable: `e`
kablam!   --> src/config.rs:58:17
kablam!    |
kablam! 58 |             Err(e) => None,
kablam!    |                 ^
kablam!    |
kablam!    = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_update_query.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_update_query.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_update_query.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_update_query.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_update_query.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_update_query.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_update_query.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_update_query.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_update_query.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::dao::ToValue`
kablam!   --> tests/test_update_query.rs:19:5
kablam!    |
kablam! 19 | use rustorm::dao::ToValue;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_group_by.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_group_by.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_group_by.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_group_by.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_group_by.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_group_by.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasEquality`
kablam!   --> tests/test_group_by.rs:14:5
kablam!    |
kablam! 14 | use rustorm::query::HasEquality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_group_by.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_group_by.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_group_by.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_delete_query.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_delete_query.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_delete_query.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_delete_query.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_delete_query.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_delete_query.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_delete_query.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_delete_query.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_delete_query.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::dao::ToValue`
kablam!   --> tests/test_delete_query.rs:19:5
kablam!    |
kablam! 19 | use rustorm::dao::ToValue;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_left_join.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_left_join.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_left_join.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_left_join.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_left_join.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_left_join.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_left_join.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_left_join.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_multiple_rename_table.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_multiple_rename_table.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_multiple_rename_table.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_multiple_rename_table.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_multiple_rename_table.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_multiple_rename_table.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasEquality`
kablam!   --> tests/test_multiple_rename_table.rs:14:5
kablam!    |
kablam! 14 | use rustorm::query::HasEquality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_multiple_rename_table.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_multiple_rename_table.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasDirection`
kablam!   --> tests/test_multiple_rename_table.rs:17:5
kablam!    |
kablam! 17 | use rustorm::query::HasDirection;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_complex_query.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_complex_query.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_complex_query.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_complex_query.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_complex_query.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_complex_query.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `uuid::Uuid`
kablam!  --> tests/test_order_by.rs:6:5
kablam!   |
kablam! 6 | use uuid::Uuid;
kablam!   |     ^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Query`
kablam!  --> tests/test_order_by.rs:8:5
kablam!   |
kablam! 8 | use rustorm::query::Query;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::QueryBuilder`
kablam!  --> tests/test_order_by.rs:9:5
kablam!   |
kablam! 9 | use rustorm::query::QueryBuilder;
kablam!   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::Equality`
kablam!   --> tests/test_order_by.rs:10:5
kablam!    |
kablam! 10 | use rustorm::query::Equality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused imports: `Dao`, `IsDao`
kablam!   --> tests/test_order_by.rs:11:20
kablam!    |
kablam! 11 | use rustorm::dao::{Dao, IsDao};
kablam!    |                    ^^^  ^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::function::COUNT`
kablam!   --> tests/test_order_by.rs:13:5
kablam!    |
kablam! 13 | use rustorm::query::function::COUNT;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::HasEquality`
kablam!   --> tests/test_order_by.rs:14:5
kablam!    |
kablam! 14 | use rustorm::query::HasEquality;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::join::ToJoin`
kablam!   --> tests/test_order_by.rs:15:5
kablam!    |
kablam! 15 | use rustorm::query::join::ToJoin;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam! warning: unused import: `rustorm::query::operand::ToOperand`
kablam!   --> tests/test_order_by.rs:16:5
kablam!    |
kablam! 16 | use rustorm::query::operand::ToOperand;
kablam!    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!    |
kablam!    = note: #[warn(unused_imports)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 23.30 secs
boom! running `docker rm -f 7c782a82698f111338c9712938a1762d44d7ad9dccba874c53ba2612ea9fa84e`
blam! 7c782a82698f111338c9712938a1762d44d7ad9dccba874c53ba2612ea9fa84e
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! cc2f1aec35f55f763cd8eae017af7d18151897e4219be809aaa3e0e1407b7a1e
boom! running `docker start -a cc2f1aec35f55f763cd8eae017af7d18151897e4219be809aaa3e0e1407b7a1e`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/rustorm-a1903b8b903f11f0
blam! 
blam! running 8 tests
blam! test config::sqlite_in_memory ... ok
blam! test config::test_config_sqlite_url_with_port ... ok
blam! test config::test_config_sqlite_url_with_path ... ok
blam! test config::test_config_from_url ... ok
blam! test config::test_config_url ... ok
blam! test table::test_capitalize ... ok
blam! test dao::test_decode_value ... ok
blam! test config::test_config_url_with_port ... ok
blam! 
blam! test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/test_complex_query-23d4b0a081190e86
blam! 
blam! running 1 test
blam! test test_select ... FAILED
blam! 
blam! failures:
blam! 
blam! ---- test_select stdout ----
blam! 	thread 'test_select' panicked at 'called `Result::unwrap()` on an `Err` value: PoolError(InitializationError(Some("Error opening a connection: Error communicating with the server: Connection refused (os error 111)")))', /buildslave/rust-buildbot/slave/nightly-dist-rustc-linux/build/src/libcore/result.rs:860
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! 
blam! failures:
blam!     test_select
blam! 
blam! test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured
blam! 
kablam! error: test failed
boom! running `docker rm -f cc2f1aec35f55f763cd8eae017af7d18151897e4219be809aaa3e0e1407b7a1e`
blam! cc2f1aec35f55f763cd8eae017af7d18151897e4219be809aaa3e0e1407b7a1e
