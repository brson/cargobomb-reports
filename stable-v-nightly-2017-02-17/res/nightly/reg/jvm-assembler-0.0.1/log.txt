boom! testing jvm-assembler-0.0.1 against nightly for nightly
boom! running: cargo +nightly build --frozen
boom! creating container for: cargo +nightly build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly build --frozen cargobomb`
blam! 22fb12c7a6539f2c88a42d2c9dd74109cbc87ba19575a8345572532e7a1df330
boom! running `docker start -a 22fb12c7a6539f2c88a42d2c9dd74109cbc87ba19575a8345572532e7a1df330`
kablam!    Compiling jvm-assembler v0.0.1 (file:///source)
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:393:24
kablam!     |
kablam! 393 |     fn serialize(self, buf: &mut Vec<u8>) {
kablam!     |                        ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:397:20
kablam!     |
kablam! 397 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Interface {
kablam!     |                    ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `classfile`
kablam!    --> src/classfile.rs:397:44
kablam!     |
kablam! 397 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Interface {
kablam!     |                                            ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:403:24
kablam!     |
kablam! 403 |     fn serialize(self, buf: &mut Vec<u8>) {
kablam!     |                        ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:407:20
kablam!     |
kablam! 407 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Field {
kablam!     |                    ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `classfile`
kablam!    --> src/classfile.rs:407:44
kablam!     |
kablam! 407 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Field {
kablam!     |                                            ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:472:24
kablam!     |
kablam! 472 |     fn serialize(self, buf: &mut Vec<u8>) {
kablam!     |                        ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:476:20
kablam!     |
kablam! 476 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> ExceptionTableEntry {
kablam!     |                    ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `classfile`
kablam!    --> src/classfile.rs:476:44
kablam!     |
kablam! 476 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> ExceptionTableEntry {
kablam!     |                                            ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!    --> src/classfile.rs:598:9
kablam!     |
kablam! 598 |         write!(f, ": ");
kablam!     |         ^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_must_use)] on by default
kablam!     = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: constant item is never used: `ACC_PUBLIC`
kablam!  --> src/classfile_builder.rs:3:1
kablam!   |
kablam! 3 | pub const ACC_PUBLIC: u16 = 0x1;
kablam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: constant item is never used: `ACC_STATIC`
kablam!  --> src/classfile_builder.rs:4:1
kablam!   |
kablam! 4 | pub const ACC_STATIC: u16 = 0x8;
kablam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: struct is never used: `ClassfileBuilder`
kablam!   --> src/classfile_builder.rs:6:1
kablam!    |
kablam! 6  |   pub struct ClassfileBuilder {
kablam!    |  _^ starting here...
kablam! 7  | |     access_flags: u16,
kablam! 8  | |     this_class_index: u16,
kablam! 9  | |     super_class_index: u16,
kablam! 10 | |     constants: Vec<Constant>,
kablam! 11 | |     methods: Vec<Method>,
kablam! 12 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!   --> src/classfile_builder.rs:15:5
kablam!    |
kablam! 15 |     pub fn new(access_flags: u16, this_class: &str, super_class: &str) -> ClassfileBuilder {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_method`
kablam!   --> src/classfile_builder.rs:28:5
kablam!    |
kablam! 28 |       pub fn define_method(&mut self, access_flags: u16, name: &str, descriptor: &str) -> MethodBuilder {
kablam!    |  _____^ starting here...
kablam! 29 | |         MethodBuilder::new(self, access_flags, name, descriptor)
kablam! 30 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `push_constant`
kablam!   --> src/classfile_builder.rs:32:5
kablam!    |
kablam! 32 |       fn push_constant(&mut self, constant: Constant) -> u16 {
kablam!    |  _____^ starting here...
kablam! 33 | |         // TODO check if this constant is exactly equal to anything already defined in constants. If so, return the existing index instead of re-defining it.
kablam! 34 | |         self.constants.push(constant);
kablam! 35 | |         self.constants.len() as u16
kablam! 36 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_utf8`
kablam!   --> src/classfile_builder.rs:38:5
kablam!    |
kablam! 38 |       fn define_utf8(&mut self, string: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 39 | |         self.push_constant(Constant::Utf8(string.to_owned()))
kablam! 40 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_class`
kablam!   --> src/classfile_builder.rs:42:5
kablam!    |
kablam! 42 |       fn define_class(&mut self, class: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 43 | |         let name_index = self.define_utf8(class);
kablam! 44 | |         self.push_constant(Constant::Class(name_index))
kablam! 45 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_name_and_type`
kablam!   --> src/classfile_builder.rs:47:5
kablam!    |
kablam! 47 |       fn define_name_and_type(&mut self, name: &str, descriptor: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 48 | |         let name_index = self.define_utf8(name);
kablam! 49 | |         let descriptor_index = self.define_utf8(descriptor);
kablam! 50 | |         self.push_constant(Constant::NameAndType(name_index, descriptor_index))
kablam! 51 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_fieldref`
kablam!   --> src/classfile_builder.rs:53:5
kablam!    |
kablam! 53 |       fn define_fieldref(&mut self, class: &str, name: &str, descriptor: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 54 | |         let class_index = self.define_class(class);
kablam! 55 | |         let name_and_type_index = self.define_name_and_type(name, descriptor);
kablam! 56 | |         self.push_constant(Constant::Fieldref(class_index, name_and_type_index))
kablam! 57 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_methodref`
kablam!   --> src/classfile_builder.rs:59:5
kablam!    |
kablam! 59 |       fn define_methodref(&mut self, class: &str, name: &str, descriptor: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 60 | |         let class_index = self.define_class(class);
kablam! 61 | |         let name_and_type_index = self.define_name_and_type(name, descriptor);
kablam! 62 | |         self.push_constant(Constant::Methodref(class_index, name_and_type_index))
kablam! 63 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `done`
kablam!   --> src/classfile_builder.rs:65:5
kablam!    |
kablam! 65 |       pub fn done(self) -> Classfile {
kablam!    |  _____^ starting here...
kablam! 66 | |         Classfile::new(self.constants, self.access_flags, self.this_class_index, self.super_class_index, self.methods)
kablam! 67 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: struct is never used: `MethodBuilder`
kablam!   --> src/classfile_builder.rs:70:1
kablam!    |
kablam! 70 |   pub struct MethodBuilder<'a> {
kablam!    |  _^ starting here...
kablam! 71 | |     classfile: &'a mut ClassfileBuilder,
kablam! 72 | |     access_flags: u16,
kablam! 73 | |     name_index: u16,
kablam! 74 | |     descriptor_index: u16,
kablam! 75 | |     instructions: Vec<Instruction>,
kablam! 76 | |     curr_stack_depth: u16,
kablam! 77 | |     max_stack_depth: u16,
kablam! 78 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!   --> src/classfile_builder.rs:81:5
kablam!    |
kablam! 81 |     fn new(classfile: &'a mut ClassfileBuilder, access_flags: u16, name: &str, descriptor: &str) -> MethodBuilder<'a> {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `get_static`
kablam!   --> src/classfile_builder.rs:95:5
kablam!    |
kablam! 95 |       pub fn get_static(&mut self, class: &str, name: &str, descriptor: &str) {
kablam!    |  _____^ starting here...
kablam! 96 | |         let fieldref_index = self.classfile.define_fieldref(class, name, descriptor);
kablam! 97 | |         self.instructions.push(Instruction::GetStatic(fieldref_index));
kablam! 98 | |         self.increase_stack_depth();
kablam! 99 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `invoke_virtual`
kablam!    --> src/classfile_builder.rs:101:5
kablam!     |
kablam! 101 |       pub fn invoke_virtual(&mut self, class: &str, name: &str, descriptor: &str) {
kablam!     |  _____^ starting here...
kablam! 102 | |         let methodref_index = self.classfile.define_methodref(class, name, descriptor);
kablam! 103 | |         self.instructions.push(Instruction::InvokeVirtual(methodref_index));
kablam! 104 | |         self.decrease_stack_depth();
kablam! 105 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `bipush`
kablam!    --> src/classfile_builder.rs:107:5
kablam!     |
kablam! 107 |       pub fn bipush(&mut self, value: i8) {
kablam!     |  _____^ starting here...
kablam! 108 | |         self.instructions.push(Instruction::Bipush(value as u8));
kablam! 109 | |         self.increase_stack_depth();
kablam! 110 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `iadd`
kablam!    --> src/classfile_builder.rs:112:5
kablam!     |
kablam! 112 |       pub fn iadd(&mut self) {
kablam!     |  _____^ starting here...
kablam! 113 | |         self.instructions.push(Instruction::Iadd);
kablam! 114 | |         self.decrease_stack_depth();
kablam! 115 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `do_return`
kablam!    --> src/classfile_builder.rs:117:5
kablam!     |
kablam! 117 |       pub fn do_return(&mut self) {
kablam!     |  _____^ starting here...
kablam! 118 | |         self.instructions.push(Instruction::Return);
kablam! 119 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `increase_stack_depth`
kablam!    --> src/classfile_builder.rs:121:5
kablam!     |
kablam! 121 |       fn increase_stack_depth(&mut self) {
kablam!     |  _____^ starting here...
kablam! 122 | |         self.curr_stack_depth += 1;
kablam! 123 | |         if self.curr_stack_depth > self.max_stack_depth {
kablam! 124 | |             self.max_stack_depth = self.curr_stack_depth;
kablam! 125 | |         }
kablam! 126 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `decrease_stack_depth`
kablam!    --> src/classfile_builder.rs:128:5
kablam!     |
kablam! 128 |       fn decrease_stack_depth(&mut self) {
kablam!     |  _____^ starting here...
kablam! 129 | |         self.curr_stack_depth -= 1;
kablam! 130 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `done`
kablam!    --> src/classfile_builder.rs:132:5
kablam!     |
kablam! 132 |       pub fn done(self) {
kablam!     |  _____^ starting here...
kablam! 133 | |         let classfile = self.classfile;
kablam! 134 | |         let code_index = classfile.define_utf8("Code");
kablam! 135 | |         // TODO track locals counts instead of hard-coding
kablam! 136 | |         let method = Method::new(self.access_flags, self.name_index, self.descriptor_index, vec![Attribute::Code(code_index, self.max_stack_depth, 1, self.instructions, vec![], vec![])]);
kablam! 137 | |         classfile.methods.push(method);
kablam! 138 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 3.52 secs
boom! running `docker rm -f 22fb12c7a6539f2c88a42d2c9dd74109cbc87ba19575a8345572532e7a1df330`
blam! 22fb12c7a6539f2c88a42d2c9dd74109cbc87ba19575a8345572532e7a1df330
boom! running: cargo +nightly test --frozen --no-run
boom! creating container for: cargo +nightly test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen --no-run cargobomb`
blam! 9155c455a98232673d2e54b7fd432d5a92426cdf22187b3bdc783335deed5c68
boom! running `docker start -a 9155c455a98232673d2e54b7fd432d5a92426cdf22187b3bdc783335deed5c68`
kablam!    Compiling jvm-assembler v0.0.1 (file:///source)
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:393:24
kablam!     |
kablam! 393 |     fn serialize(self, buf: &mut Vec<u8>) {
kablam!     |                        ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:397:20
kablam!     |
kablam! 397 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Interface {
kablam!     |                    ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `classfile`
kablam!    --> src/classfile.rs:397:44
kablam!     |
kablam! 397 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Interface {
kablam!     |                                            ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:403:24
kablam!     |
kablam! 403 |     fn serialize(self, buf: &mut Vec<u8>) {
kablam!     |                        ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:407:20
kablam!     |
kablam! 407 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Field {
kablam!     |                    ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `classfile`
kablam!    --> src/classfile.rs:407:44
kablam!     |
kablam! 407 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> Field {
kablam!     |                                            ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:472:24
kablam!     |
kablam! 472 |     fn serialize(self, buf: &mut Vec<u8>) {
kablam!     |                        ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `buf`
kablam!    --> src/classfile.rs:476:20
kablam!     |
kablam! 476 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> ExceptionTableEntry {
kablam!     |                    ^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused variable: `classfile`
kablam!    --> src/classfile.rs:476:44
kablam!     |
kablam! 476 |     fn deserialize(buf: &mut Deserializer, classfile: &Classfile) -> ExceptionTableEntry {
kablam!     |                                            ^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_variables)] on by default
kablam! 
kablam! warning: unused result which must be used
kablam!    --> src/classfile.rs:598:9
kablam!     |
kablam! 598 |         write!(f, ": ");
kablam!     |         ^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = note: #[warn(unused_must_use)] on by default
kablam!     = note: this error originates in a macro outside of the current crate
kablam! 
kablam! warning: constant item is never used: `ACC_PUBLIC`
kablam!  --> src/classfile_builder.rs:3:1
kablam!   |
kablam! 3 | pub const ACC_PUBLIC: u16 = 0x1;
kablam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: constant item is never used: `ACC_STATIC`
kablam!  --> src/classfile_builder.rs:4:1
kablam!   |
kablam! 4 | pub const ACC_STATIC: u16 = 0x8;
kablam!   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!   |
kablam!   = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: struct is never used: `ClassfileBuilder`
kablam!   --> src/classfile_builder.rs:6:1
kablam!    |
kablam! 6  |   pub struct ClassfileBuilder {
kablam!    |  _^ starting here...
kablam! 7  | |     access_flags: u16,
kablam! 8  | |     this_class_index: u16,
kablam! 9  | |     super_class_index: u16,
kablam! 10 | |     constants: Vec<Constant>,
kablam! 11 | |     methods: Vec<Method>,
kablam! 12 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!   --> src/classfile_builder.rs:15:5
kablam!    |
kablam! 15 |     pub fn new(access_flags: u16, this_class: &str, super_class: &str) -> ClassfileBuilder {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_method`
kablam!   --> src/classfile_builder.rs:28:5
kablam!    |
kablam! 28 |       pub fn define_method(&mut self, access_flags: u16, name: &str, descriptor: &str) -> MethodBuilder {
kablam!    |  _____^ starting here...
kablam! 29 | |         MethodBuilder::new(self, access_flags, name, descriptor)
kablam! 30 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `push_constant`
kablam!   --> src/classfile_builder.rs:32:5
kablam!    |
kablam! 32 |       fn push_constant(&mut self, constant: Constant) -> u16 {
kablam!    |  _____^ starting here...
kablam! 33 | |         // TODO check if this constant is exactly equal to anything already defined in constants. If so, return the existing index instead of re-defining it.
kablam! 34 | |         self.constants.push(constant);
kablam! 35 | |         self.constants.len() as u16
kablam! 36 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_utf8`
kablam!   --> src/classfile_builder.rs:38:5
kablam!    |
kablam! 38 |       fn define_utf8(&mut self, string: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 39 | |         self.push_constant(Constant::Utf8(string.to_owned()))
kablam! 40 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_class`
kablam!   --> src/classfile_builder.rs:42:5
kablam!    |
kablam! 42 |       fn define_class(&mut self, class: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 43 | |         let name_index = self.define_utf8(class);
kablam! 44 | |         self.push_constant(Constant::Class(name_index))
kablam! 45 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_name_and_type`
kablam!   --> src/classfile_builder.rs:47:5
kablam!    |
kablam! 47 |       fn define_name_and_type(&mut self, name: &str, descriptor: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 48 | |         let name_index = self.define_utf8(name);
kablam! 49 | |         let descriptor_index = self.define_utf8(descriptor);
kablam! 50 | |         self.push_constant(Constant::NameAndType(name_index, descriptor_index))
kablam! 51 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_fieldref`
kablam!   --> src/classfile_builder.rs:53:5
kablam!    |
kablam! 53 |       fn define_fieldref(&mut self, class: &str, name: &str, descriptor: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 54 | |         let class_index = self.define_class(class);
kablam! 55 | |         let name_and_type_index = self.define_name_and_type(name, descriptor);
kablam! 56 | |         self.push_constant(Constant::Fieldref(class_index, name_and_type_index))
kablam! 57 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `define_methodref`
kablam!   --> src/classfile_builder.rs:59:5
kablam!    |
kablam! 59 |       fn define_methodref(&mut self, class: &str, name: &str, descriptor: &str) -> u16 {
kablam!    |  _____^ starting here...
kablam! 60 | |         let class_index = self.define_class(class);
kablam! 61 | |         let name_and_type_index = self.define_name_and_type(name, descriptor);
kablam! 62 | |         self.push_constant(Constant::Methodref(class_index, name_and_type_index))
kablam! 63 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `done`
kablam!   --> src/classfile_builder.rs:65:5
kablam!    |
kablam! 65 |       pub fn done(self) -> Classfile {
kablam!    |  _____^ starting here...
kablam! 66 | |         Classfile::new(self.constants, self.access_flags, self.this_class_index, self.super_class_index, self.methods)
kablam! 67 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: struct is never used: `MethodBuilder`
kablam!   --> src/classfile_builder.rs:70:1
kablam!    |
kablam! 70 |   pub struct MethodBuilder<'a> {
kablam!    |  _^ starting here...
kablam! 71 | |     classfile: &'a mut ClassfileBuilder,
kablam! 72 | |     access_flags: u16,
kablam! 73 | |     name_index: u16,
kablam! 74 | |     descriptor_index: u16,
kablam! 75 | |     instructions: Vec<Instruction>,
kablam! 76 | |     curr_stack_depth: u16,
kablam! 77 | |     max_stack_depth: u16,
kablam! 78 | | }
kablam!    | |_^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `new`
kablam!   --> src/classfile_builder.rs:81:5
kablam!    |
kablam! 81 |     fn new(classfile: &'a mut ClassfileBuilder, access_flags: u16, name: &str, descriptor: &str) -> MethodBuilder<'a> {
kablam!    |     ^
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `get_static`
kablam!   --> src/classfile_builder.rs:95:5
kablam!    |
kablam! 95 |       pub fn get_static(&mut self, class: &str, name: &str, descriptor: &str) {
kablam!    |  _____^ starting here...
kablam! 96 | |         let fieldref_index = self.classfile.define_fieldref(class, name, descriptor);
kablam! 97 | |         self.instructions.push(Instruction::GetStatic(fieldref_index));
kablam! 98 | |         self.increase_stack_depth();
kablam! 99 | |     }
kablam!    | |_____^ ...ending here
kablam!    |
kablam!    = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `invoke_virtual`
kablam!    --> src/classfile_builder.rs:101:5
kablam!     |
kablam! 101 |       pub fn invoke_virtual(&mut self, class: &str, name: &str, descriptor: &str) {
kablam!     |  _____^ starting here...
kablam! 102 | |         let methodref_index = self.classfile.define_methodref(class, name, descriptor);
kablam! 103 | |         self.instructions.push(Instruction::InvokeVirtual(methodref_index));
kablam! 104 | |         self.decrease_stack_depth();
kablam! 105 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `bipush`
kablam!    --> src/classfile_builder.rs:107:5
kablam!     |
kablam! 107 |       pub fn bipush(&mut self, value: i8) {
kablam!     |  _____^ starting here...
kablam! 108 | |         self.instructions.push(Instruction::Bipush(value as u8));
kablam! 109 | |         self.increase_stack_depth();
kablam! 110 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `iadd`
kablam!    --> src/classfile_builder.rs:112:5
kablam!     |
kablam! 112 |       pub fn iadd(&mut self) {
kablam!     |  _____^ starting here...
kablam! 113 | |         self.instructions.push(Instruction::Iadd);
kablam! 114 | |         self.decrease_stack_depth();
kablam! 115 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `do_return`
kablam!    --> src/classfile_builder.rs:117:5
kablam!     |
kablam! 117 |       pub fn do_return(&mut self) {
kablam!     |  _____^ starting here...
kablam! 118 | |         self.instructions.push(Instruction::Return);
kablam! 119 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `increase_stack_depth`
kablam!    --> src/classfile_builder.rs:121:5
kablam!     |
kablam! 121 |       fn increase_stack_depth(&mut self) {
kablam!     |  _____^ starting here...
kablam! 122 | |         self.curr_stack_depth += 1;
kablam! 123 | |         if self.curr_stack_depth > self.max_stack_depth {
kablam! 124 | |             self.max_stack_depth = self.curr_stack_depth;
kablam! 125 | |         }
kablam! 126 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `decrease_stack_depth`
kablam!    --> src/classfile_builder.rs:128:5
kablam!     |
kablam! 128 |       fn decrease_stack_depth(&mut self) {
kablam!     |  _____^ starting here...
kablam! 129 | |         self.curr_stack_depth -= 1;
kablam! 130 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam! warning: method is never used: `done`
kablam!    --> src/classfile_builder.rs:132:5
kablam!     |
kablam! 132 |       pub fn done(self) {
kablam!     |  _____^ starting here...
kablam! 133 | |         let classfile = self.classfile;
kablam! 134 | |         let code_index = classfile.define_utf8("Code");
kablam! 135 | |         // TODO track locals counts instead of hard-coding
kablam! 136 | |         let method = Method::new(self.access_flags, self.name_index, self.descriptor_index, vec![Attribute::Code(code_index, self.max_stack_depth, 1, self.instructions, vec![], vec![])]);
kablam! 137 | |         classfile.methods.push(method);
kablam! 138 | |     }
kablam!     | |_____^ ...ending here
kablam!     |
kablam!     = note: #[warn(dead_code)] on by default
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 3.37 secs
boom! running `docker rm -f 9155c455a98232673d2e54b7fd432d5a92426cdf22187b3bdc783335deed5c68`
blam! 9155c455a98232673d2e54b7fd432d5a92426cdf22187b3bdc783335deed5c68
boom! running: cargo +nightly test --frozen
boom! creating container for: cargo +nightly test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/nightly/nightly:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/nightly/nightly:/target:rw -e USER_ID=500 -e CMD=cargo +nightly test --frozen cargobomb`
blam! 621e01ce6052e80f1647259126c2a752ddb389cc23997916c3f196bf8ab8f90e
boom! running `docker start -a 621e01ce6052e80f1647259126c2a752ddb389cc23997916c3f196bf8ab8f90e`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/jvm_assembler-f63af80c45b4a48b
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f 621e01ce6052e80f1647259126c2a752ddb389cc23997916c3f196bf8ab8f90e`
blam! 621e01ce6052e80f1647259126c2a752ddb389cc23997916c3f196bf8ab8f90e
