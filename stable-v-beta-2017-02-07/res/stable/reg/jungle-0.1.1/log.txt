boom! testing jungle-0.1.1 against stable for beta
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! 760258d25ea3925e162c67eab677b463c055c640bbdb5d0b5553e8b44a8f4b09
boom! running `docker start -a 760258d25ea3925e162c67eab677b463c055c640bbdb5d0b5553e8b44a8f4b09`
kablam!    Compiling jungle v0.1.1 (file:///source)
kablam! warning: field is never used: `value`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:26:2
kablam!    |
kablam! 26 | 	value: T,
kablam!    | 	^^^^^^^^
kablam! 
kablam! warning: field is never used: `parent`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:27:2
kablam!    |
kablam! 27 | 	parent: NodePointer<T,N>,
kablam!    | 	^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! warning: field is never used: `children`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:28:2
kablam!    |
kablam! 28 | 	children: GenericArray<NodePointer<T,N>,N>
kablam!    | 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! warning: method is never used: `new`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:33:5
kablam!    |
kablam! 33 |       fn new(value: T) -> Self{
kablam!    |  _____^ starting here...
kablam! 34 | |     	Node {
kablam! 35 | |     		value: value,
kablam! 36 | |     		parent: NodePointer::default(),
kablam! 37 | |     		children: GenericArray::new()
kablam! 38 | |     	}
kablam! 39 | |     }
kablam!    | |_____^ ...ending here
kablam! 
kablam! warning: struct is never used: `Tree`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:42:1
kablam!    |
kablam! 42 | struct Tree<T,N: ArrayLength<NodePointer<T,N>>>(NodePointer<T,N>);
kablam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! warning: method is never used: `new`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:47:2
kablam!    |
kablam! 47 |   	fn new(value: T) -> Self {
kablam!    |  __^ starting here...
kablam! 48 | | 	    Tree(NodePointer(Box::into_raw(Box::new(Node::new(value)))))
kablam! 49 | | 	}
kablam!    | |__^ ...ending here
kablam! 
kablam! warning: method is never used: `parent`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:51:2
kablam!    |
kablam! 51 |   	fn parent(&mut self) -> bool{
kablam!    |  __^ starting here...
kablam! 52 | | 		let parent = self.0.parent;
kablam! 53 | | 		if parent.0 == ptr::null_mut() {
kablam! 54 | | 			false
kablam! 55 | | 		} else {
kablam! 56 | | 		    self.0 = parent;
kablam! 57 | | 		    true
kablam! 58 | | 		}
kablam! 59 | | 	}
kablam!    | |__^ ...ending here
kablam! 
kablam! warning: method is never used: `child`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:61:2
kablam!    |
kablam! 61 |   	fn child(&mut self, child: usize) -> bool {
kablam!    |  __^ starting here...
kablam! 62 | | 		let child = self.0.children[child];
kablam! 63 | | 		if child.0 == ptr::null_mut() {
kablam! 64 | | 			false
kablam! 65 | | 		} else {
kablam! 66 | | 			self.0 = child;
kablam! 67 | | 			true
kablam! 68 | | 		}
kablam! 69 | | 	}
kablam!    | |__^ ...ending here
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.33 secs
boom! running `docker rm -f 760258d25ea3925e162c67eab677b463c055c640bbdb5d0b5553e8b44a8f4b09`
blam! 760258d25ea3925e162c67eab677b463c055c640bbdb5d0b5553e8b44a8f4b09
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! 07b992a85f1cb85bd6d207cd2c03ba783d2341c728d00a34bca994f6a0ea116d
boom! running `docker start -a 07b992a85f1cb85bd6d207cd2c03ba783d2341c728d00a34bca994f6a0ea116d`
kablam!    Compiling jungle v0.1.1 (file:///source)
kablam! warning: field is never used: `value`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:26:2
kablam!    |
kablam! 26 | 	value: T,
kablam!    | 	^^^^^^^^
kablam! 
kablam! warning: field is never used: `parent`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:27:2
kablam!    |
kablam! 27 | 	parent: NodePointer<T,N>,
kablam!    | 	^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! warning: field is never used: `children`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:28:2
kablam!    |
kablam! 28 | 	children: GenericArray<NodePointer<T,N>,N>
kablam!    | 	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! warning: method is never used: `new`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:33:5
kablam!    |
kablam! 33 |       fn new(value: T) -> Self{
kablam!    |  _____^ starting here...
kablam! 34 | |     	Node {
kablam! 35 | |     		value: value,
kablam! 36 | |     		parent: NodePointer::default(),
kablam! 37 | |     		children: GenericArray::new()
kablam! 38 | |     	}
kablam! 39 | |     }
kablam!    | |_____^ ...ending here
kablam! 
kablam! warning: struct is never used: `Tree`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:42:1
kablam!    |
kablam! 42 | struct Tree<T,N: ArrayLength<NodePointer<T,N>>>(NodePointer<T,N>);
kablam!    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! warning: method is never used: `new`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:47:2
kablam!    |
kablam! 47 |   	fn new(value: T) -> Self {
kablam!    |  __^ starting here...
kablam! 48 | | 	    Tree(NodePointer(Box::into_raw(Box::new(Node::new(value)))))
kablam! 49 | | 	}
kablam!    | |__^ ...ending here
kablam! 
kablam! warning: method is never used: `parent`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:51:2
kablam!    |
kablam! 51 |   	fn parent(&mut self) -> bool{
kablam!    |  __^ starting here...
kablam! 52 | | 		let parent = self.0.parent;
kablam! 53 | | 		if parent.0 == ptr::null_mut() {
kablam! 54 | | 			false
kablam! 55 | | 		} else {
kablam! 56 | | 		    self.0 = parent;
kablam! 57 | | 		    true
kablam! 58 | | 		}
kablam! 59 | | 	}
kablam!    | |__^ ...ending here
kablam! 
kablam! warning: method is never used: `child`, #[warn(dead_code)] on by default
kablam!   --> src/tree.rs:61:2
kablam!    |
kablam! 61 |   	fn child(&mut self, child: usize) -> bool {
kablam!    |  __^ starting here...
kablam! 62 | | 		let child = self.0.children[child];
kablam! 63 | | 		if child.0 == ptr::null_mut() {
kablam! 64 | | 			false
kablam! 65 | | 		} else {
kablam! 66 | | 			self.0 = child;
kablam! 67 | | 			true
kablam! 68 | | 		}
kablam! 69 | | 	}
kablam!    | |__^ ...ending here
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.52 secs
boom! running `docker rm -f 07b992a85f1cb85bd6d207cd2c03ba783d2341c728d00a34bca994f6a0ea116d`
blam! 07b992a85f1cb85bd6d207cd2c03ba783d2341c728d00a34bca994f6a0ea116d
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! e490f8ec0227f81aa94de762061aed4ec7c5d20182978576e502553978b7547c
boom! running `docker start -a e490f8ec0227f81aa94de762061aed4ec7c5d20182978576e502553978b7547c`
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/jungle-2c689323bd596dcf
blam! 
blam! running 1 test
blam! test tests::it_works ... ok
blam! 
blam! test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests jungle
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f e490f8ec0227f81aa94de762061aed4ec7c5d20182978576e502553978b7547c`
blam! e490f8ec0227f81aa94de762061aed4ec7c5d20182978576e502553978b7547c
