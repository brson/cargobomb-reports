boom! testing plumbum-0.0.8 against stable for beta
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! c644dc378d87725fed8e21bcdf49136e7224a095e476d458cbec456ee433915d
boom! running `docker start -a c644dc378d87725fed8e21bcdf49136e7224a095e476d458cbec456ee433915d`
kablam!    Compiling plumbum v0.0.8 (file:///source)
kablam! warning: private type `Void` in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:165:5
kablam!     |
kablam! 165 |     pub fn connect<A>(mut self, mut sink: Sink<'a, O, A>) -> A where O: 'static {
kablam!     |     ^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam! warning: private type `Void` in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:281:1
kablam!     |
kablam! 281 | pub type Sink<'a, I, A> = ConduitM<'a, I, Void, A>;
kablam!     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |       fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |  _____^ starting here...
kablam! 266 | |         where I: 'a, T::IntoIter: 'a {
kablam! 267 | |         let mut other = replace(self, ().into()).extend_iter(iterator.into_iter());
kablam! 268 | |         swap(self, &mut other);
kablam! 269 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |       fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |  _____^ starting here...
kablam! 266 | |         where I: 'a, T::IntoIter: 'a {
kablam! 267 | |         let mut other = replace(self, ().into()).extend_iter(iterator.into_iter());
kablam! 268 | |         swap(self, &mut other);
kablam! 269 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |       fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |  _____^ starting here...
kablam! 274 | |         where I: 'a, T::IntoIter: 'a {
kablam! 275 | |         ConduitM::extend_iter(().into(), iterator.into_iter())
kablam! 276 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |       fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |  _____^ starting here...
kablam! 274 | |         where I: 'a, T::IntoIter: 'a {
kablam! 275 | |         ConduitM::extend_iter(().into(), iterator.into_iter())
kablam! 276 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.43 secs
boom! running `docker rm -f c644dc378d87725fed8e21bcdf49136e7224a095e476d458cbec456ee433915d`
blam! c644dc378d87725fed8e21bcdf49136e7224a095e476d458cbec456ee433915d
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! 3465a32a1eeeca0742c05b0ff2a0fe0a03444a6483864c4306a04aa72de1a10a
boom! running `docker start -a 3465a32a1eeeca0742c05b0ff2a0fe0a03444a6483864c4306a04aa72de1a10a`
kablam!    Compiling plumbum v0.0.8 (file:///source)
kablam! warning: private type `Void` in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:165:5
kablam!     |
kablam! 165 |     pub fn connect<A>(mut self, mut sink: Sink<'a, O, A>) -> A where O: 'static {
kablam!     |     ^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam! warning: private type `Void` in public interface (error E0446), #[warn(private_in_public)] on by default
kablam!    --> src/lib.rs:281:1
kablam!     |
kablam! 281 | pub type Sink<'a, I, A> = ConduitM<'a, I, Void, A>;
kablam!     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #34537 <https://github.com/rust-lang/rust/issues/34537>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |       fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |  _____^ starting here...
kablam! 266 | |         where I: 'a, T::IntoIter: 'a {
kablam! 267 | |         let mut other = replace(self, ().into()).extend_iter(iterator.into_iter());
kablam! 268 | |         swap(self, &mut other);
kablam! 269 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:265:5
kablam!     |
kablam! 265 |       fn extend<T: IntoIterator<Item=O>>(&mut self, iterator: T)
kablam!     |  _____^ starting here...
kablam! 266 | |         where I: 'a, T::IntoIter: 'a {
kablam! 267 | |         let mut other = replace(self, ().into()).extend_iter(iterator.into_iter());
kablam! 268 | |         swap(self, &mut other);
kablam! 269 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |       fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |  _____^ starting here...
kablam! 274 | |         where I: 'a, T::IntoIter: 'a {
kablam! 275 | |         ConduitM::extend_iter(().into(), iterator.into_iter())
kablam! 276 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `I: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam! warning[E0276]: impl has stricter requirements than trait, #[warn(extra_requirement_in_impl)] on by default
kablam!    --> src/lib.rs:273:5
kablam!     |
kablam! 273 |       fn from_iter<T: IntoIterator<Item=O>>(iterator: T) -> Self
kablam!     |  _____^ starting here...
kablam! 274 | |         where I: 'a, T::IntoIter: 'a {
kablam! 275 | |         ConduitM::extend_iter(().into(), iterator.into_iter())
kablam! 276 | |     }
kablam!     | |_____^ ...ending here: impl has extra requirement `<T as std::iter::IntoIterator>::IntoIter: 'a`
kablam!     |
kablam!     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
kablam!     = note: for more information, see issue #37166 <https://github.com/rust-lang/rust/issues/37166>
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 1.5 secs
boom! running `docker rm -f 3465a32a1eeeca0742c05b0ff2a0fe0a03444a6483864c4306a04aa72de1a10a`
blam! 3465a32a1eeeca0742c05b0ff2a0fe0a03444a6483864c4306a04aa72de1a10a
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! e6d6d60b65149675f4a202efdbe6f01c518cf0568a658b12c73dc79a670f8050
boom! running `docker start -a e6d6d60b65149675f4a202efdbe6f01c518cf0568a658b12c73dc79a670f8050`
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/plumbum-bc820dad200ea66b
blam! 
blam! running 2 tests
blam! test kleisli::kleisli_run_to_string ... ok
blam! test kleisli::kleisli_run_plus_one ... ok
blam! 
blam! test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests plumbum
blam! 
blam! running 7 tests
blam! test ConduitM<'a, (), O, ()>::connect_0 ... ok
blam! test ConduitM<'a, I, O, ()>::fuse_0 ... ok
blam! test _0 ... ok
blam! test kleisli::Kleisli<'a, A, I, O, A>::new_0 ... ok
blam! test kleisli::Kleisli<'a, A, I, O, B>::append_0 ... ok
blam! test fuse_0 ... ok
blam! test pipe_0 ... ok
blam! 
blam! test result: ok. 7 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f e6d6d60b65149675f4a202efdbe6f01c518cf0568a658b12c73dc79a670f8050`
blam! e6d6d60b65149675f4a202efdbe6f01c518cf0568a658b12c73dc79a670f8050
