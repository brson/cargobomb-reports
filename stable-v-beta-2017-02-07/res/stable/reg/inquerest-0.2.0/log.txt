boom! testing inquerest-0.2.0 against stable for beta
boom! running: cargo +stable build --frozen
boom! creating container for: cargo +stable build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable build --frozen cargobomb`
blam! 1dc2cc5e34167f37c35371e44543a42e7f3c95c43a9df05f4745f91b56569032
boom! running `docker start -a 1dc2cc5e34167f37c35371e44543a42e7f3c95c43a9df05f4745f91b56569032`
kablam!    Compiling inquerest v0.2.0 (file:///source)
kablam! warning: unused imports: `alphanumeric`, `anychar`, `is_alphanumeric`, #[warn(unused_imports)] on by default
kablam!  --> src/lib.rs:5:25
kablam!   |
kablam! 5 | use nom::{IResult,digit,alphanumeric,anychar,is_alphanumeric};
kablam!   |                         ^^^^^^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^
kablam! 
kablam! warning: method is never used: `value_append`, #[warn(dead_code)] on by default
kablam!   --> src/lib.rs:35:5
kablam!    |
kablam! 35 |     fn value_append(self, s:&str)->Self{
kablam!    |     ^
kablam! 
kablam! warning: variant `NOT_IN` should have a camel case name such as `NotIn`, #[warn(non_camel_case_types)] on by default
kablam!   --> src/lib.rs:91:5
kablam!    |
kablam! 91 |     NOT_IN, // NOT IN, not_in
kablam!    |     ^^^^^^
kablam! 
kablam! warning: variant `IS_NOT` should have a camel case name such as `IsNot`, #[warn(non_camel_case_types)] on by default
kablam!   --> src/lib.rs:93:5
kablam!    |
kablam! 93 |     IS_NOT, // IS NOT, is_not
kablam!    |     ^^^^^^
kablam! 
kablam! warning: unused variable: `conn`, #[warn(unused_variables)] on by default
kablam!    --> src/lib.rs:409:10
kablam!     |
kablam! 409 |     for (conn, filtr) in remainder{
kablam!     |          ^^^^
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 3.62 secs
boom! running `docker rm -f 1dc2cc5e34167f37c35371e44543a42e7f3c95c43a9df05f4745f91b56569032`
blam! 1dc2cc5e34167f37c35371e44543a42e7f3c95c43a9df05f4745f91b56569032
boom! running: cargo +stable test --frozen --no-run
boom! creating container for: cargo +stable test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen --no-run cargobomb`
blam! 804130f9ceecac1d93b2a0aee2a7ae3dec3487f1d2ba3973d18600047a94617a
boom! running `docker start -a 804130f9ceecac1d93b2a0aee2a7ae3dec3487f1d2ba3973d18600047a94617a`
kablam!    Compiling inquerest v0.2.0 (file:///source)
kablam! warning: function is never used: `enclosed_and_filter`, #[warn(dead_code)] on by default
kablam!   --> tests/test_filter.rs:61:1
kablam!    |
kablam! 61 | fn enclosed_and_filter(){
kablam!    | ^
kablam! 
kablam! warning: function is never used: `enclosed_or_filter`, #[warn(dead_code)] on by default
kablam!    --> tests/test_filter.rs:87:1
kablam!     |
kablam! 87  | fn enclosed_or_filter(){
kablam!     | ^
kablam! 
kablam! warning: function is never used: `enclosed_or_and_filter`, #[warn(dead_code)] on by default
kablam!    --> tests/test_filter.rs:378:1
kablam!     |
kablam! 378 | fn enclosed_or_and_filter(){
kablam!     | ^
kablam! 
kablam! warning: function is never used: `enclosed_or_and_filter2`, #[warn(dead_code)] on by default
kablam!    --> tests/test_filter.rs:416:1
kablam!     |
kablam! 416 | fn enclosed_or_and_filter2(){
kablam!     | ^
kablam! 
kablam! warning: function is never used: `equal_and_and`, #[warn(dead_code)] on by default
kablam!    --> tests/test_filter.rs:497:1
kablam!     |
kablam! 497 |   fn equal_and_and(){
kablam!     |  _^ starting here...
kablam! 498 | |     assert_eq!(filter("student=eq.true&(age=lt.13&grade=gte.3)".as_bytes()),filter("student=eq.true&age=lt.13&grade=gte.3".as_bytes()))
kablam! 499 | | }
kablam!     | |_^ ...ending here
kablam! 
kablam! warning: function is never used: `equal_or_or`, #[warn(dead_code)] on by default
kablam!    --> tests/test_filter.rs:502:1
kablam!     |
kablam! 502 |   fn equal_or_or(){
kablam!     |  _^ starting here...
kablam! 503 | |     assert_eq!(filter("student=eq.true|(age=lt.13|grade=gte.3)".as_bytes()),filter("student=eq.true|age=lt.13|grade=gte.3".as_bytes()))
kablam! 504 | | }
kablam!     | |_^ ...ending here
kablam! 
kablam! warning: function is never used: `equal_enclosed_or`, #[warn(dead_code)] on by default
kablam!    --> tests/test_filter.rs:508:1
kablam!     |
kablam! 508 |   fn equal_enclosed_or(){
kablam!     |  _^ starting here...
kablam! 509 | |     assert_eq!(filter("(student=eq.true|age=lt.13)".as_bytes()),filter("student=eq.true|age=lt.13".as_bytes()))
kablam! 510 | | }
kablam!     | |_^ ...ending here
kablam! 
kablam! warning: function is never used: `equal_enclosed_and`, #[warn(dead_code)] on by default
kablam!    --> tests/test_filter.rs:513:1
kablam!     |
kablam! 513 |   fn equal_enclosed_and(){
kablam!     |  _^ starting here...
kablam! 514 | |     assert_eq!(filter("(student=eq.true&age=lt.13)".as_bytes()),filter("student=eq.true&age=lt.13".as_bytes()))
kablam! 515 | | }
kablam!     | |_^ ...ending here
kablam! 
kablam! warning: function is never used: `test_limit_only`, #[warn(dead_code)] on by default
kablam!   --> tests/test_query.rs:10:1
kablam!    |
kablam! 10 | fn test_limit_only(){
kablam!    | ^
kablam! 
kablam! warning: function is never used: `test_limit_and_offset`, #[warn(dead_code)] on by default
kablam!   --> tests/test_query.rs:27:1
kablam!    |
kablam! 27 | fn test_limit_and_offset(){
kablam!    | ^
kablam! 
kablam! warning: unused imports: `alphanumeric`, `anychar`, `is_alphanumeric`, #[warn(unused_imports)] on by default
kablam!  --> src/lib.rs:5:25
kablam!   |
kablam! 5 | use nom::{IResult,digit,alphanumeric,anychar,is_alphanumeric};
kablam!   |                         ^^^^^^^^^^^^ ^^^^^^^ ^^^^^^^^^^^^^^^
kablam! 
kablam! warning: method is never used: `value_append`, #[warn(dead_code)] on by default
kablam!   --> src/lib.rs:35:5
kablam!    |
kablam! 35 |     fn value_append(self, s:&str)->Self{
kablam!    |     ^
kablam! 
kablam! warning: variant `NOT_IN` should have a camel case name such as `NotIn`, #[warn(non_camel_case_types)] on by default
kablam!   --> src/lib.rs:91:5
kablam!    |
kablam! 91 |     NOT_IN, // NOT IN, not_in
kablam!    |     ^^^^^^
kablam! 
kablam! warning: variant `IS_NOT` should have a camel case name such as `IsNot`, #[warn(non_camel_case_types)] on by default
kablam!   --> src/lib.rs:93:5
kablam!    |
kablam! 93 |     IS_NOT, // IS NOT, is_not
kablam!    |     ^^^^^^
kablam! 
kablam! warning: unused variable: `conn`, #[warn(unused_variables)] on by default
kablam!    --> src/lib.rs:409:10
kablam!     |
kablam! 409 |     for (conn, filtr) in remainder{
kablam!     |          ^^^^
kablam! 
kablam! warning: function is never used: `test_table_column_order`, #[warn(dead_code)] on by default
kablam!   --> tests/test_order.rs:32:1
kablam!    |
kablam! 32 |   fn test_table_column_order(){
kablam!    |  _^ starting here...
kablam! 33 | |     assert_eq!(
kablam! 34 | |         IResult::Done("".as_bytes(), Order{
kablam! 35 | |             operand: Operand::Column("person.age".to_owned()), 
kablam! 36 | |             direction: Some(Direction::DESC), 
kablam! 37 | | 			nulls_where: None,
kablam! 38 | |         }),
kablam! 39 | |         order("person.age.desc".as_bytes()));
kablam! 40 | | }
kablam!    | |_^ ...ending here
kablam! 
kablam! warning: function is never used: `test_order_by4`, #[warn(dead_code)] on by default
kablam!    --> tests/test_order.rs:96:1
kablam!     |
kablam! 96  | fn test_order_by4(){
kablam!     | ^
kablam! 
kablam! warning: function is never used: `test_function`, #[warn(dead_code)] on by default
kablam!    --> tests/test_condition.rs:97:1
kablam!     |
kablam! 97  | fn test_function(){
kablam!     | ^
kablam! 
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 7.33 secs
boom! running `docker rm -f 804130f9ceecac1d93b2a0aee2a7ae3dec3487f1d2ba3973d18600047a94617a`
blam! 804130f9ceecac1d93b2a0aee2a7ae3dec3487f1d2ba3973d18600047a94617a
boom! running: cargo +stable test --frozen
boom! creating container for: cargo +stable test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/stable:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/stable:/target:rw -e USER_ID=500 -e CMD=cargo +stable test --frozen cargobomb`
blam! 5ccd8cb2ca2f92565dbf214b45e57f06839359ce3fcf26109f01db75333a6062
boom! running `docker start -a 5ccd8cb2ca2f92565dbf214b45e57f06839359ce3fcf26109f01db75333a6062`
kablam!     Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/inquerest-31bee81b9a869eb1
blam! 
blam! running 17 tests
blam! test test_column ... ok
blam! test test_boolean_true ... ok
blam! test test_boolean_false ... ok
blam! test test_euqation ... ok
blam! test test_filter ... ok
blam! test test_from ... ok
blam! test test_condition ... ok
blam! test test_join ... ok
blam! test test_function ... ok
blam! test test_join_without_on ... ok
blam! test test_left_join ... ok
blam! test test_number ... ok
blam! test test_order ... ok
blam! test test_percent20 ... ok
blam! test test_starts_with ... ok
blam! test test_query ... ok
blam! test test_table_column ... ok
blam! 
blam! test result: ok. 17 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/test_condition-38c38f9b8d4d1ec2
blam! 
blam! running 8 tests
blam! test test_eq ... ok
blam! test test_gt ... ok
blam! test test_lte ... ok
blam! test test_gte ... ok
blam! test test_lt ... ok
blam! test test_lgee ... ok
blam! test test_neq ... ok
blam! test test_ltee ... ok
blam! 
blam! test result: ok. 8 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/test_filter-dcf948f4377c5ef3
blam! 
blam! running 13 tests
blam! test and_or_filter ... ok
blam! test and_and_filter ... ok
blam! test enclosed_or_filter2 ... ok
blam! test and_filter ... ok
blam! test or_and_filter ... ok
blam! test or_and_filter_with_function ... ok
blam! test function_filter ... ok
blam! test or_or_filter ... ok
blam! test recursive_function_filter ... ok
blam! test equal_filter ... ok
blam! test or_filter ... ok
blam! test test_simple ... ok
blam! test test_enclosed ... ok
blam! 
blam! test result: ok. 13 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/test_function-81b09f3a76d6a011
blam! 
blam! running 4 tests
blam! test test_max_sum ... ok
blam! test test_min ... ok
blam! test test_max ... ok
blam! test test_sum ... ok
blam! 
blam! test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/test_group_by-8fd3c00179be36b0
blam! 
blam! running 4 tests
blam! test test_group3 ... ok
blam! test test_group2 ... ok
blam! test test_group ... ok
blam! test test_group_sum ... ok
blam! 
blam! test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/test_operand-e061785401017535
blam! 
blam! running 4 tests
blam! test test_column ... ok
blam! test test_function ... ok
blam! test test_number ... ok
kablam!      Running /target/debug/deps/test_order-1294a6fd96fd2c9c
blam! test test_table_column ... ok
blam! 
blam! test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured
blam! 
blam! 
blam! running 5 tests
blam! test test_asc ... ok
blam! test test_order_by ... ok
blam! test test_desc ... ok
blam! test test_order_by3 ... ok
blam! test test_order_by2 ... ok
blam! 
blam! test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!      Running /target/debug/deps/test_query-4b059cbff7543761
blam! 
blam! running 17 tests
blam! test test_equations_filter_groupby_having_orderby ... ok
blam! test test_equations_filter_groupby_having_orderby_page ... ok
blam! test test_equations_filter_groupby_orderby ... ok
blam! test test_equations_filter_groupby_having_orderby_limit ... ok
blam! test test_filter_orderby ... FAILED
blam! test test_filter_groupby_orderby ... FAILED
blam! test test_filters ... FAILED
blam! test test_equations_from_join_filter_groupby_having_orderby_limit ... FAILED
blam! test test_groupby ... FAILED
blam! test test_groupby2 ... FAILED
blam! test test_focused ... ok
blam! test test_groupby_orderby ... FAILED
blam! test test_one_equation_only ... ok
blam! test test_orderby ... FAILED
blam! test test_valid_operand_qouted ... ok
blam! test test_orderby_nullsfirst ... FAILED
kablam! error: test failed
blam! test test_orderby2 ... FAILED
blam! 
blam! failures:
blam! 
blam! ---- test_filter_orderby stdout ----
blam! 	thread 'test_filter_orderby' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [Filter { connector: None, condition: Condition { left: Column("age"), equality: LT, right: Number(13) }, sub_filters: [Filter { connector: Some(AND), condition: Condition { left: Column("student"), equality: EQ, right: Boolean(true) }, sub_filters: [Filter { connector: Some(OR), condition: Condition { left: Column("gender"), equality: EQ, right: Column("M") }, sub_filters: [] }] }] }], group_by: [], having: [], order_by: [Order { operand: Column("age"), direction: Some(DESC), nulls_where: None }, Order { operand: Column("height"), direction: Some(ASC), nulls_where: None }], range: None, equations: [] })`, right: `Done([40, 115, 116, 117, 100, 101, 110, 116, 61, 101, 113, 46, 116, 114, 117, 101, 124, 103, 101, 110, 100, 101, 114, 61, 101, 113, 46, 77, 41, 38, 111, 114, 100, 101, 114, 95, 98, 121, 61, 97, 103, 101, 46, 100, 101, 115, 99, 44, 104, 101, 105, 103, 104, 116, 46, 97, 115, 99], Query { from: [], join: [], filters: [Filter { connector: None, condition: Condition { left: Column("age"), equality: LT, right: Number(13) }, sub_filters: [] }], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:94
blam! note: Run with `RUST_BACKTRACE=1` for a backtrace.
blam! 
blam! ---- test_filter_groupby_orderby stdout ----
blam! 	thread 'test_filter_groupby_orderby' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [Filter { connector: None, condition: Condition { left: Column("age"), equality: LT, right: Number(13) }, sub_filters: [Filter { connector: Some(AND), condition: Condition { left: Column("student"), equality: EQ, right: Boolean(true) }, sub_filters: [] }, Filter { connector: Some(OR), condition: Condition { left: Column("gender"), equality: EQ, right: Column("M") }, sub_filters: [] }] }], group_by: [Function(Function { function: "sum", params: [Column("age")] }), Column("grade"), Column("gender")], having: [], order_by: [Order { operand: Column("age"), direction: Some(DESC), nulls_where: None }, Order { operand: Column("height"), direction: Some(ASC), nulls_where: None }], range: None, equations: [] })`, right: `Incomplete(Size(98))`)', tests/test_query.rs:147
blam! 
blam! ---- test_filters stdout ----
blam! 	thread 'test_filters' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [Filter { connector: None, condition: Condition { left: Column("age"), equality: LT, right: Number(13) }, sub_filters: [Filter { connector: Some(AND), condition: Condition { left: Column("student"), equality: EQ, right: Boolean(true) }, sub_filters: [] }, Filter { connector: Some(OR), condition: Condition { left: Column("gender"), equality: EQ, right: Column("M") }, sub_filters: [] }] }], group_by: [], having: [], order_by: [], range: None, equations: [] })`, right: `Incomplete(Size(38))`)', tests/test_query.rs:46
blam! 
blam! ---- test_equations_from_join_filter_groupby_having_orderby_limit stdout ----
blam! 	Done(
blam!     [
blam!         44,
blam!         115,
blam!         116,
blam!         117,
blam!         100,
blam!         101,
blam!         110,
blam!         116,
blam!         38,
blam!         108,
blam!         101,
blam!         102,
blam!         116,
blam!         95,
blam!         106,
blam!         111,
blam!         105,
blam!         110,
blam!         61,
blam!         112,
blam!         101,
blam!         114,
blam!         115,
blam!         111,
blam!         110,
blam!         95,
blam!         115,
blam!         116,
blam!         117,
blam!         100,
blam!         101,
blam!         110,
blam!         116,
blam!         38,
blam!         111,
blam!         110,
blam!         61,
blam!         115,
blam!         116,
blam!         117,
blam!         100,
blam!         101,
blam!         110,
blam!         116,
blam!         46,
blam!         105,
blam!         100,
blam!         61,
blam!         112,
blam!         101,
blam!         114,
blam!         115,
blam!         111,
blam!         110,
blam!         46,
blam!         115,
blam!         116,
blam!         117,
blam!         100,
blam!         101,
blam!         110,
blam!         116,
blam!         95,
blam!         105,
blam!         100,
blam!         38,
blam!         97,
blam!         103,
blam!         101,
blam!         61,
blam!         108,
blam!         116,
blam!         46,
blam!         49,
blam!         51,
blam!         38,
blam!         115,
blam!         116,
blam!         117,
blam!         100,
blam!         101,
blam!         110,
blam!         116,
blam!         61,
blam!         101,
blam!         113,
blam!         46,
blam!         116,
blam!         114,
blam!         117,
blam!         101,
blam!         124,
blam!         103,
blam!         101,
blam!         110,
blam!         100,
blam!         101,
blam!         114,
blam!         61,
blam!         101,
blam!         113,
blam!         46,
blam!         77,
blam!         38,
blam!         103,
blam!         114,
blam!         111,
blam!         117,
blam!         112,
blam!         95,
blam!         98,
blam!         121,
blam!         61,
blam!         115,
blam!         117,
blam!         109,
blam!         40,
blam!         97,
blam!         103,
blam!         101,
blam!         41,
blam!         44,
blam!         103,
blam!         114,
blam!         97,
blam!         100,
blam!         101,
blam!         44,
blam!         103,
blam!         101,
blam!         110,
blam!         100,
blam!         101,
blam!         114,
blam!         38,
blam!         104,
blam!         97,
blam!         118,
blam!         105,
blam!         110,
blam!         103,
blam!         61,
blam!         109,
blam!         105,
blam!         110,
blam!         40,
blam!         97,
blam!         103,
blam!         101,
blam!         41,
blam!         61,
blam!         103,
blam!         116,
blam!         46,
blam!         49,
blam!         51,
blam!         38,
blam!         111,
blam!         114,
blam!         100,
blam!         101,
blam!         114,
blam!         95,
blam!         98,
blam!         121,
blam!         61,
blam!         97,
blam!         103,
blam!         101,
blam!         46,
blam!         100,
blam!         101,
blam!         115,
blam!         99,
blam!         44,
blam!         104,
blam!         101,
blam!         105,
blam!         103,
blam!         104,
blam!         116,
blam!         46,
blam!         97,
blam!         115,
blam!         99,
blam!         38,
blam!         108,
blam!         105,
blam!         109,
blam!         105,
blam!         116,
blam!         61,
blam!         49,
blam!         48,
blam!         48,
blam!         38,
blam!         111,
blam!         102,
blam!         102,
blam!         115,
blam!         101,
blam!         116,
blam!         61,
blam!         50,
blam!         53,
blam!         38,
blam!         120,
blam!         61,
blam!         49,
blam!         50,
blam!         51,
blam!         38,
blam!         121,
blam!         61,
blam!         52,
blam!         53,
blam!         54
blam!     ],
blam!     Query {
blam!         from: [
blam!             Column(
blam!                 "bazaar.person"
blam!             )
blam!         ],
blam!         join: [],
blam!         filters: [],
blam!         group_by: [],
blam!         having: [],
blam!         order_by: [],
blam!         range: None,
blam!         equations: []
blam!     }
blam! )
blam! thread 'test_equations_from_join_filter_groupby_having_orderby_limit' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [Column("bazaar.person"), Column("student")], join: [Join { modifier: Some(LEFT), join_type: None, table: Column("person_student"), column1: ["student.id"], column2: ["person.student_id"] }], filters: [Filter { connector: None, condition: Condition { left: Column("age"), equality: LT, right: Number(13) }, sub_filters: [Filter { connector: Some(AND), condition: Condition { left: Column("student"), equality: EQ, right: Boolean(true) }, sub_filters: [] }, Filter { connector: Some(OR), condition: Condition { left: Column("gender"), equality: EQ, right: Value("M") }, sub_filters: [] }] }], group_by: [Function(Function { function: "sum", params: [Column("age")] }), Column("grade"), Column("gender")], having: [Filter { connector: None, condition: Condition { left: Function(Function { function: "min", params: [Column("age")] }), equality: GT, right: Number(13) }, sub_filters: [] }], order_by: [Order { operand: Column("age"), direction: Some(DESC), nulls_where: None }, Order { operand: Column("height"), direction: Some(ASC), nulls_where: None }], range: Some(Limit(Limit { limit: 100, offset: Some(25) })), equations: [Equation { left: Column("x"), right: Number(123) }, Equation { left: Column("y"), right: Number(456) }] })`, right: `Done([44, 115, 116, 117, 100, 101, 110, 116, 38, 108, 101, 102, 116, 95, 106, 111, 105, 110, 61, 112, 101, 114, 115, 111, 110, 95, 115, 116, 117, 100, 101, 110, 116, 38, 111, 110, 61, 115, 116, 117, 100, 101, 110, 116, 46, 105, 100, 61, 112, 101, 114, 115, 111, 110, 46, 115, 116, 117, 100, 101, 110, 116, 95, 105, 100, 38, 97, 103, 101, 61, 108, 116, 46, 49, 51, 38, 115, 116, 117, 100, 101, 110, 116, 61, 101, 113, 46, 116, 114, 117, 101, 124, 103, 101, 110, 100, 101, 114, 61, 101, 113, 46, 77, 38, 103, 114, 111, 117, 112, 95, 98, 121, 61, 115, 117, 109, 40, 97, 103, 101, 41, 44, 103, 114, 97, 100, 101, 44, 103, 101, 110, 100, 101, 114, 38, 104, 97, 118, 105, 110, 103, 61, 109, 105, 110, 40, 97, 103, 101, 41, 61, 103, 116, 46, 49, 51, 38, 111, 114, 100, 101, 114, 95, 98, 121, 61, 97, 103, 101, 46, 100, 101, 115, 99, 44, 104, 101, 105, 103, 104, 116, 46, 97, 115, 99, 38, 108, 105, 109, 105, 116, 61, 49, 48, 48, 38, 111, 102, 102, 115, 101, 116, 61, 50, 53, 38, 120, 61, 49, 50, 51, 38, 121, 61, 52, 53, 54], Query { from: [Column("bazaar.person")], join: [], filters: [], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:635
blam! 
blam! ---- test_groupby stdout ----
blam! 	thread 'test_groupby' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [], group_by: [Column("height")], having: [], order_by: [], range: None, equations: [] })`, right: `Done([103, 114, 111, 117, 112, 95, 98, 121, 61, 104, 101, 105, 103, 104, 116], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:320
blam! 
blam! ---- test_groupby2 stdout ----
blam! 	thread 'test_groupby2' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [], group_by: [Function(Function { function: "avg", params: [Column("grade")] }), Column("height")], having: [], order_by: [], range: None, equations: [] })`, right: `Done([103, 114, 111, 117, 112, 95, 98, 121, 61, 97, 118, 103, 40, 103, 114, 97, 100, 101, 41, 44, 104, 101, 105, 103, 104, 116], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:333
blam! 
blam! ---- test_groupby_orderby stdout ----
blam! 	thread 'test_groupby_orderby' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [], group_by: [Function(Function { function: "avg", params: [Column("grade")] }), Column("height")], having: [], order_by: [Order { operand: Column("height"), direction: Some(ASC), nulls_where: None }, Order { operand: Column("grade"), direction: Some(DESC), nulls_where: None }], range: None, equations: [] })`, right: `Done([103, 114, 111, 117, 112, 95, 98, 121, 61, 97, 118, 103, 40, 103, 114, 97, 100, 101, 41, 44, 104, 101, 105, 103, 104, 116, 38, 111, 114, 100, 101, 114, 95, 98, 121, 61, 104, 101, 105, 103, 104, 116, 46, 97, 115, 99, 44, 103, 114, 97, 100, 101, 46, 100, 101, 115, 99], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:354
blam! 
blam! ---- test_orderby stdout ----
blam! 	thread 'test_orderby' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [Order { operand: Column("height"), direction: Some(ASC), nulls_where: None }], range: None, equations: [] })`, right: `Done([111, 114, 100, 101, 114, 95, 98, 121, 61, 104, 101, 105, 103, 104, 116, 46, 97, 115, 99], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:279
blam! 
blam! ---- test_orderby_nullsfirst stdout ----
blam! 	thread 'test_orderby_nullsfirst' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [Order { operand: Column("height"), direction: Some(ASC), nulls_where: Some(FIRST) }], range: None, equations: [] })`, right: `Done([111, 114, 100, 101, 114, 95, 98, 121, 61, 104, 101, 105, 103, 104, 116, 46, 97, 115, 99, 46, 110, 117, 108, 108, 115, 102, 105, 114, 115, 116], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:291
blam! 
blam! ---- test_orderby2 stdout ----
blam! 	thread 'test_orderby2' panicked at 'assertion failed: `(left == right)` (left: `Done([], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [Order { operand: Column("height"), direction: Some(ASC), nulls_where: None }, Order { operand: Column("grade"), direction: Some(DESC), nulls_where: None }], range: None, equations: [] })`, right: `Done([111, 114, 100, 101, 114, 95, 98, 121, 61, 104, 101, 105, 103, 104, 116, 46, 97, 115, 99, 44, 103, 114, 97, 100, 101, 46, 100, 101, 115, 99], Query { from: [], join: [], filters: [], group_by: [], having: [], order_by: [], range: None, equations: [] })`)', tests/test_query.rs:303
blam! 
blam! 
blam! failures:
blam!     test_equations_from_join_filter_groupby_having_orderby_limit
blam!     test_filter_groupby_orderby
blam!     test_filter_orderby
blam!     test_filters
blam!     test_groupby
blam!     test_groupby2
blam!     test_groupby_orderby
blam!     test_orderby
blam!     test_orderby2
blam!     test_orderby_nullsfirst
blam! 
blam! test result: FAILED. 7 passed; 10 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f 5ccd8cb2ca2f92565dbf214b45e57f06839359ce3fcf26109f01db75333a6062`
blam! 5ccd8cb2ca2f92565dbf214b45e57f06839359ce3fcf26109f01db75333a6062
