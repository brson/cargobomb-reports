boom! testing parsimonious-0.0.8 against beta for beta
boom! running: cargo +beta build --frozen
boom! creating container for: cargo +beta build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta build --frozen cargobomb`
blam! 400cc48f7f039267290bbcb668fddd784d180746a15653098d2b31c787c4176c
boom! running `docker start -a 400cc48f7f039267290bbcb668fddd784d180746a15653098d2b31c787c4176c`
kablam!    Compiling parsimonious v0.0.8 (file:///source)
kablam! warning: unreachable pattern, #[warn(unreachable_patterns)] on by default
kablam!     --> src/lib.rs:1241:20
kablam!      |
kablam! 1241 |     #[derive(Copy, Clone, Debug)]
kablam!      |                    ^^^^^
kablam! 
kablam! warning: unreachable pattern, #[warn(unreachable_patterns)] on by default
kablam!     --> src/lib.rs:1241:27
kablam!      |
kablam! 1241 |     #[derive(Copy, Clone, Debug)]
kablam!      |                           ^^^^^
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 1.99 secs
boom! running `docker rm -f 400cc48f7f039267290bbcb668fddd784d180746a15653098d2b31c787c4176c`
blam! 400cc48f7f039267290bbcb668fddd784d180746a15653098d2b31c787c4176c
boom! running: cargo +beta test --frozen --no-run
boom! creating container for: cargo +beta test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta test --frozen --no-run cargobomb`
blam! b1d8a7a006216937c99ddd5fb6dcaa28737a6b236d61224a75deae36e7b1140e
boom! running `docker start -a b1d8a7a006216937c99ddd5fb6dcaa28737a6b236d61224a75deae36e7b1140e`
kablam!    Compiling parsimonious v0.0.8 (file:///source)
kablam! error[E0161]: cannot move a value of type ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str>: the size of ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str> cannot be statically determined
kablam!     --> src/lib.rs:1829:16
kablam!      |
kablam! 1829 |     assert_eq!(lexer.pipe(parser).init().parse("abc37!").unDone(), ("!",vec![ Token::Identifier(String::from("abc")), Token::Number(37) ]));
kablam!      |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `parsimonious`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f b1d8a7a006216937c99ddd5fb6dcaa28737a6b236d61224a75deae36e7b1140e`
blam! b1d8a7a006216937c99ddd5fb6dcaa28737a6b236d61224a75deae36e7b1140e
boom! running: cargo +beta test --frozen
boom! creating container for: cargo +beta test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta test --frozen cargobomb`
blam! 73614a6c569cbf2eda037d1de30ead775466c4a0aaf730655e05d41ede73f859
boom! running `docker start -a 73614a6c569cbf2eda037d1de30ead775466c4a0aaf730655e05d41ede73f859`
kablam!    Compiling parsimonious v0.0.8 (file:///source)
kablam! error[E0161]: cannot move a value of type ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str>: the size of ParseResult<impls::PipeStateful<impls::OrEmitParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}>, impls::OrEmitStatefulParser<impls::OrElseParser<impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapParser<impls::BufferedParser<impls::PlusParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, fn() {test_pipe::ignore}>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>, fn() -> test_pipe::Token {test_pipe::mk_other}, impls::OrElseStatefulParser<impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {std::char::<impl char>::is_alphabetic}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_id}>, impls::MapStatefulParser<impls::BufferedStatefulParser<impls::StarStatefulParser<impls::CharacterParser<fn(char) -> bool {test_pipe::is_decimal}>, impls::ImpossibleStatefulParser<char>, ()>>, fn(std::borrow::Cow<'a, str>) -> test_pipe::Token {test_pipe::mk_num}>>>, impls::StarStatefulParser<impls::OrElseParser<impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_identifier}>, impls::TokenParser<fn(&test_pipe::Token) -> bool {test_pipe::is_number}>>, impls::OrElseStatefulParser<impls::ImpossibleStatefulParser<test_pipe::Token>, impls::ImpossibleStatefulParser<test_pipe::Token>>, std::vec::Vec<test_pipe::Token>>>, &str> cannot be statically determined
kablam!     --> src/lib.rs:1829:16
kablam!      |
kablam! 1829 |     assert_eq!(lexer.pipe(parser).init().parse("abc37!").unDone(), ("!",vec![ Token::Identifier(String::from("abc")), Token::Number(37) ]));
kablam!      |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `parsimonious`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f 73614a6c569cbf2eda037d1de30ead775466c4a0aaf730655e05d41ede73f859`
blam! 73614a6c569cbf2eda037d1de30ead775466c4a0aaf730655e05d41ede73f859
