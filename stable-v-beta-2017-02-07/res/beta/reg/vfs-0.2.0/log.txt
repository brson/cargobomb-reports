boom! testing vfs-0.2.0 against beta for beta
boom! running: cargo +beta build --frozen
boom! creating container for: cargo +beta build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta build --frozen cargobomb`
blam! 9caa33b499d27368ce3fa1cfeaced90cc364452d13a96d0d36170a36655e447d
boom! running `docker start -a 9caa33b499d27368ce3fa1cfeaced90cc364452d13a96d0d36170a36655e447d`
kablam!    Compiling vfs v0.2.0 (file:///source)
kablam! warning: variable `openOptions` should have a snake case name such as `open_options`, #[warn(non_snake_case)] on by default
kablam!   --> src/lib.rs:65:33
kablam!    |
kablam! 65 |     fn open_with_options(&self, openOptions: &OpenOptions) -> Result<Box<VFile>>;
kablam!    |                                 ^^^^^^^^^^^
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 2.59 secs
boom! running `docker rm -f 9caa33b499d27368ce3fa1cfeaced90cc364452d13a96d0d36170a36655e447d`
blam! 9caa33b499d27368ce3fa1cfeaced90cc364452d13a96d0d36170a36655e447d
boom! running: cargo +beta test --frozen --no-run
boom! creating container for: cargo +beta test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta test --frozen --no-run cargobomb`
blam! 3542e77d3fe474cd55a63aa9375d330914119e5356636528118e1de2e11c5c8e
boom! running `docker start -a 3542e77d3fe474cd55a63aa9375d330914119e5356636528118e1de2e11c5c8e`
kablam!    Compiling vfs v0.2.0 (file:///source)
kablam! warning: variable `openOptions` should have a snake case name such as `open_options`, #[warn(non_snake_case)] on by default
kablam!   --> src/lib.rs:65:33
kablam!    |
kablam! 65 |     fn open_with_options(&self, openOptions: &OpenOptions) -> Result<Box<VFile>>;
kablam!    |                                 ^^^^^^^^^^^
kablam! 
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 3.61 secs
boom! running `docker rm -f 3542e77d3fe474cd55a63aa9375d330914119e5356636528118e1de2e11c5c8e`
blam! 3542e77d3fe474cd55a63aa9375d330914119e5356636528118e1de2e11c5c8e
boom! running: cargo +beta test --frozen
boom! creating container for: cargo +beta test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta test --frozen cargobomb`
blam! b51ea17be6b2b65e6d750b45de0bca2f8a9892b7fd62fa2c29ffc98847951c44
boom! running `docker start -a b51ea17be6b2b65e6d750b45de0bca2f8a9892b7fd62fa2c29ffc98847951c44`
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
kablam!      Running /target/debug/deps/vfs-289e7f8e95fb8508
blam! 
blam! running 20 tests
blam! test memory::tests::access_directory_as_file ... ok
blam! test memory::tests::file_name ... ok
blam! test memory::tests::append ... ok
blam! test memory::tests::mkdir_fails_for_file ... ok
blam! test memory::tests::parent ... ok
blam! test memory::tests::path_buf ... ok
blam! test memory::tests::read_dir ... ok
blam! test memory::tests::read_empty_file ... ok
blam! test memory::tests::mkdir ... ok
blam! test memory::tests::resolve ... ok
blam! test memory::tests::rm ... ok
blam! test memory::tests::rmdir ... ok
blam! test physical::tests::file_name ... ok
blam! test memory::tests::write_and_read_file ... ok
blam! test physical::tests::parent ... ok
blam! test memory::tests::rmrf ... ok
blam! test physical::tests::read_file ... ok
blam! test physical::tests::read_dir ... ok
blam! test physical::tests::to_path_buf ... ok
blam! test util::tests::mkdir ... ok
blam! 
blam! test result: ok. 20 passed; 0 failed; 0 ignored; 0 measured
blam! 
kablam!    Doc-tests vfs
blam! 
blam! running 0 tests
blam! 
blam! test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured
blam! 
boom! running `docker rm -f b51ea17be6b2b65e6d750b45de0bca2f8a9892b7fd62fa2c29ffc98847951c44`
blam! b51ea17be6b2b65e6d750b45de0bca2f8a9892b7fd62fa2c29ffc98847951c44
