boom! testing newtype-ops-0.1.3 against beta for beta
boom! running: cargo +beta build --frozen
boom! creating container for: cargo +beta build --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta build --frozen cargobomb`
blam! 5236eabcbc9afc3fa51cfb38a4b8701ee065d437f15c9853fb28a82d24cd5d2b
boom! running `docker start -a 5236eabcbc9afc3fa51cfb38a4b8701ee065d437f15c9853fb28a82d24cd5d2b`
kablam!    Compiling newtype-ops v0.1.3 (file:///source)
kablam!     Finished dev [unoptimized + debuginfo] target(s) in 0.43 secs
boom! running `docker rm -f 5236eabcbc9afc3fa51cfb38a4b8701ee065d437f15c9853fb28a82d24cd5d2b`
blam! 5236eabcbc9afc3fa51cfb38a4b8701ee065d437f15c9853fb28a82d24cd5d2b
boom! running: cargo +beta test --frozen --no-run
boom! creating container for: cargo +beta test --frozen --no-run
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta test --frozen --no-run cargobomb`
blam! 3dc7c0c34a06454edd1f66484656f447bc100d29de023e5eaeeca02409b71b14
boom! running `docker start -a 3dc7c0c34a06454edd1f66484656f447bc100d29de023e5eaeeca02409b71b14`
kablam!    Compiling newtype-ops v0.1.3 (file:///source)
blam! newtype_ops! { { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } Self }
blam! newtype_ops__! { @ product :: next (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { [ foo :: Foo ] [ Bar ] } [ integer { : = } { ^ & } Self { ^ & } Self ] ) ->
blam! (  ) }
blam! newtype_ops__! { @ product :: unpack_3 (
blam! [ foo :: Foo ] [ integer { : = } { ^ & } Self { ^ & } Self ] ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ foo :: Foo ] integer { : = } { ^ & } Self { ^ & } Self
blam! ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo ] out : [ foo :: Foo ]
blam! forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo ] out : [ foo :: Foo ]
blam! forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg
blam! : [ foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] { traits : [ [ :: std :: ops :: Not ] ] } {
blam! methods : [ [ not ] ] } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [ foo :: Foo ] out : [
blam! foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] { traits : [ [ :: std :: ops :: Neg ] ] } {
blam! methods : [ [ neg ] ] } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [ foo :: Foo ] out : [
blam! foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo
blam! ] arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( [ Bar ] [ integer { : = } { ^ & } Self { ^ & } Self ]
blam! ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ Bar ] integer { : = } { ^ & } Self { ^ & } Self ) -> (
blam!  ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ]
blam! ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Bar ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ]
blam! } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ]
blam! } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg :
blam! [ & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Bar ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops! { { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } i32 }
blam! newtype_ops__! { @ product :: next (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } i32 ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } i32 ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { [ foo :: Foo ] [ Bar ] } [ integer { : = } { ^ & } Self { ^ & } i32 ] ) -> (
blam!  ) }
blam! newtype_ops__! { @ product :: unpack_3 (
blam! [ foo :: Foo ] [ integer { : = } { ^ & } Self { ^ & } i32 ] ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ foo :: Foo ] integer { : = } { ^ & } Self { ^ & } i32
blam! ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer
blam! ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer : ^ Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ]
blam! out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer : & Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg
blam! : [ i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo
blam! ] arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer
blam! ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer = ^ Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ]
blam! out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer = & Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( [ Bar ] [ integer { : = } { ^ & } Self { ^ & } i32 ] )
blam! -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ Bar ] integer { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ]
blam! ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } i32 ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg :
blam! [ & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } i32 ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops! { [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } Self }
blam! newtype_ops__! { @ product :: next (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: single (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( { add sub div neg } { : = } { ^ & } Self { ^ & } Self ) ->
blam! ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack ( { add sub div neg } { : = } { ^ & } Self { ^ & } Self )
blam! -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { add sub div neg } [ { : = } { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_3 ( add [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( add { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b Baz ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b Baz ] out : [ Baz ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( sub [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( sub { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b Baz ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b Baz ] out : [ Baz ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( div [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( div { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b Baz ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b Baz ] out : [ Baz ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( neg [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( neg { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz ] forms : [
blam! [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ]
blam! } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ] out : [ Baz ] forms : [
blam! [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops! { [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } f32 }
blam! newtype_ops__! { @ product :: next (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } f32 ) -> (  ) }
blam! newtype_ops__! { @ product :: single (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } f32 ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( { add sub div neg } { : = } { ^ & } Self { ^ & } f32 ) ->
blam! ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack ( { add sub div neg } { : = } { ^ & } Self { ^ & } f32 )
blam! -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { add sub div neg } [ { : = } { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_3 ( add [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( add { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Baz ] }
blam! { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b f32 ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ f32 ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b f32 ] out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( sub [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( sub { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Baz ] }
blam! { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b f32 ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ f32 ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b f32 ] out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( div [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( div { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Baz ] }
blam! { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b f32 ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ f32 ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b f32 ] out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( neg [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( neg { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops! { [ MyString ] { add } { : } ^ Self & { Self str } }
blam! newtype_ops__! { @ product :: next ( [ MyString ] { add } { : } ^ Self & { Self str } ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ MyString ] { add } { : } ^ Self & { Self str } ) -> (
blam! ) }
blam! newtype_ops__! { @ product :: next ( { add } { : } ^ Self & { Self str } ) -> ( [ MyString ] ) }
blam! newtype_ops__! { @ product :: unpack ( { add } { : } ^ Self & { Self str } ) -> ( [ MyString ]
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { add } [ { : } ^ Self & { Self str } ] ) -> (
blam! [ MyString ] ) }
blam! newtype_ops__! { @ product :: unpack_3 ( add [ { : } ^ Self & { Self str } ] ) -> (
blam! [ MyString ] ) }
blam! newtype_ops__! { @ product :: single ( add { : } ^ Self & { Self str } ) -> ( [ MyString ] ) }
blam! newtype_ops__! { @ product :: next ( { : } ^ Self & { Self str } ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: unpack ( { : } ^ Self & { Self str } ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : } [ ^ Self & { Self str } ] ) -> (
blam! [ MyString ] add ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ ^ Self & { Self str } ] ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: single ( : ^ Self & { Self str } ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: next ( ^ Self & { Self str } ) -> ( [ MyString ] add : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self & { Self str } ) -> ( [ MyString ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self & { Self str } ) -> ( [ MyString ] add : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self & { Self str } ) -> ( [ MyString ] add : ^ ) }
blam! newtype_ops__! { @ product :: next ( & { Self str } ) -> ( [ MyString ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & { Self str } ) -> ( [ MyString ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( { Self str } ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: unpack ( { Self str } ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { Self str } [  ] ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: unpack_3 ( Self [  ] ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ MyString ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ MyString ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ MyString ] add : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ MyString ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } { arg : [ & MyString ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ MyString ] } { arg : [ & 'b MyString ] } { out : [ MyString ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ MyString ] arg : [
blam! & 'b MyString ] out : [ MyString ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( str [  ] ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( str ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ MyString ] add : ^ Self & str ) }
blam! newtype_ops__! { @ interpret ( [ MyString ] add : ^ Self & str ) }
blam! newtype_ops__! { @ interpret :: type ( [ MyString ] add : ^ Self & str ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & str ) -> ( { value_ty : [ MyString ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & str ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & str ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & str ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & str ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & str ] } ] [
blam! { arg : [ & str ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & str ] } ] [
blam! { arg : [ & str ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & str ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } { arg : [ & str ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ MyString ] } { arg : [ & 'b str ] } { out : [ MyString ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ MyString ] arg : [
blam! & 'b str ] out : [ MyString ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! assert_eq! { Foo ( 5 ) , Foo ( 2 ) + Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 5 ) , Foo ( 2 ) + & Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 5 ) , & Foo ( 2 ) + Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 5 ) , & Foo ( 2 ) + & Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , Foo ( 8 ) / 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , & Foo ( 8 ) / 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , Foo ( 8 ) / & 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , & Foo ( 8 ) / & 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( - 3 ) , - Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( - 3 ) , - & Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , Baz ( 2. ) + Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , Baz ( 2. ) + & Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , & Baz ( 2. ) + Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , & Baz ( 2. ) + & Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , Baz ( 8. ) / 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , & Baz ( 8. ) / 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , Baz ( 8. ) / & 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , & Baz ( 8. ) / & 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( - 3. ) , - Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( - 3. ) , - & Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
kablam! error[E0554]: #[feature] may not be used on the beta release channel
kablam!   --> src/lib.rs:11:19
kablam!    |
kablam! 11 | #![cfg_attr(test, feature(trace_macros))]
kablam!    |                   ^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `newtype-ops`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f 3dc7c0c34a06454edd1f66484656f447bc100d29de023e5eaeeca02409b71b14`
blam! 3dc7c0c34a06454edd1f66484656f447bc100d29de023e5eaeeca02409b71b14
boom! running: cargo +beta test --frozen
boom! creating container for: cargo +beta test --frozen
boom! running `docker create -v /home/ec2-user/cargobomb/./work/local/test-source/beta/beta:/source:ro -v /home/ec2-user/cargobomb/./work/local/cargo-home:/cargo-home:ro -v /home/ec2-user/cargobomb/./work/local/rustup-home:/rustup-home:ro -v /home/ec2-user/cargobomb/./work/local/target-dirs/beta/beta:/target:rw -e USER_ID=500 -e CMD=cargo +beta test --frozen cargobomb`
blam! f7f4fe9fd351d753b67be8826518c92e7a72c2ceacbbff754fc943a06f8e4071
boom! running `docker start -a f7f4fe9fd351d753b67be8826518c92e7a72c2ceacbbff754fc943a06f8e4071`
kablam!    Compiling newtype-ops v0.1.3 (file:///source)
blam! newtype_ops! { { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } Self }
blam! newtype_ops__! { @ product :: next (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { [ foo :: Foo ] [ Bar ] } [ integer { : = } { ^ & } Self { ^ & } Self ] ) ->
blam! (  ) }
blam! newtype_ops__! { @ product :: unpack_3 (
blam! [ foo :: Foo ] [ integer { : = } { ^ & } Self { ^ & } Self ] ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ foo :: Foo ] integer { : = } { ^ & } Self { ^ & } Self
blam! ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo ] out : [ foo :: Foo ]
blam! forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo ] out : [ foo :: Foo ]
blam! forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg
blam! : [ foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] { traits : [ [ :: std :: ops :: Not ] ] } {
blam! methods : [ [ not ] ] } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [ foo :: Foo ] out : [
blam! foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ foo :: Foo ] } ] { traits : [ [ :: std :: ops :: Neg ] ] } {
blam! methods : [ [ neg ] ] } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a foo :: Foo ] } { arg : [ foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [ foo :: Foo ] out : [
blam! foo :: Foo ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo
blam! ] arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } {
blam! arg : [ & foo :: Foo ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b foo :: Foo ] } {
blam! out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b foo :: Foo ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [
blam! foo :: Foo ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ foo :: Foo ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } {
blam! recv : [ foo :: Foo ] } { arg : [ foo :: Foo ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ foo :: Foo
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> (
blam! [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ]
blam! } { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ]
blam! } ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & Self ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( [ Bar ] [ integer { : = } { ^ & } Self { ^ & } Self ]
blam! ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ Bar ] integer { : = } { ^ & } Self { ^ & } Self ) -> (
blam!  ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ]
blam! ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Bar ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b Bar ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ]
blam! } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Not ] ] methods : [ [ not ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a Bar ] } { arg : [ Bar ] } { out : [ Bar ]
blam! } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ Bar ] out : [ Bar ] forms : [
blam! [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg :
blam! [ & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b Bar ] out : [ Bar ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Bar ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ Bar ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ Bar ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ Bar ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & Self ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops! { { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } i32 }
blam! newtype_ops__! { @ product :: next (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } i32 ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack (
blam! { [ foo :: Foo ] [ Bar ] } integer { : = } { ^ & } Self { ^ & } i32 ) -> (  ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { [ foo :: Foo ] [ Bar ] } [ integer { : = } { ^ & } Self { ^ & } i32 ] ) -> (
blam!  ) }
blam! newtype_ops__! { @ product :: unpack_3 (
blam! [ foo :: Foo ] [ integer { : = } { ^ & } Self { ^ & } i32 ] ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ foo :: Foo ] integer { : = } { ^ & } Self { ^ & } i32
blam! ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer
blam! ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer : ^ Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ]
blam! out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg :
blam! [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ foo :: Foo ] arg : [
blam! & 'b i32 ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer : & Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg
blam! : [ i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a foo :: Foo ] arg : [
blam! i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer : & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo
blam! ] arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [
blam! & 'a foo :: Foo ] arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [
blam! [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a foo :: Foo ] } { arg : [ & 'b i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a foo :: Foo ]
blam! arg : [ & 'b i32 ] out : [ foo :: Foo ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer
blam! ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> (
blam! [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer = ^ Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ]
blam! out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32
blam! ] out : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ foo :: Foo ]
blam! } { arg : [ i32 ] } { out : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ foo :: Foo ] arg : [ i32 ] out
blam! : [ foo :: Foo ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ foo :: Foo ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ foo :: Foo ] integer = & Self
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ foo :: Foo ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ foo :: Foo ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ foo :: Foo ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ foo :: Foo ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ foo :: Foo ] integer = & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ]
blam! } { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] }
blam! { methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ]
blam! } { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & i32 ) -> ( { value_ty : [ foo :: Foo ] }
blam! ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ foo :: Foo ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ foo :: Foo ] } { recv_form : [ & x . 0 ] }
blam! ] { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( [ Bar ] [ integer { : = } { ^ & } Self { ^ & } i32 ] )
blam! -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ Bar ] integer { : = } { ^ & } Self { ^ & } i32 ) -> (
blam! ) }
blam! newtype_ops__! { @ product :: next ( integer { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] ) }
blam! newtype_ops__! { @ product :: single ( integer { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ]
blam! ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } i32 ] ) -> (
blam! [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } i32 ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer :
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Bar ] }
blam! { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'b > ] recv : [ Bar ] arg : [ & 'b i32 ]
blam! out : [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ Bar ] integer : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [
blam! i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Bar ] arg : [ i32 ]
blam! out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer : & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer : & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer : & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg :
blam! [ & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg
blam! : [ & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Bar ] } { arg : [ & 'b i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Bar ] arg : [
blam! & 'b i32 ] out : [ Bar ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } i32 ] ) -> ( [ Bar ] integer
blam! ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer =
blam! ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] }
blam! { methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] methods : [
blam! [ bitand ] [ bitand_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] methods : [
blam! [ bitor ] [ bitor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [
blam! Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] }
blam! { methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] methods : [
blam! [ bitxor ] [ bitxor_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out :
blam! [ Bar ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] methods : [
blam! [ mul ] [ mul_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } { arg : [ i32 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Bar ] } {
blam! arg : [ i32 ] } { out : [ Bar ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] methods : [
blam! [ rem ] [ rem_assign ] ] tpars : [  ] recv : [ Bar ] arg : [ i32 ] out : [ Bar
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = ^ Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = ^ Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } i32 ] ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } i32 ) -> ( [ Bar ] integer = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } i32 ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } i32 ) -> ( [ Bar ] integer = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ i32 ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ i32 ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self ^ i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self ^ i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ i32 ] } ] [
blam! { arg : [ i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ i32 ] ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: single ( & i32 ) -> ( [ Bar ] integer = & Self ) }
blam! newtype_ops__! { @ product :: next ( i32 ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: single ( i32 ) -> ( [ Bar ] integer = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Bar ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret ( [ Bar ] integer = & Self & i32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Bar ] integer = & Self & i32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( integer = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitand = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitAnd ] [ :: std :: ops :: BitAndAssign ] ] } {
blam! methods : [ [ bitand ] [ bitand_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitor = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitOr ] [ :: std :: ops :: BitOrAssign ] ] } {
blam! methods : [ [ bitor ] [ bitor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( bitxor = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: BitXor ] [ :: std :: ops :: BitXorAssign ] ] } {
blam! methods : [ [ bitxor ] [ bitxor_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( not = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Not ] ] } { methods : [ [ not ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( mul = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Mul ] [ :: std :: ops :: MulAssign ] ] } {
blam! methods : [ [ mul ] [ mul_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( rem = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & i32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Rem ] [ :: std :: ops :: RemAssign ] ] } {
blam! methods : [ [ rem ] [ rem_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & i32 ) -> ( { value_ty : [ Bar ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & i32 ) -> (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Bar ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & i32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & i32 ] } ] [
blam! { arg : [ & i32 ] } { value_ty : [ Bar ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops! { [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } Self }
blam! newtype_ops__! { @ product :: next (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: single (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } Self ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( { add sub div neg } { : = } { ^ & } Self { ^ & } Self ) ->
blam! ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack ( { add sub div neg } { : = } { ^ & } Self { ^ & } Self )
blam! -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { add sub div neg } [ { : = } { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_3 ( add [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( add { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b Baz ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b Baz ] out : [ Baz ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( sub [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( sub { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b Baz ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b Baz ] out : [ Baz ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( div [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( div { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b Baz ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b Baz ] out : [ Baz ] forms : [ [ & x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # value ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( neg [ { : = } { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( neg { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } Self ] ) -> (
blam! [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [  ] } { recv : [ Baz ] } { arg : [ Baz ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [  ] recv : [ Baz ] arg : [ Baz ] out : [ Baz ] forms : [
blam! [ x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } {
blam! arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ Baz ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } { kind : unary } {
blam! tpars : [ < 'a > ] } { recv : [ & 'a Baz ] } { arg : [ Baz ] } { out : [ Baz ]
blam! } ) }
blam! newtype_ops__! { @ impl :: unary traits : [ [ :: std :: ops :: Neg ] ] methods : [ [ neg ] ]
blam! tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ Baz ] out : [ Baz ] forms : [
blam! [ & x . 0 ] [ x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } Self ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } Self ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } Self ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } Self ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } Self ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } Self ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } Self ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self ^ Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self ^ Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # value ] } {
blam! arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x . 0 ] } { arg : [ # value ] } ] [
blam! { arg : [ # value ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( & Self ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( Self ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & Self ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ # ref ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops! { [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } f32 }
blam! newtype_ops__! { @ product :: next (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } f32 ) -> (  ) }
blam! newtype_ops__! { @ product :: single (
blam! [ Baz ] { add sub div neg } { : = } { ^ & } Self { ^ & } f32 ) -> (  ) }
blam! newtype_ops__! { @ product :: next ( { add sub div neg } { : = } { ^ & } Self { ^ & } f32 ) ->
blam! ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack ( { add sub div neg } { : = } { ^ & } Self { ^ & } f32 )
blam! -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_2 (
blam! { add sub div neg } [ { : = } { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: unpack_3 ( add [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( add { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] add ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Baz ] }
blam! { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b f32 ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ f32 ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b f32 ] out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] add = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] add = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] add = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] add = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] add = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] add = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] add = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( sub [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( sub { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Baz ] }
blam! { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b f32 ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] sub : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ f32 ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b f32 ] out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] methods : [
blam! [ sub ] [ sub_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] sub = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] sub = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] sub = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] sub = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] sub = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] sub = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] sub = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( sub = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Sub ] [ :: std :: ops :: SubAssign ] ] } {
blam! methods : [ [ sub ] [ sub_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( div [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( div { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] div ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } { recv : [ Baz ] }
blam! { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'b > ] recv : [ Baz ] arg : [ & 'b f32 ]
blam! out : [ Baz ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] div : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a > ] recv : [ & 'a Baz ] arg : [ f32 ]
blam! out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : normal } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'a , 'b > ] } {
blam! recv : [ & 'a Baz ] } { arg : [ & 'b f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [ < 'a , 'b > ] recv : [ & 'a Baz ] arg : [
blam! & 'b f32 ] out : [ Baz ] forms : [ [ & x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } { arg : [ f32 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : assign } { tpars : [  ] } { recv : [ Baz ] } {
blam! arg : [ f32 ] } { out : [ Baz ] } ) }
blam! newtype_ops__! { @ impl :: assign traits : [
blam! [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] methods : [
blam! [ div ] [ div_assign ] ] tpars : [  ] recv : [ Baz ] arg : [ f32 ] out : [ Baz
blam! ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ & mut x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] div = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] div = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] div = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] div = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] div = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] div = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] div = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( div = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { mode : assign } {
blam! recv_form : [ & x . 0 ] } { arg : [ & f32 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : binary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : assign } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Div ] [ :: std :: ops :: DivAssign ] ] } {
blam! methods : [ [ div ] [ div_assign ] ] } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( neg [ { : = } { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] ) }
blam! newtype_ops__! { @ product :: single ( neg { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] ) }
blam! newtype_ops__! { @ product :: next ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack ( { : = } { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : = } [ { ^ & } Self { ^ & } f32 ] ) -> (
blam! [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( : { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg : ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] neg : ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg : & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg : & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg : & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg : & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg : & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg : & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg : & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : normal } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : unary } { recv_form : [ & x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( = [ { ^ & } Self { ^ & } f32 ] ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: single ( = { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( ^ Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg = ^ ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = ^ Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ f32 ] } { arg_form : [ x ]
blam! } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg = ^ Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = ^ Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = ^ Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = ^ Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ Self { ^ & } f32 ] ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: single ( & Self { ^ & } f32 ) -> ( [ Baz ] neg = ) }
blam! newtype_ops__! { @ product :: next ( Self { ^ & } f32 ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: single ( Self { ^ & } f32 ) -> ( [ Baz ] neg = & ) }
blam! newtype_ops__! { @ product :: next ( { ^ & } f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack ( { ^ & } f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { ^ & } [ f32 ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: unpack_3 ( ^ [ f32 ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( ^ f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = & Self ^ ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self ^ f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self ^ f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self ^ f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( ^ f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ f32 ] } ] [
blam! { arg : [ f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ product :: unpack_3 ( & [ f32 ] ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: single ( & f32 ) -> ( [ Baz ] neg = & Self ) }
blam! newtype_ops__! { @ product :: next ( f32 ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: single ( f32 ) -> ( [ Baz ] neg = & Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ Baz ] neg = & Self & f32 ) }
blam! newtype_ops__! { @ interpret ( [ Baz ] neg = & Self & f32 ) }
blam! newtype_ops__! { @ interpret :: type ( [ Baz ] neg = & Self & f32 ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( neg = & Self & f32 ) -> ( { value_ty : [ Baz ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( = & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( & Self & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } ) }
blam! newtype_ops__! { @ interpret :: other ( & f32 ) -> (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ Baz ] } { kind : unary } {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! mode : assign } { recv_form : [ & x . 0 ] } { arg : [ & f32 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : assign } { kind : unary } { recv_form : [ & x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & f32 ] } ] [
blam! { arg : [ & f32 ] } { value_ty : [ Baz ] } { recv_form : [ & x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Neg ] ] } { methods : [ [ neg ] ] } {
blam! recv_form : [ & x . 0 ] } { arg_form : [ x ] } ) }
blam! newtype_ops! { [ MyString ] { add } { : } ^ Self & { Self str } }
blam! newtype_ops__! { @ product :: next ( [ MyString ] { add } { : } ^ Self & { Self str } ) -> (  ) }
blam! newtype_ops__! { @ product :: single ( [ MyString ] { add } { : } ^ Self & { Self str } ) -> (
blam! ) }
blam! newtype_ops__! { @ product :: next ( { add } { : } ^ Self & { Self str } ) -> ( [ MyString ] ) }
blam! newtype_ops__! { @ product :: unpack ( { add } { : } ^ Self & { Self str } ) -> ( [ MyString ]
blam! ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { add } [ { : } ^ Self & { Self str } ] ) -> (
blam! [ MyString ] ) }
blam! newtype_ops__! { @ product :: unpack_3 ( add [ { : } ^ Self & { Self str } ] ) -> (
blam! [ MyString ] ) }
blam! newtype_ops__! { @ product :: single ( add { : } ^ Self & { Self str } ) -> ( [ MyString ] ) }
blam! newtype_ops__! { @ product :: next ( { : } ^ Self & { Self str } ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: unpack ( { : } ^ Self & { Self str } ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { : } [ ^ Self & { Self str } ] ) -> (
blam! [ MyString ] add ) }
blam! newtype_ops__! { @ product :: unpack_3 ( : [ ^ Self & { Self str } ] ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: single ( : ^ Self & { Self str } ) -> ( [ MyString ] add ) }
blam! newtype_ops__! { @ product :: next ( ^ Self & { Self str } ) -> ( [ MyString ] add : ) }
blam! newtype_ops__! { @ product :: single ( ^ Self & { Self str } ) -> ( [ MyString ] add : ) }
blam! newtype_ops__! { @ product :: next ( Self & { Self str } ) -> ( [ MyString ] add : ^ ) }
blam! newtype_ops__! { @ product :: single ( Self & { Self str } ) -> ( [ MyString ] add : ^ ) }
blam! newtype_ops__! { @ product :: next ( & { Self str } ) -> ( [ MyString ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: single ( & { Self str } ) -> ( [ MyString ] add : ^ Self ) }
blam! newtype_ops__! { @ product :: next ( { Self str } ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: unpack ( { Self str } ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: unpack_2 ( { Self str } [  ] ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: unpack_3 ( Self [  ] ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( Self ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ MyString ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret ( [ MyString ] add : ^ Self & Self ) }
blam! newtype_ops__! { @ interpret :: type ( [ MyString ] add : ^ Self & Self ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & Self ) -> ( { value_ty : [ MyString ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & Self ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & Self ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & Self ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ # ref ] } { arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ & x . 0 ] } {
blam! arg : [ # ref ] } ] [
blam! { arg : [ # ref ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ # ref ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [
blam! { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } { arg : [ & MyString ] }
blam! ] { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ & x . 0 ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ MyString ] } { arg : [ & 'b MyString ] } { out : [ MyString ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ MyString ] arg : [
blam! & 'b MyString ] out : [ MyString ] forms : [ [ x . 0 ] [ & x . 0 ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ & x . 0 ] [ other ] [ 0 ] }
blam! newtype_ops__! { @ product :: unpack_3 ( str [  ] ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: single ( str ) -> ( [ MyString ] add : ^ Self & ) }
blam! newtype_ops__! { @ product :: next (  ) -> ( [ MyString ] add : ^ Self & str ) }
blam! newtype_ops__! { @ interpret ( [ MyString ] add : ^ Self & str ) }
blam! newtype_ops__! { @ interpret :: type ( [ MyString ] add : ^ Self & str ) -> (  ) }
blam! newtype_ops__! { @ interpret :: oper ( add : ^ Self & str ) -> ( { value_ty : [ MyString ] } ) }
blam! newtype_ops__! { @ interpret :: mode ( : ^ Self & str ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } ) }
blam! newtype_ops__! { @ interpret :: self ( ^ Self & str ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } ) }
blam! newtype_ops__! { @ interpret :: other ( & str ) -> (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } ) }
blam! newtype_ops__! { @ postprocess (
blam! { value_ty : [ MyString ] } { kind : binary } {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { mode : normal } {
blam! recv_form : [ x . 0 ] } { arg : [ & str ] } { arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { mode : normal } { kind : binary } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { arg : [ & str ] } ] [
blam! { arg : [ & str ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: blacklist (
blam! [
blam! { kind : binary } { recv_form : [ x . 0 ] } { arg_form : [ x ] } {
blam! arg : [ & str ] } ] [
blam! { arg : [ & str ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ] {
blam! traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } ) }
blam! newtype_ops__! { @ postprocess :: true_types (
blam! [ { arg : [ & str ] } { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: true_types :: 2 (
blam! [ { value_ty : [ MyString ] } { recv_form : [ x . 0 ] } { arg : [ & str ] } ]
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } ) }
blam! newtype_ops__! { @ postprocess :: almost_there (
blam! { traits : [ [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] } {
blam! methods : [ [ add ] [ add_assign ] ] } { recv_form : [ x . 0 ] } {
blam! arg_form : [ x ] } { kind : binary } { tpars : [ < 'b > ] } {
blam! recv : [ MyString ] } { arg : [ & 'b str ] } { out : [ MyString ] } ) }
blam! newtype_ops__! { @ impl :: binary traits : [
blam! [ :: std :: ops :: Add ] [ :: std :: ops :: AddAssign ] ] methods : [
blam! [ add ] [ add_assign ] ] tpars : [ < 'b > ] recv : [ MyString ] arg : [
blam! & 'b str ] out : [ MyString ] forms : [ [ x . 0 ] [ x ] ] }
blam! newtype_ops__! { @ helper :: delegate [ x . 0 ] [ this ] [ 0 ] }
blam! newtype_ops__! { @ helper :: delegate [ x ] [ other ] [ 0 ] }
blam! assert_eq! { Foo ( 5 ) , Foo ( 2 ) + Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 5 ) , Foo ( 2 ) + & Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 5 ) , & Foo ( 2 ) + Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 5 ) , & Foo ( 2 ) + & Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , Foo ( 8 ) / 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , & Foo ( 8 ) / 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , Foo ( 8 ) / & 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( 4 ) , & Foo ( 8 ) / & 2 }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( - 3 ) , - Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Foo ( - 3 ) , - & Foo ( 3 ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , Baz ( 2. ) + Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , Baz ( 2. ) + & Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , & Baz ( 2. ) + Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 5. ) , & Baz ( 2. ) + & Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , Baz ( 8. ) / 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , & Baz ( 8. ) / 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , Baz ( 8. ) / & 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( 4. ) , & Baz ( 8. ) / & 2. }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( - 3. ) , - Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
blam! assert_eq! { Baz ( - 3. ) , - & Baz ( 3. ) }
blam! panic! { "assertion failed: `(left == right)` \
blam!                            (left: `{:?}`, right: `{:?}`)"
blam! , left_val , right_val }
kablam! error[E0554]: #[feature] may not be used on the beta release channel
kablam!   --> src/lib.rs:11:19
kablam!    |
kablam! 11 | #![cfg_attr(test, feature(trace_macros))]
kablam!    |                   ^^^^^^^^^^^^^^^^^^^^^
kablam! 
kablam! error: aborting due to previous error
kablam! 
kablam! error: Could not compile `newtype-ops`.
kablam! 
kablam! To learn more, run the command again with --verbose.
boom! running `docker rm -f f7f4fe9fd351d753b67be8826518c92e7a72c2ceacbbff754fc943a06f8e4071`
blam! f7f4fe9fd351d753b67be8826518c92e7a72c2ceacbbff754fc943a06f8e4071
